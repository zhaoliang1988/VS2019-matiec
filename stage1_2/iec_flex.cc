#line 2 "F:/vsproject/matiec-vs/stage1_2/iec_flex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 345
#define YY_END_OF_BUFFER 346
static yyconst short int yy_acclist[4124] =
    {   0,
       78,  319,   78,  319,   78,  319,   78,  319,   78,  319,
       78,  319,   78,  319,   78,  319,   50,   50,   78,  319,
       78,  319,   53,   53,   79,  319,   79,  319,   78,  319,
       78,  319,   78,  319,   78,  319,   78,  319,   78,  319,
      319,  319,   12,   12,  346,  344,  345,   78,  344,  345,
       78,  345,  344,  345,  344,  345,  255,  285,  344,  345,
      344,  345,  344,  345,  344,  345,  344,  345,  336,  344,
      345,  336,  344,  345,  336,  344,  345,  336,  344,  345,
      344,  345,  344,  345,  344,  345,  344,  345,  344,  345,
      343,  344,  345,  343,  344,  345,  343,  344,  345,  343,

      344,  345,  343,  344,  345,  343,  344,  345,  343,  344,
      345,  343,  344,  345,  343,  344,  345,  343,  344,  345,
      343,  344,  345,  343,  344,  345,  343,  344,  345,  343,
      344,  345,  343,  344,  345,  343,  344,  345,  343,  344,
      345,  343,  344,  345,  343,  344,  345,  343,  344,  345,
      344,  345,   25,  345,   25,  345,   25,  345,   20,  345,
      345,   20,  345,   20,  345,   19,   20,  345,  343,  344,
      345,  343,  344,  345,  343,  344,  345,  344,  345,  343,
      344,  345,  343,  344,  345,  343,  344,  345,  343,  344,
      345,  343,  344,  345,   51,  345,   50,   51,  345,   50,

      345,   51,  345,   51,  345,   51,  345,   51,  345,  343,
      344,  345,   61,  345,   53,   61,  345,   61,  345,   61,
      345,   61,  345,   61,  345,   61,  345,   61,  345,   61,
      345,   61,  345,   61,  345,   79,  344,  345,  237,  345,
      255,  285,  344,  345,  344,  345,  343,  344,  345,16726,
      343,  344,  345,16726,  343,  344,  345,16726,  343,  344,
      345,16726,  343,  344,  345,16726,  343,  344,  345,16726,
      343,  344,  345,16726,  343,  344,  345,16726,  343,  344,
      345,16726,  343,  344,  345,16726,  343,  344,  345,16726,
      343,  344,  345,16726,  343,  344,  345,16726,  343,  344,

      345,16726,  343,  344,  345,16726,  254,  343,  344,  345,
    16726,  253,  343,  344,  345,16726,  343,  344,  345,16726,
      343,  344,  345,16726,  343,  344,  345,16726,  343,  344,
      345,16726,  343,  344,  345,16726,  344,  345,  343,  344,
      345,16725,  343,  344,  345,16725,  343,  344,  345,16725,
      343,  344,  345,16725,  343,  344,  345,16725,  343,  344,
      345,16725,  343,  344,  345,16725,  343,  344,  345,16725,
      343,  344,  345,16725,  343,  344,  345,16725,  343,  344,
      345,16725,  343,  344,  345,16725,  343,  344,  345,16725,
      343,  344,  345,16725,  343,  344,  345,16725,  343,  344,

      345,16725,  343,  344,  345,16725,  343,  344,  345,16725,
      343,  344,  345,16725,  343,  344,  345,16725,  343,  344,
      345,  209,  343,  344,  345,  208,  343,  344,  345,  213,
      343,  344,  345,  214,  343,  344,  345,  217,  343,  344,
      345,  218,  343,  344,  345,  343,  344,  345,  332,  345,
      333,  345,  331,  332,  345,  332,  345,  330,  332,  345,
       84,  345,   85,  345,   84,  345,   84,  345,  345,   12,
      345,   14,  345,   14,  345,   78,  334,  335,   81,  281,
      168,  336,  318,  319,  318,  319,  318,  319,  318,  319,
      336,  167,  291,  284,  282,  292,  283,  343,  343,  343,

      343,  343,  185,  343,  343,  305,  343,  343,  343,  108,
      109,  343,  343,  306,  309,  343,  343,  111,  131,  343,
      343,  343,   90,  343,  343,  343,  343,  343,  343,  294,
      343,  343,  343,  343,  343,  343,  343,  343,  172,  300,
      343,  223,  343,  240,  288,  343,  343,  343,  343,  343,
      343,  102,  103,  343,  343,  343,  203,  304,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,    9,   80,   19,   19,  343,  343,  343,
      343,  343,  343,   90,  343,  343,   50,   90,  343,   53,
       55,   63,    8,   79,  269,  343,16726,  343,16726,  343,

    16726,  343,16726,  343,16726,  343,16726,  185,  343,16726,
      343,16726,  305,  343,16726,  343,16726,  264,  343,16726,
      343,16726,  343,16726,  263,  343,16726,  343,16726,  343,
    16726,  306,  309,  343,16726,  343,16726,  111,  131,  343,
    16726,  343,16726,  343,16726,   90,  343,16726,  245,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  246,  343,16726,  247,  343,16726,  294,  343,16726,
      266,  343,16726,  343,16726,  256,  343,16726,  248,  343,
    16726,  343,16726,  343,16726,  249,  343,16726,  343,16726,
      343,16726,  343,16726,  251,  343,16726,  343,16726,  343,

    16726,  172,  300,  343,16726,  223,  343,16726,  240,  288,
      343,16726,  343,16726,  267,  343,16726,  265,  343,16726,
      261,  343,16726,  343,16726,  260,  343,16726,  343,16726,
      343,16726,  258,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  203,  304,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  185,  343,16725,  343,16725,
      305,  343,16725,  343,16725,  343,16725,  343,16725,  343,

    16725,  306,  309,  343,16725,  343,16725,  111,  131,  343,
    16725,  343,16725,  343,16725,   90,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  294,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  172,  300,  343,16725,  223,
      343,16725,  240,  288,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  203,  304,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,

      343,16725,  343,16725,   90,  343,  211,  343,  215,  343,
      216,  343,  210,  343,  212,  343,  343,  320,  321,  322,
      323,   82,   83,   12,   13,  316,  315,  317,  319,  319,
      319,  318,  319,  319,  338,  339,  343,  238,  286,  343,
      157,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,   91,  343,  343,  343,  343,  303,  343,
      343,  343,  343,  118,  343,  343,  343,  343,  239,  290,
      343,  343,  242,  289,  343,  343,  343,  343,  343,   86,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  106,  132,  343,  343,  343,  343,  343,  343,  343,

      343,  343,  188,  193,  343,  343,  343,  343,  343,  343,
      241,  287,  343,    9,  343,  343,  343,  118,  343,  343,
      343,  343,   26,  188,  193,  343,  343,   65,    8, 8534,
      343,16726,  243,  343,16726,  238,  286,  343,16726,  157,
      343,16726,  343,16726,  343,16726,  343,16726,  272,  343,
    16726,  343,16726,  262,  343,16726,  343,16726,  343,16726,
      343,16726,  244,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,   91,  343,16726,  343,16726,  343,16726,
      343,16726,  303,  343,16726,  343,16726,  343,16726,  343,
    16726,  118,  343,16726,  278,  343,16726,  257,  343,16726,

      343,16726,  343,16726,  343,16726,  239,  290,  343,16726,
      250,  343,16726,  343,16726,  242,  289,  343,16726,  343,
    16726,  270,  343,16726,  343,16726,  343,16726,  343,16726,
       86,  343,16726,  343,16726,  343,16726,  275,  343,16726,
      343,16726,  343,16726,  343,16726,  259,  343,16726,  343,
    16726,  252,  343,16726,  343,16726,  343,16726,  343,16726,
      106,  132,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,  343,16726,  343,16726,
      188,  193,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  343,16726,  241,  287,  343,16726, 8533,  343,

    16725,  238,  286,  343,16725,  157,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
       91,  343,16725,  343,16725,  343,16725,  343,16725,  303,
      343,16725,  343,16725,  343,16725,  343,16725,  118,  343,
    16725,  343,16725,  343,16725,  343,16725,  239,  290,  343,
    16725,  343,16725,  242,  289,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,   86,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  106,  132,

      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  188,  193,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  241,  287,  343,16725,  343,  343,  324,  315,
      317,  318,  319,  318,  319,  318,  319,  318,  319,  318,
      319,  319,  319,  318,  319,  318,  319,  340,  338,  339,
      343,  343,  112,  343,  113,  343,  299,  343,  343,  343,
      107,  130,  343,  119,  343,   87,  343,  343,  297,  301,
      343,  343,  314,  343,  343,  343,  202,  343,  343,  343,
      120,  343,  343,  343,   89,  343,  343,  343,  343,  125,

      343,  343,  343,  343,  343,  343,  117,  343,  205,  343,
      343,  343,  221,  343,  295,  343,  104,  129,  343,  343,
       92,  343,  169,  343,  343,  122,  343,  343,  343,  343,
      135,  343,  343,  228,  343,  114,  343,  343,  343,  343,
      343,  343,  343,  343,   46,   64,   67,  343,16726,  268,
      343,16726,  343,16726,  112,  343,16726,  113,  343,16726,
      273,  343,16726,  299,  343,16726,  343,16726,  343,16726,
      107,  130,  343,16726,  119,  343,16726,   87,  343,16726,
      343,16726,  297,  301,  343,16726,  343,16726,  314,  343,
    16726,  343,16726,  343,16726,  202,  343,16726,  343,16726,

      343,16726,  279,  343,16726,  120,  343,16726,  343,16726,
      343,16726,   89,  343,16726,  343,16726,  343,16726,  343,
    16726,  125,  343,16726,  343,16726,  343,16726,  343,16726,
      276,  343,16726,  343,16726,  343,16726,  117,  343,16726,
      205,  343,16726,  343,16726,  343,16726,  221,  343,16726,
      295,  343,16726,  104,  129,  343,16726,  343,16726,   92,
      343,16726,  169,  343,16726,  343,16726,  122,  343,16726,
      343,16726,  343,16726,  343,16726,  135,  343,16726,  343,
    16726,  228,  343,16726,  114,  343,16726,  343,16726,  271,
      343,16726,  343,16725,  343,16725,  112,  343,16725,  113,

      343,16725,  299,  343,16725,  343,16725,  343,16725,  107,
      130,  343,16725,  119,  343,16725,   87,  343,16725,  343,
    16725,  297,  301,  343,16725,  343,16725,  314,  343,16725,
      343,16725,  343,16725,  202,  343,16725,  343,16725,  343,
    16725,  120,  343,16725,  343,16725,  343,16725,   89,  343,
    16725,  343,16725,  343,16725,  343,16725,  125,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      117,  343,16725,  205,  343,16725,  343,16725,  343,16725,
      221,  343,16725,  295,  343,16725,  104,  129,  343,16725,
      343,16725,   92,  343,16725,  169,  343,16725,  343,16725,

      122,  343,16725,  343,16725,  343,16725,  343,16725,  135,
      343,16725,  343,16725,  228,  343,16725,  114,  343,16725,
      343,16725,  343,  325,  326,  327,  328,  315,  315,  315,
      319,  337,  319,  319,  319,  319,  319,  319,  319,  319,
      318,  319,  340,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  171,  343,  343,  343,  115,  343,  296,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,   97,  343,  343,  343,  126,  343,  116,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  123,

      343,  124,  343,  312,  343,  121,  343,  343,  343,  343,
      343,  343,  343,  343,  308,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,   10,  343,   66,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  171,  343,16726,  274,  343,16726,  343,
    16726,  343,16726,  115,  343,16726,  296,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,   97,  343,16726,  343,16726,  343,16726,  280,  343,

    16726,  126,  343,16726,  116,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  277,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,  343,16726,  343,16726,
      123,  343,16726,  124,  343,16726,  312,  343,16726,  121,
      343,16726,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,  308,  343,16726,  343,
    16726,  343,16725,  343,16725,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,  171,

      343,16725,  343,16725,  343,16725,  115,  343,16725,  296,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,   97,  343,16725,  343,16725,  343,
    16725,  126,  343,16725,  116,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  343,16725,  123,  343,16725,
      124,  343,16725,  312,  343,16725,  121,  343,16725,  343,

    16725,  343,16725,  343,16725,  343,16725,  343,16725,  343,
    16725,  343,16725,  308,  343,16725,  343,16725,  343,  343,
      343,  329,  315,  315,  315,  337,  318,  319,  318,  319,
      318,  319,  318,  319,  318,  319,  198,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,   98,   93,  343,
      343,  343,  343,  343,  343,  343,  343,  298,  343,  343,
      343,  343,  343,  343,  343,  343,  184,  343,  343,  343,
      343,  343,  183,  343,  343,  343,   88,  343,  311,  343,
      343,  181,  230,  343,  293,  343,  343,  343,  343,  343,
      153,  343,  343,  343,  343,  343,  343,  343,  343,  343,

      343,  343,  343,  343,  343,  343,  128,  343,  173,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  235,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,   10,  343,   68,   62,
      198,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726, 8534,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,  343,16726,  298,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  184,  343,16726,  343,16726,

      343,16726,  343,16726,  343,16726,  183,  343,16726,  343,
    16726,  343,16726,   88,  343,16726,  311,  343,16726,  343,
    16726,  181,  230,  343,16726,  293,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,  153,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  128,  343,16726,
      173,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  198,  343,16725,  343,16725,  343,16725,

      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725, 8533,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,  343,
    16725,  298,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  184,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,  183,
      343,16725,  343,16725,  343,16725,   88,  343,16725,  311,
      343,16725,  343,16725,  181,  230,  343,16725,  293,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,  153,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,

      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      128,  343,16725,  173,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,  343,  343,  315,
      315,  315,  319,  319,  318,  319,  164,  343,  343,  343,
      343,  163,  343,  343,  161,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  307,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  180,  195,  227,  343,  343,  343,
      343,  343,   17,  196,  229,  343,  343,  343,  343,  343,

      343,  343,  343,  343,  144,  343,  343,  343,  343,  343,
      343,  343,  154,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  127,  343,
      343,  343,  196,  229,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,   52,  180,  195,  227,
      343,  164,  343,16726,  343,16726,  343,16726,  343,16726,
      163,  343,16726,  343,16726,  161,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  343,16726,  307,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,

    16726,  343,16726,  180,  195,  227,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,  196,  229,  343,16726,
      343,16726,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,  144,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  154,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  127,  343,16726,  164,  343,16725,  343,16725,
      343,16725,  343,16725,  163,  343,16725,  343,16725,  161,

      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  307,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  343,16725,  180,  195,  227,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      196,  229,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      144,  343,16725,  343,16725,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  154,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,

      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  127,  343,16725,  343,
      343,  343,  318,  319,  318,  319,  318,  319,  166,  343,
      343,  343,  343,  162,  343,  343,  343,  189,  343,  343,
      343,  302,  343,  343,  343,  343,  343,  343,  206,  343,
      343,  343,  170,  343,  343,   15,  186,  343,  343,   17,
      343,  343,  222,  343,  136,  343,  137,  343,  152,  343,
      145,  343,  343,  146,  343,  343,  343,  141,  343,  143,
      343,  151,  343,  343,  148,  343,  343,  343,  138,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  192,  343,

      343,  186,  343,  236,  343,  234,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,   32,  192,  343,  166,
      343,16726,  343,16726,  343,16726,  343,16726,  162,  343,
    16726,  343,16726,  343,16726,  189,  343,16726,  343,16726,
      343,16726,  302,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  206,  343,16726,  343,16726,
      343,16726,  170,  343,16726,  343,16726,  186,  343,16726,
      343,16726,  343,16726,  343,16726,  222,  343,16726,  136,
      343,16726,  137,  343,16726,  152,  343,16726,  145,  343,
    16726,  343,16726,  146,  343,16726,  343,16726,  343,16726,

      141,  343,16726,  143,  343,16726,  151,  343,16726,  343,
    16726,  148,  343,16726,  343,16726,  343,16726,  138,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  192,  343,16726,
      166,  343,16725,  343,16725,  343,16725,  343,16725,  162,
      343,16725,  343,16725,  343,16725,  189,  343,16725,  343,
    16725,  343,16725,  302,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  206,  343,16725,  343,
    16725,  343,16725,  170,  343,16725,  343,16725,  186,  343,
    16725,  343,16725,  343,16725,  343,16725,  222,  343,16725,

      136,  343,16725,  137,  343,16725,  152,  343,16725,  145,
      343,16725,  343,16725,  146,  343,16725,  343,16725,  343,
    16725,  141,  343,16725,  143,  343,16725,  151,  343,16725,
      343,16725,  148,  343,16725,  343,16725,  343,16725,  138,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  192,  343,
    16725,  343,  343,  207,  343,  319,  318,  319,  343,  343,
      343,  343,   94,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  310,  343,   15,  343,  343,  233,  343,  343,
      139,  343,  142,  343,  140,  343,  149,  343,  150,  343,

      147,  343,  343,  343,  343,  343,  343,  343,  343,  175,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
       27,  175,  343,  343,   43,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  310,  343,16726,  343,16726,  343,16726,  233,  343,
    16726,  343,16726,  139,  343,16726,  142,  343,16726,  140,
      343,16726,  149,  343,16726,  150,  343,16726,  147,  343,
    16726,  343,16726,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16726,  175,  343,16726,  343,16726,

      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  310,  343,16725,  343,
    16725,  343,16725,  233,  343,16725,  343,16725,  139,  343,
    16725,  142,  343,16725,  140,  343,16725,  149,  343,16725,
      150,  343,16725,  147,  343,16725,  343,16725,  343,16725,
      343,16725,  343,16725,  343,16725,  343,16725,  343,16725,
      175,  343,16725,  343,16725,  343,  343,  318,  319,  343,
      343,  343,  165,  343,   99,  343,  343,  199,  343,  343,
      343,  343,  313,  343,  343,  174,  343,  343,  343,  343,

      182,  194,  231,  343,  232,  343,  100,   95,  343,  343,
      343,  200,  343,  226,  343,  225,  343,  343,  179,  343,
      177,  343,  176,  343,  343,  343,  343,  343,   34,  226,
      343,   33,  225,  343,  343,   31,  179,  343,   29,  177,
      343,   28,  176,  343,   38,   56,  343,16726,  343,16726,
      343,16726,  165,  343,16726, 8534,  343,16726,  343,16726,
       73,  199,  343,16726,  343,16726,  343,16726,  343,16726,
      313,  343,16726,  343,16726,  174,  343,16726,  343,16726,
      343,16726,  343,16726,  182,  194,  231,  343,16726,  232,
      343,16726,  343,16726,  343,16726,  343,16726,  200,  343,

    16726,  226,  343,16726,  225,  343,16726,  343,16726,  179,
      343,16726,  177,  343,16726,  176,  343,16726,  343,16725,
      343,16725,  343,16725,  165,  343,16725, 8533,  343,16725,
      343,16725,   73,  199,  343,16725,  343,16725,  343,16725,
      343,16725,  313,  343,16725,  343,16725,  174,  343,16725,
      343,16725,  343,16725,  343,16725,  182,  194,  231,  343,
    16725,  232,  343,16725,  343,16725,  343,16725,  343,16725,
      200,  343,16725,  226,  343,16725,  225,  343,16725,  343,
    16725,  179,  343,16725,  177,  343,16725,  176,  343,16725,
      343,  343,   11,  318,  319,  158,  343,  343,  343,  343,

      343,  343,  343,  197,  343,  343,  343,  343,  343,  343,
      343,  105,  134,  343,  343,    9,   23,  343,  343,  343,
       37,  197,  343,  343,   49,   45,   44,   42,   40,   39,
       60,  158,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  343,16726,  343,16726,   71,  197,  343,16726,
      343,16726,  343,16726,  343,16726,  343,16726,  343,16726,
      343,16726,  105,  134,  343,16726,  343,16726,  158,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,  343,
    16725,  343,16725,   71,  197,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,  105,

      134,  343,16725,  343,16725,  343,   76,  197,  343,  343,
      343,  343,  343,  343,  187,  343,  224,  343,  343,  343,
      204,  343,  343,  178,  343,    1,    9,   21,  343,  343,
       35,  187,  343,   30,  178,  343,   47,   49,   57,   54,
      343,16726,  343,16726,  343,16726,  343,16726,  343,16726,
       69,  187,  343,16726,  224,  343,16726,  343,16726,  343,
    16726,  204,  343,16726,  343,16726,  178,  343,16726,  343,
    16725,  343,16725,  343,16725,  343,16725,  343,16725,   69,
      187,  343,16725,  224,  343,16725,  343,16725,  343,16725,
      204,  343,16725,  343,16725,  178,  343,16725,   74,  187,

      343,  343,  160,  343,   18,  219,  343,  110,  133,  343,
      343,  343,  343,   96,  343,    1,  219,  343,  343,   47,
       41,  343,16726,  160,  343,16726, 8534, 8534,  219,  343,
    16726,  110,  133,  343,16726,  343,16726,  343,16726,  343,
    16726,  343,16726,  343,16725,  160,  343,16725, 8533, 8533,
      219,  343,16725,  110,  133,  343,16725,  343,16725,  343,
    16725,  343,16725,  343,16725,  159,  343,   18,  343,  343,
      201,  343,   16,  190,  343,  101,  343,  343,  190,  343,
      343,   59,  159,  343,16726, 8534,  343,16726,  343,16726,
       72,  201,  343,16726,  190,  343,16726,  343,16726,  343,

    16726,  159,  343,16725, 8533,  343,16725,  343,16725,   72,
      201,  343,16725,  190,  343,16725,  343,16725,  343,16725,
      343,  343,  343,   16,  343,  156,  343,  343,  343,16726,
      343,16726,  343,16726,  156,  343,16726,  343,16725,  343,
    16725,  343,16725,  156,  343,16725,  343,  343,  343,  343,
      343,  343,16726,  343,16726,  343,16726,  343,16725,  343,
    16725,  343,16725,  343,   77,  220,  343,  343,  155,  343,
       24,  343,   77,  220,  343,16726,  343,16726,  155,  343,
    16726,   77,  220,  343,16725,  343,16725,  155,  343,16725,
      343,  191,  343,   22,   36,  191,  343,   48,   58,   70,

      191,  343,16726,   70,  191,  343,16725,   75,  191,  343,
       48,    3,    9,    7,    8,    2,    9,    6,    8,    5,
       10,    4,   10
    } ;

static yyconst short int yy_accept[2879] =
    {   0,
        1,    3,    5,    5,    5,    5,    5,    7,    9,   11,
       13,   15,   17,   18,   19,   21,   23,   24,   25,   27,
       29,   31,   33,   35,   37,   39,   41,   42,   43,   43,
       43,   43,   43,   43,   43,   44,   45,   45,   45,   46,
       48,   51,   53,   55,   57,   61,   63,   65,   67,   69,
       72,   75,   78,   81,   83,   85,   87,   89,   91,   94,
       97,  100,  103,  106,  109,  112,  115,  118,  121,  124,
      127,  130,  133,  136,  139,  142,  145,  148,  151,  153,
      155,  157,  159,  161,  162,  164,  166,  169,  172,  175,
      178,  180,  183,  186,  189,  192,  195,  197,  200,  202,

      204,  206,  208,  210,  213,  215,  218,  220,  222,  224,
      226,  228,  230,  232,  234,  236,  239,  241,  245,  247,
      251,  255,  259,  263,  267,  271,  275,  279,  283,  287,
      291,  295,  299,  303,  307,  312,  317,  321,  325,  329,
      333,  337,  339,  343,  347,  351,  355,  359,  363,  367,
      371,  375,  379,  383,  387,  391,  395,  399,  403,  407,
      411,  415,  419,  422,  426,  430,  434,  438,  442,  446,
      449,  451,  453,  456,  458,  461,  463,  465,  467,  469,
      470,  472,  474,  476,  477,  477,  478,  478,  478,  478,
      478,  478,  478,  479,  480,  481,  482,  482,  483,  483,

      485,  487,  489,  491,  492,  492,  492,  494,  495,  496,
      497,  498,  499,  500,  500,  501,  502,  503,  505,  506,
      508,  509,  510,  512,  513,  514,  517,  518,  521,  522,
      523,  525,  526,  526,  527,  528,  529,  530,  532,  533,
      534,  535,  536,  537,  538,  539,  542,  544,  547,  548,
      548,  549,  550,  551,  552,  554,  555,  556,  557,  560,
      561,  562,  563,  564,  565,  566,  567,  568,  569,  570,
      571,  572,  573,  574,  574,  574,  574,  574,  574,  575,
      576,  576,  577,  578,  578,  579,  580,  581,  582,  583,
      584,  586,  587,  588,  588,  588,  588,  588,  588,  588,

      588,  590,  591,  592,  592,  592,  592,  592,  593,  593,
      593,  593,  593,  593,  593,  593,  594,  595,  596,  598,
      598,  598,  600,  600,  600,  602,  604,  606,  608,  611,
      611,  613,  616,  618,  621,  623,  625,  628,  630,  632,
      636,  638,  642,  644,  646,  649,  652,  654,  654,  656,
      658,  660,  662,  665,  668,  671,  674,  676,  679,  682,
      684,  686,  689,  691,  693,  695,  698,  700,  702,  706,
      709,  713,  715,  718,  721,  724,  724,  726,  729,  731,
      733,  736,  738,  740,  742,  744,  748,  750,  752,  754,
      756,  758,  760,  762,  764,  766,  768,  770,  772,  774,

      776,  778,  778,  778,  780,  780,  780,  782,  784,  786,
      789,  789,  791,  794,  796,  798,  800,  802,  806,  808,
      812,  814,  816,  819,  821,  821,  823,  825,  827,  829,
      832,  834,  836,  838,  840,  842,  844,  846,  850,  853,
      857,  859,  859,  861,  863,  865,  867,  869,  871,  873,
      877,  879,  881,  883,  885,  887,  889,  891,  893,  895,
      897,  899,  901,  903,  905,  907,  909,  911,  913,  915,
      917,  918,  918,  918,  918,  919,  920,  921,  922,  923,
      924,  924,  925,  925,  926,  926,  926,  927,  928,  928,
      928,  928,  929,  929,  929,  929,  929,  930,  930,  930,

      930,  931,  931,  931,  931,  932,  934,  934,  935,  935,
      936,  937,  938,  941,  943,  944,  945,  946,  947,  948,
      949,  950,  951,  952,  953,  954,  956,  957,  958,  959,
      961,  962,  963,  964,  966,  967,  968,  969,  972,  973,
      976,  977,  978,  979,  980,  982,  983,  984,  985,  986,
      987,  988,  989,  990,  991,  992,  995,  996,  997,  998,
      999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010,
     1011, 1014, 1014, 1014, 1014, 1014, 1015, 1015, 1016, 1017,
     1018, 1020, 1021, 1022, 1023, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1028, 1028, 1028, 1028, 1029, 1029, 1029,

     1029, 1029, 1029, 1029, 1029, 1030, 1030, 1031, 1033, 1036,
     1040, 1043, 1045, 1045, 1045, 1045, 1047, 1049, 1052, 1054,
     1057, 1059, 1061, 1063, 1066, 1068, 1070, 1072, 1074, 1077,
     1079, 1081, 1083, 1086, 1088, 1090, 1092, 1095, 1098, 1101,
     1103, 1105, 1107, 1111, 1114, 1116, 1120, 1122, 1125, 1127,
     1129, 1131, 1134, 1136, 1138, 1141, 1143, 1145, 1147, 1150,
     1152, 1155, 1157, 1159, 1161, 1165, 1167, 1169, 1171, 1173,
     1175, 1177, 1179, 1181, 1185, 1187, 1189, 1191, 1193, 1195,
     1199, 1199, 1200, 1202, 1206, 1209, 1211, 1211, 1211, 1211,
     1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227, 1229, 1231,

     1234, 1236, 1238, 1240, 1243, 1245, 1247, 1249, 1252, 1254,
     1256, 1258, 1262, 1264, 1268, 1270, 1272, 1274, 1276, 1279,
     1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299,
     1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319, 1323,
     1325, 1327, 1329, 1331, 1333, 1337, 1338, 1339, 1339, 1340,
     1340, 1340, 1340, 1341, 1341, 1341, 1342, 1342, 1344, 1344,
     1346, 1348, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1352,
     1353, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359,

     1360, 1360, 1361, 1361, 1362, 1362, 1363, 1365, 1367, 1369,
     1370, 1371, 1374, 1376, 1378, 1379, 1382, 1383, 1383, 1385,
     1386, 1387, 1389, 1390, 1391, 1393, 1394, 1395, 1395, 1397,
     1398, 1399, 1400, 1402, 1402, 1403, 1404, 1405, 1406, 1407,
     1409, 1411, 1412, 1413, 1415, 1417, 1420, 1421, 1423, 1425,
     1426, 1428, 1429, 1430, 1431, 1431, 1433, 1434, 1436, 1438,
     1439, 1439, 1439, 1439, 1439, 1439, 1440, 1441, 1442, 1443,
     1444, 1445, 1445, 1445, 1445, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1447, 1447, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1450, 1453, 1453, 1455, 1455,

     1455, 1458, 1461, 1464, 1467, 1469, 1471, 1475, 1478, 1481,
     1483, 1487, 1489, 1489, 1492, 1494, 1496, 1499, 1501, 1503,
     1506, 1509, 1511, 1513, 1513, 1516, 1518, 1520, 1522, 1525,
     1525, 1527, 1529, 1531, 1534, 1536, 1538, 1541, 1544, 1546,
     1548, 1551, 1554, 1558, 1560, 1563, 1566, 1568, 1571, 1573,
     1575, 1577, 1577, 1580, 1582, 1585, 1588, 1590, 1593, 1593,
     1593, 1595, 1595, 1597, 1597, 1597, 1600, 1603, 1606, 1608,
     1610, 1614, 1617, 1620, 1622, 1626, 1628, 1628, 1631, 1633,
     1635, 1638, 1640, 1642, 1645, 1647, 1649, 1649, 1652, 1654,
     1656, 1658, 1661, 1661, 1663, 1665, 1667, 1669, 1671, 1674,

     1677, 1679, 1681, 1684, 1687, 1691, 1693, 1696, 1699, 1701,
     1704, 1706, 1708, 1710, 1710, 1713, 1715, 1718, 1721, 1723,
     1723, 1724, 1724, 1724, 1725, 1726, 1727, 1728, 1728, 1728,
     1729, 1730, 1731, 1731, 1732, 1732, 1733, 1733, 1734, 1734,
     1735, 1735, 1736, 1736, 1736, 1736, 1736, 1737, 1738, 1738,
     1739, 1739, 1739, 1739, 1739, 1740, 1740, 1740, 1740, 1741,
     1741, 1741, 1741, 1741, 1743, 1744, 1744, 1745, 1746, 1747,
     1748, 1749, 1750, 1751, 1752, 1753, 1755, 1755, 1756, 1757,
     1757, 1759, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
     1769, 1770, 1771, 1772, 1774, 1775, 1776, 1778, 1780, 1781,

     1782, 1783, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
     1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1799,
     1800, 1802, 1804, 1806, 1808, 1809, 1810, 1811, 1812, 1813,
     1814, 1815, 1817, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
     1828, 1829, 1830, 1831, 1832, 1833, 1833, 1833, 1833, 1833,
     1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1834,
     1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1836, 1836,
     1836, 1836, 1836, 1838, 1840, 1842, 1844, 1846, 1848, 1850,
     1852, 1854, 1857, 1857, 1857, 1857, 1857, 1857, 1860, 1862,

     1864, 1864, 1867, 1870, 1872, 1874, 1876, 1878, 1880, 1882,
     1884, 1886, 1888, 1890, 1892, 1895, 1897, 1899, 1902, 1905,
     1908, 1910, 1912, 1914, 1914, 1916, 1918, 1920, 1922, 1925,
     1927, 1929, 1931, 1933, 1935, 1937, 1939, 1941, 1943, 1945,
     1947, 1949, 1949, 1951, 1954, 1957, 1960, 1963, 1965, 1967,
     1969, 1971, 1973, 1975, 1977, 1980, 1982, 1982, 1984, 1986,
     1988, 1990, 1992, 1994, 1996, 1998, 2000, 2003, 2003, 2003,
     2003, 2003, 2003, 2005, 2007, 2007, 2010, 2013, 2015, 2017,
     2019, 2021, 2023, 2025, 2027, 2029, 2031, 2033, 2035, 2038,
     2040, 2042, 2045, 2048, 2050, 2052, 2054, 2054, 2056, 2058,

     2060, 2062, 2064, 2066, 2068, 2070, 2072, 2074, 2076, 2078,
     2080, 2082, 2084, 2086, 2086, 2088, 2091, 2094, 2097, 2100,
     2102, 2104, 2106, 2108, 2110, 2112, 2114, 2117, 2119, 2120,
     2121, 2122, 2123, 2123, 2123, 2124, 2124, 2125, 2125, 2126,
     2127, 2127, 2127, 2127, 2127, 2127, 2127, 2129, 2129, 2129,
     2129, 2129, 2129, 2131, 2131, 2131, 2131, 2131, 2133, 2133,
     2133, 2133, 2133, 2133, 2135, 2135, 2135, 2135, 2135, 2137,
     2137, 2137, 2137, 2137, 2137, 2137, 2137, 2139, 2140, 2141,
     2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2150,
     2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2160,

     2161, 2162, 2163, 2164, 2165, 2166, 2167, 2169, 2170, 2171,
     2172, 2173, 2175, 2176, 2177, 2179, 2181, 2182, 2185, 2187,
     2188, 2189, 2190, 2191, 2193, 2194, 2195, 2196, 2197, 2198,
     2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2209,
     2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220,
     2221, 2221, 2221, 2221, 2221, 2221, 2221, 2222, 2223, 2224,
     2225, 2226, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235,
     2236, 2237, 2237, 2237, 2237, 2237, 2237, 2237, 2237, 2237,
     2237, 2237, 2237, 2238, 2239, 2239, 2239, 2239, 2239, 2239,
     2240, 2241, 2241, 2241, 2244, 2246, 2248, 2250, 2252, 2254,

     2256, 2258, 2260, 2262, 2262, 2262, 2263, 2263, 2265, 2267,
     2269, 2271, 2273, 2275, 2277, 2279, 2282, 2284, 2286, 2288,
     2290, 2292, 2294, 2296, 2299, 2301, 2303, 2305, 2307, 2310,
     2312, 2314, 2317, 2320, 2322, 2326, 2329, 2331, 2333, 2335,
     2337, 2340, 2342, 2344, 2346, 2348, 2350, 2352, 2354, 2356,
     2358, 2360, 2362, 2364, 2366, 2368, 2371, 2374, 2376, 2378,
     2380, 2382, 2384, 2386, 2388, 2390, 2392, 2394, 2397, 2399,
     2401, 2403, 2405, 2407, 2409, 2411, 2413, 2415, 2415, 2415,
     2416, 2416, 2418, 2420, 2422, 2424, 2426, 2428, 2430, 2432,
     2435, 2437, 2439, 2441, 2443, 2445, 2447, 2449, 2452, 2454,

     2456, 2458, 2460, 2463, 2465, 2467, 2470, 2473, 2475, 2479,
     2482, 2484, 2486, 2488, 2490, 2493, 2495, 2497, 2499, 2501,
     2503, 2505, 2507, 2509, 2511, 2513, 2515, 2517, 2519, 2521,
     2524, 2527, 2529, 2531, 2533, 2535, 2537, 2539, 2541, 2543,
     2545, 2547, 2548, 2549, 2550, 2550, 2551, 2552, 2553, 2553,
     2553, 2553, 2553, 2553, 2554, 2554, 2554, 2554, 2554, 2555,
     2555, 2555, 2555, 2555, 2555, 2557, 2557, 2557, 2559, 2560,
     2561, 2562, 2564, 2565, 2567, 2568, 2569, 2569, 2569, 2570,
     2571, 2572, 2573, 2574, 2575, 2577, 2578, 2579, 2580, 2581,
     2582, 2583, 2584, 2585, 2589, 2590, 2591, 2592, 2593, 2597,

     2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2607, 2608,
     2609, 2610, 2611, 2612, 2613, 2615, 2616, 2617, 2618, 2619,
     2620, 2621, 2622, 2623, 2624, 2625, 2626, 2626, 2627, 2628,
     2629, 2631, 2631, 2631, 2631, 2631, 2631, 2631, 2632, 2633,
     2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2644,
     2645, 2646, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2647, 2652, 2652, 2652, 2652, 2652,
     2652, 2652, 2652, 2655, 2657, 2659, 2661, 2664, 2666, 2669,
     2671, 2673, 2673, 2673, 2673, 2675, 2677, 2679, 2681, 2683,
     2685, 2688, 2690, 2692, 2694, 2696, 2698, 2700, 2702, 2704,

     2709, 2711, 2713, 2715, 2717, 2721, 2723, 2725, 2727, 2729,
     2731, 2733, 2735, 2737, 2740, 2742, 2744, 2746, 2748, 2750,
     2752, 2755, 2757, 2759, 2761, 2763, 2765, 2767, 2769, 2771,
     2773, 2775, 2777, 2777, 2779, 2781, 2783, 2786, 2789, 2791,
     2793, 2795, 2798, 2800, 2803, 2805, 2807, 2807, 2807, 2807,
     2809, 2811, 2813, 2815, 2817, 2819, 2822, 2824, 2826, 2828,
     2830, 2832, 2834, 2836, 2838, 2843, 2845, 2847, 2849, 2851,
     2855, 2857, 2859, 2861, 2863, 2865, 2867, 2869, 2871, 2874,
     2876, 2878, 2880, 2882, 2884, 2886, 2889, 2891, 2893, 2895,
     2897, 2899, 2901, 2903, 2905, 2907, 2909, 2911, 2911, 2913,

     2915, 2917, 2920, 2921, 2922, 2923, 2923, 2923, 2923, 2923,
     2923, 2925, 2925, 2925, 2925, 2925, 2925, 2927, 2927, 2927,
     2927, 2929, 2929, 2929, 2929, 2929, 2929, 2929, 2931, 2932,
     2933, 2934, 2936, 2937, 2937, 2937, 2938, 2940, 2941, 2942,
     2944, 2945, 2946, 2947, 2948, 2949, 2951, 2952, 2953, 2955,
     2956, 2959, 2959, 2960, 2961, 2962, 2963, 2965, 2967, 2969,
     2971, 2973, 2974, 2976, 2977, 2978, 2980, 2982, 2984, 2985,
     2987, 2988, 2989, 2991, 2991, 2992, 2993, 2994, 2995, 2996,
     2997, 2998, 2999, 3001, 3001, 3001, 3001, 3001, 3001, 3001,
     3002, 3004, 3006, 3008, 3009, 3010, 3011, 3012, 3013, 3014,

     3015, 3016, 3017, 3020, 3020, 3020, 3020, 3020, 3020, 3020,
     3020, 3020, 3020, 3020, 3020, 3020, 3020, 3020, 3020, 3020,
     3020, 3020, 3020, 3023, 3025, 3027, 3029, 3032, 3034, 3034,
     3034, 3036, 3039, 3041, 3043, 3046, 3048, 3050, 3052, 3054,
     3056, 3059, 3061, 3063, 3066, 3068, 3071, 3071, 3073, 3075,
     3077, 3080, 3083, 3086, 3089, 3092, 3094, 3097, 3099, 3101,
     3104, 3107, 3110, 3112, 3115, 3117, 3119, 3122, 3122, 3124,
     3126, 3128, 3130, 3132, 3134, 3136, 3138, 3141, 3144, 3146,
     3148, 3150, 3153, 3155, 3155, 3155, 3157, 3160, 3162, 3164,
     3167, 3169, 3171, 3173, 3175, 3177, 3180, 3182, 3184, 3187,

     3189, 3192, 3192, 3194, 3196, 3198, 3201, 3204, 3207, 3210,
     3213, 3215, 3218, 3220, 3222, 3225, 3228, 3231, 3233, 3236,
     3238, 3240, 3243, 3243, 3245, 3247, 3249, 3251, 3253, 3255,
     3257, 3259, 3262, 3263, 3264, 3266, 3266, 3266, 3266, 3267,
     3267, 3267, 3267, 3269, 3270, 3271, 3272, 3273, 3273, 3274,
     3275, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283,
     3285, 3286, 3286, 3287, 3288, 3290, 3291, 3291, 3291, 3293,
     3295, 3297, 3297, 3299, 3301, 3303, 3304, 3305, 3306, 3307,
     3308, 3309, 3310, 3312, 3313, 3313, 3313, 3313, 3313, 3313,
     3313, 3314, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321,

     3324, 3325, 3325, 3325, 3325, 3325, 3325, 3325, 3325, 3325,
     3325, 3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326,
     3326, 3328, 3330, 3332, 3334, 3334, 3334, 3334, 3334, 3336,
     3336, 3338, 3340, 3342, 3344, 3346, 3348, 3350, 3352, 3355,
     3355, 3357, 3359, 3362, 3364, 3364, 3367, 3370, 3373, 3373,
     3376, 3379, 3382, 3384, 3386, 3388, 3390, 3392, 3394, 3396,
     3399, 3401, 3403, 3405, 3407, 3409, 3409, 3409, 3409, 3409,
     3411, 3411, 3413, 3415, 3417, 3419, 3421, 3423, 3425, 3427,
     3430, 3430, 3432, 3434, 3437, 3439, 3439, 3442, 3445, 3448,
     3448, 3451, 3454, 3457, 3459, 3461, 3463, 3465, 3467, 3469,

     3471, 3474, 3476, 3477, 3478, 3478, 3478, 3478, 3480, 3480,
     3480, 3480, 3480, 3480, 3480, 3481, 3482, 3483, 3485, 3486,
     3487, 3488, 3490, 3491, 3492, 3493, 3495, 3496, 3498, 3499,
     3500, 3501, 3505, 3507, 3508, 3509, 3509, 3509, 3510, 3511,
     3512, 3514, 3516, 3518, 3519, 3521, 3523, 3525, 3525, 3525,
     3525, 3525, 3525, 3525, 3525, 3526, 3527, 3528, 3529, 3532,
     3535, 3536, 3539, 3542, 3545, 3545, 3545, 3545, 3545, 3545,
     3545, 3545, 3546, 3546, 3546, 3546, 3547, 3547, 3547, 3547,
     3547, 3547, 3547, 3549, 3551, 3553, 3556, 3556, 3557, 3557,
     3557, 3557, 3559, 3561, 3565, 3567, 3569, 3571, 3574, 3576,

     3579, 3581, 3583, 3585, 3590, 3593, 3595, 3597, 3599, 3602,
     3605, 3608, 3610, 3613, 3616, 3619, 3621, 3623, 3625, 3628,
     3628, 3629, 3629, 3629, 3629, 3631, 3633, 3637, 3639, 3641,
     3643, 3646, 3648, 3651, 3653, 3655, 3657, 3662, 3665, 3667,
     3669, 3671, 3674, 3677, 3680, 3682, 3685, 3688, 3691, 3692,
     3693, 3693, 3694, 3694, 3694, 3694, 3696, 3698, 3699, 3700,
     3701, 3702, 3703, 3704, 3706, 3707, 3708, 3709, 3710, 3710,
     3710, 3711, 3712, 3715, 3716, 3716, 3716, 3717, 3717, 3717,
     3717, 3717, 3718, 3719, 3720, 3721, 3724, 3725, 3725, 3726,
     3727, 3728, 3728, 3729, 3730, 3731, 3731, 3731, 3731, 3732,

     3732, 3732, 3732, 3732, 3735, 3737, 3739, 3739, 3739, 3739,
     3739, 3739, 3739, 3741, 3743, 3745, 3747, 3751, 3753, 3755,
     3757, 3759, 3761, 3763, 3767, 3769, 3772, 3774, 3776, 3776,
     3776, 3776, 3776, 3776, 3776, 3778, 3780, 3782, 3784, 3788,
     3790, 3792, 3794, 3796, 3798, 3800, 3804, 3806, 3807, 3810,
     3810, 3810, 3811, 3812, 3813, 3814, 3815, 3817, 3819, 3820,
     3821, 3823, 3823, 3823, 3824, 3824, 3826, 3826, 3828, 3828,
     3828, 3828, 3828, 3828, 3829, 3830, 3831, 3834, 3837, 3838,
     3839, 3839, 3839, 3839, 3840, 3840, 3841, 3841, 3841, 3843,
     3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845,

     3847, 3849, 3851, 3855, 3858, 3860, 3862, 3865, 3867, 3867,
     3870, 3872, 3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874,
     3874, 3874, 3876, 3878, 3880, 3884, 3887, 3889, 3891, 3894,
     3896, 3896, 3899, 3902, 3903, 3905, 3908, 3911, 3912, 3912,
     3913, 3914, 3914, 3915, 3915, 3916, 3916, 3917, 3917, 3917,
     3917, 3917, 3919, 3920, 3920, 3921, 3921, 3922, 3922, 3922,
     3922, 3922, 3922, 3922, 3924, 3927, 3927, 3928, 3928, 3928,
     3928, 3928, 3928, 3929, 3929, 3932, 3936, 3938, 3938, 3940,
     3942, 3942, 3944, 3946, 3949, 3949, 3950, 3950, 3950, 3950,
     3950, 3950, 3951, 3951, 3954, 3958, 3960, 3960, 3962, 3964,

     3964, 3966, 3966, 3968, 3969, 3970, 3971, 3973, 3976, 3977,
     3978, 3979, 3979, 3979, 3979, 3979, 3981, 3982, 3982, 3982,
     3982, 3982, 3983, 3983, 3983, 3986, 3986, 3987, 3987, 3987,
     3987, 3989, 3991, 3995, 3998, 4000, 4002, 4005, 4005, 4006,
     4006, 4006, 4006, 4008, 4010, 4014, 4017, 4019, 4021, 4022,
     4023, 4024, 4025, 4026, 4028, 4028, 4028, 4028, 4028, 4029,
     4029, 4029, 4029, 4029, 4029, 4029, 4031, 4033, 4035, 4038,
     4040, 4042, 4044, 4047, 4048, 4049, 4050, 4051, 4051, 4051,
     4051, 4051, 4052, 4052, 4052, 4052, 4052, 4052, 4052, 4054,
     4056, 4058, 4060, 4062, 4064, 4065, 4068, 4069, 4071, 4071,

     4071, 4072, 4072, 4073, 4073, 4073, 4073, 4073, 4073, 4073,
     4077, 4079, 4082, 4086, 4088, 4091, 4092, 4094, 4094, 4094,
     4095, 4098, 4099, 4099, 4099, 4100, 4100, 4100, 4104, 4108,
     4111, 4111, 4111, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
     4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
     4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
     4112, 4112, 4112, 4114, 4114, 4114, 4114, 4116, 4118, 4118,
     4118, 4120, 4120, 4120, 4120, 4122, 4124, 4124
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,    5,   15,   16,    5,   17,   18,   19,
       20,   21,   21,   22,   23,   24,   25,   26,    5,   27,
       28,   29,    5,    5,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
        5,    5,    5,    5,   30,    5,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,    5,   58,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[59] =
    {   0,
        1,    2,    3,    4,    5,    6,    5,    7,    5,    5,
        8,    4,    5,    9,   10,   11,   12,   12,   12,   12,
       12,   12,   12,   12,   12,    5,    5,    4,    5,   13,
       14,   15,   14,   16,   17,   14,   18,   19,   18,   18,
       18,   20,   21,   22,   18,   22,   18,   22,   23,   22,
       18,   18,   24,   24,   18,   18,    4,    5
    } ;

static yyconst short int yy_base[3108] =
    {   0,
        0,    0,   47,   48,   83,    0,  109,  110,  111,  115,
      138,  142,  177,  189,  150,  169,  245,  301,  358,    0,
      387,    0,  173,  181,  412,  437,  218,  233,  492,  520,
       58,   59,12663,12662,12712,12711,   60,   61,12716,12721,
       72,   75,  192,  213,12721,  217,12701,12700,12697,  257,
      292,   58,  175,12684,   40,12682,12682,    0,  244,  188,
      214,  294,  228,  445,12679,  232,  290,  210,  266,  419,
      122,  123,  458,  517,  438,  301,  519,  220,  471,12721,
    12694,12663,12721,12721,12692,    0,12675,  420,  522,  139,
      468,  253,  183,  530,  477,  544,12721,  348,  353,12690,

    12659,12334,  542,  541,12721,  530,12350,12335,12331,  105,
    12316,  217,12325,12321,  544,  161,12721,12262,    0,  601,
      582,  657,  708,  599,  577,  621,  575,  631,  647,  755,
      652,  675,  685,  729,  762,  662,  809,  775,  701,  706,
      742,    0,  863,  919,  254,  791,  783,  740,  187,  787,
      543,  273,  402,  824,  542,  429,  629,  609,  839,  587,
      859,  407,  791,12256,  730,  804,  869,  277,  885,  470,
    12721,12721,12721,  896,12721,12721,12721,12290,12290,12295,
        0,12721,  848,  720,  796,12721,  894,  850,  914,  874,
      884,  942,12721,12721,12721,12721,    0,12279,    0,  940,

      976,  990,12270,  513,  193,  960,12721,12721,12721,12721,
    12721,12265,12264,12263,  516,  899,  506,12262,  591,  574,
      237,  132,12721,  675,  769,12261,  280,12260,  593,  840,
      704,  462,  286,  521,  647,  873,  799,12259,  902,  833,
      318,  880,  289,  921,  551,12254,12252,12251,  930,  737,
      986,  468,  925,  989,12721,  913,  841,  688,  871,  972,
      943,  735,  961,  736,  988,  933,  995,  991, 1001,  996,
      997,  998,  999,12222,  927,  994,  997,12221,12721,12721,
    12244,12247,12246,12146, 1012, 1014, 1004, 1020, 1021, 1023,
     1027, 1032, 1061,12141,12126,12115, 1015, 1024,12114,12119,

     1041, 1074,12721,12121,12131,12125,12115,12721,12123, 1033,
    12122,12102, 1030, 1037,12101,12721, 1083,12721, 1058, 1089,
    12140, 1063,12123, 1094, 1068, 1081, 1094, 1096, 1119,  557,
     1121, 1123, 1144, 1145, 1157, 1169, 1170, 1185, 1195, 1200,
     1218, 1223, 1225, 1230, 1246, 1251, 1253, 1297, 1269, 1288,
     1284, 1300, 1307, 1319, 1326, 1328, 1338, 1348, 1360, 1364,
     1379, 1386, 1391, 1398, 1410, 1414, 1426, 1433, 1438, 1448,
     1460, 1461, 1476, 1483, 1488,12116, 1509, 1519, 1085, 1531,
     1534, 1540, 1131, 1557, 1565, 1568, 1578, 1585, 1591, 1602,
     1608, 1614, 1630, 1636, 1642, 1658, 1664, 1670, 1681, 1690,

     1029, 1720,12136, 1088,12120, 1731, 1173, 1103, 1137, 1114,
     1126, 1152, 1188, 1261, 1268, 1228, 1311, 1177, 1330, 1203,
     1262, 1352, 1453, 1408,12113, 1471, 1292, 1341, 1441, 1371,
     1492, 1491, 1550, 1493, 1549, 1697, 1620, 1511, 1573, 1581,
     1587,12112, 1718, 1632, 1654, 1648, 1604, 1670, 1701, 1717,
     1724, 1725, 1721, 1737, 1739, 1740, 1744, 1748, 1752, 1759,
     1755, 1761, 1763, 1767, 1126,12116,12112,12111,12110,12109,
     1373,    0, 1795,    0,12721,12721,12089,12721,12721,12721,
    12098,    0, 1817,12721,    0, 1820,12721, 1859,    0,    0,
     1824, 1807, 1874, 1829, 1830, 1844, 1848, 1908, 1888, 1870,

     1941, 1951, 1922, 1871, 1984,12721, 1278,    0,    0, 1370,
     1965, 1081,12106,12101, 1175, 1220, 1236, 1313, 1787, 1404,
     1194, 1479, 1298, 1804,12099,12098, 1408, 1256, 1275,12097,
      698, 1074, 1416,12096, 1424, 1179, 1493,12095,12094,12093,
     1393,  781, 1467, 1490,12089, 1514, 1329, 1885, 1522, 1567,
     1195, 1735,  670, 1535, 1715,12087, 1626, 1723, 1838, 1757,
     1707, 1827, 1561, 1828,12085, 1914, 1420, 1389, 1915, 1595,
    12084, 1844, 1653, 1442,12055,12054,12081, 1961, 1641, 1451,
     1920, 1840, 1962,12077,12075,12074, 2011, 1791, 1879,12045,
     1895,12071,12071,12065,12069,12044,12721,12042,12056,12039,

    12047, 1931, 1959,12030,12029,12072,12721, 2014, 2017, 2018,
     2021, 2052,12004,11916, 2048, 2057, 2061, 2082, 2091, 2104,
     2121, 2125, 2126, 2138, 2160, 2161, 2173, 2195, 2198, 2209,
     2212, 2232, 2245, 2249, 2252, 2246, 2282, 2286, 2293, 2316,
     2323, 2328, 2329, 2359, 2360, 2363, 2366, 2397, 2398, 2402,
     2403, 2436, 2437, 2440, 2496, 2004, 2007, 2046, 2037, 2153,
     2069, 2260, 2080, 2136, 2212, 2425, 2291, 2346, 2430, 2440,
     2444, 2453, 2468, 2472, 2480, 2497, 2484, 2487, 2501, 2510,
    11959,12721, 2553, 2556, 2560, 2567,11914,11913, 2573, 2603,
     2616, 2635, 2691, 1886, 2086, 1093, 2110, 2501, 2068, 1962,

     2144, 2186, 2170, 2229, 2264, 2234, 2298, 2268, 2333, 2398,
     2497, 2300, 2362, 2447, 2531, 2563, 2553, 2580, 2591, 2599,
     2587, 2560, 2606, 2607, 2613, 2625, 2617, 2631, 2633, 2635,
     2641, 2651, 2653, 2647, 2661, 2663, 2665, 2669, 2679, 2686,
     2681, 2688, 2695, 2697, 2689,11940, 1948, 2709,12721,11925,
        0,    0, 2742,    0, 2221, 2739,    0,11938,11864,11848,
     1947,11847,    0, 2773, 2738, 2783, 2782, 2126, 2806, 1994,
    11846,    0, 1786, 2820, 2761,    0, 2830, 2844, 2840, 2841,
     2874, 2870, 2871, 2872,    0, 2908, 2888, 2906, 2918,11826,
    11844, 2923, 2926, 2928,    0, 2842,    0,11824,11841, 2724,

     1711, 2961, 2975, 2036, 2969,  436, 1187,11729,11727, 1997,
     1904,11726,11725,11724, 1998,11723, 2071, 2989,11722, 2144,
     2037,11721, 2432, 2269,11717, 2382, 2238, 2185,11716, 2307,
     2168,11715,11714, 2457, 2388,  823, 2299, 2365, 3013,11713,
    11712, 2330, 2001,11711,11706,11704, 2354,11703,11702, 2459,
    11701, 2544, 2536, 2622, 3037,11700, 2117,11699,11698, 2486,
     2388, 2420,  929,11666, 2904, 2512, 2648, 2578, 2686, 2702,
     2741, 1910, 3038, 2195,12721, 3058, 2422, 1566,11664, 2448,
    11673,11668,12721, 2980,12721,11680,11687,11669,11681, 2623,
     2717,11654,11696, 2590, 3003, 3082, 3138, 3088,11651, 3094,

     3097, 3103, 3134, 3155, 3172, 3186, 3192, 3195, 3226, 3229,
     3230, 3243, 3270, 3260, 3322, 3264, 3323, 3326, 3327, 3358,
     3359, 3363, 3370, 3395, 3406, 3407, 3410, 3429, 3442, 2658,
     3446, 3467, 3476, 3479, 3480, 3536, 3515, 3537, 3551, 3586,
     3595, 3598, 3599, 3618, 3629, 3630, 3633, 3664, 3667, 3668,
     3699, 3683, 3711, 3730, 3733, 3734, 3755, 3767,11694, 2771,
     3770, 3826, 3807,11649, 3548, 3774, 3814, 3864, 3875, 3878,
     3895, 3908, 3914, 3927, 3944, 3947, 3974, 3964, 4026, 3984,
     4030, 4041, 4045, 4062, 4076, 4093, 4108, 4112, 4127, 4142,
     4159, 4164, 2703, 4178, 4198, 4201, 4215, 4271, 4220, 4234,

     4286, 4305, 4266, 4337, 4342, 4348, 4354, 4384, 4388, 4405,
     4418, 4422, 4453, 4439, 4488, 4492, 4495, 4509, 4526, 2740,
     2784, 3016,    0,12721,12721,11657,12721,11672,    0, 4567,
     4581, 4595, 3197,    0,    0,11674, 2957,    0, 3098,    0,
     2946,    0, 2916, 4610, 3328, 3235, 4643,12721,    0,11669,
     2980, 4653, 3829, 3471, 4686,    0, 2991, 3105,    0,    0,
     2790, 3128,    0,12721,11667,11666, 2413, 2779, 2845, 2836,
     2791, 2837, 2852, 2780, 2913,11665, 3257, 2315, 2880, 2886,
    11664,11663, 2955, 3089, 3006, 2905, 2829, 2917, 2940, 3162,
     3048, 1873, 2979,11662, 3014, 3050,11661,11657, 2997, 3093,

     3102, 2915, 2789, 3099, 3131, 3125, 3145, 3163, 3463, 3171,
     3412, 3189, 3019, 3072, 3670, 3135, 3126, 3176, 3237, 3209,
    11655,11653,11652,11651, 3220, 3240,  209, 2839, 3247, 3259,
     3302,11650, 3251, 2229, 3283, 2944,11621,11630,11622,11624,
     3207, 3303, 3266, 3338, 3334, 3366, 3394, 3173, 3278, 3347,
     3282, 3339, 3373, 3355, 3391,11620,11622,11636,11623,11613,
    11620,11616,11607,11622, 3398, 3336,11598, 2916,12721, 3313,
    11622,11603,11582,11497,11513,11493,11498,12721, 3417, 3371,
    11483, 3941, 4551, 4539, 4685, 4689, 4710, 4184, 4721, 4722,
     4725, 4756,11482, 4457, 3447,  501, 3432, 4757, 4761, 4762,

     4792, 4797, 4798, 4803, 4828, 4833, 4839, 4840, 4870, 4879,
     4890, 4891, 4902, 4911, 4922, 4952, 4953, 4958, 4959, 4965,
     4990, 4996, 5001, 3481, 5026, 5031, 5037, 5038, 5068, 5072,
     5075, 5131, 3530, 3565, 3753, 3783, 3950, 4605, 4194, 4324,
     4050, 3480, 4203, 4226, 4401, 4427, 4509, 4511, 4826, 5058,
     5068, 5078, 5088, 5105, 5084, 5121, 4425, 5145, 5164, 5220,
     3431, 3500, 3095, 3511, 3174, 3523, 3397,11481, 5183, 3471,
     2621, 3464, 3616, 3465, 5197, 3586, 3605, 3658, 3619, 3980,
     3642, 3695, 3650, 3716, 3854, 3653, 3717, 3671, 3709, 3865,
     3719, 3758, 3770, 3790, 3808, 3810, 3888, 4005, 3822, 3853,

     3929, 3947, 4338, 5181, 4024, 4350, 3820, 3923, 4537, 4607,
     4041, 3962, 4078, 3526, 4112, 3860, 4004, 4091, 4106, 4160,
     4129, 4176, 4117, 4236, 4251, 4118, 4142, 4262, 4016, 3250,
     3517,12721,11432, 3916, 5261,    0, 5275,    0, 5289,11443,
    11442,    0, 3516, 4288, 4299, 4393,11441,    0, 5304, 4955,
     4594, 4974, 5337, 5134, 4698, 4304, 4528, 3750,    0, 5371,
     5187, 5203, 5213,11440, 5214, 4649, 4651, 4713,11439,    0,
     4489,    0,11419, 4804, 3619, 3777,11436, 3562, 3594, 3561,
     3547, 3802, 3856, 4064, 3608, 4022,12721,12721,11269,11251,
     3745, 3972, 4007, 3940, 3885, 4055, 4087, 4153,11268, 3423,

     4414, 4371, 3677, 3933, 4236, 3635,11267, 3778, 4270, 4032,
     4155,11266, 4251, 4365,11265,11264, 3907,11259,11257, 4063,
     4128, 4329, 4281,11256, 4441, 4417, 4458, 3950, 4463, 4221,
     4487, 4372, 4302, 4095, 4503, 4341, 4496, 4476,11255,11254,
     3669, 4530, 4540, 4563, 4544, 4650, 4702, 4747, 4579, 4224,
     4234, 4753, 3805,11239,11238,11236, 3783, 4654, 4740, 4229,
     4758,11247, 4691, 4700, 4615, 4773, 4816, 4776, 4818, 4878,
     4786,11231,11229,11240,11228,11221,11225, 4871,11219,11222,
     4891, 4499,11205, 4832,11211,11216,11214,11227,11215,12721,
    12721, 4893, 4852, 5340, 5372, 5403, 5404, 5407, 5426, 5437,

     5443, 5468, 5473,11195, 4766,11194,11193, 5477, 5480, 5510,
     5511, 5514, 5515, 5545, 5546, 5558, 5577, 5580, 5583, 5597,
     5602, 5634, 5637, 5640, 5641, 5671, 5675, 5676, 5688, 5708,
     5719, 5725, 5738, 5742, 5757, 5776, 5777, 5782, 5788, 5799,
     5819, 5824, 5838, 5849, 5855, 5868, 5861, 5898, 5903, 5907,
     5920, 5941, 5945, 5950, 5964, 5989, 6001, 6002, 6006, 6021,
     6038, 6041, 6058, 6053, 6072, 6102, 6105, 6109, 6122, 6145,
     6152, 6166, 6185, 6202, 6208, 6215, 6222,11192, 4885,11191,
    11190, 6245, 6259, 6264, 6279, 6302, 6316, 6322, 6336, 6353,
     6359, 6415, 5212, 4965, 4636, 5014, 5006, 4840, 5133, 5002,

     5096, 5147, 4988, 5029, 5044, 5055, 5105, 5123, 5164, 5169,
     5190, 5218, 5220, 5227, 5196, 5286, 5287, 5294, 5255, 5300,
     5317, 5329, 5334, 5269, 5226, 5377, 5333, 5364, 5402, 5378,
     5394, 5442, 5413, 5460, 5487, 5506, 5520, 5534, 5548, 5486,
     5420, 4881, 4886, 4928,11196, 6456, 6470, 6484, 4923, 5355,
     6499, 6280, 5617, 6532, 5692, 5713, 5369, 5642,    0, 5659,
     5666, 4969, 5828,    0,12721, 5728, 5753,11212, 4622, 4967,
     4989,11210, 4977,11209, 4285, 5300,11196,11186, 5016, 5056,
     4334, 5311, 4709, 4374,11206, 5457, 4907, 4741, 5208, 5168,
     5395, 5244, 5334,11205, 4808, 5272,11204, 4620, 5979, 5027,

     5465, 5467, 5084, 5516, 5561, 5321, 5587,11199, 5570, 5547,
     5626, 5207, 5631, 5586,11197, 5414, 5684, 5663, 5730, 4409,
    11196, 5481, 5589, 5161, 5620, 4591, 5681, 5633, 5335, 5718,
    11195, 4043, 5762, 5735,11188,11190,11185, 5743, 5811,11191,
     5783, 5805, 5845, 5687, 5789, 5621, 5852, 4656, 5785, 5869,
     5816, 5818,11183,11177,11177,11175,11175,11177,11163,11132,
    11130,11127, 5839, 5759,11141,11130,11135,11129,11121,11071,
     5859, 5880, 6372, 6373, 6384, 6403, 6409, 6440, 6455, 6531,
     6532, 5872, 5983, 5900, 6535, 6565, 6566, 6578, 6597, 6600,
     6601, 6612, 6635, 6647, 6648, 6669, 6682, 6683, 6686, 6716,

     6720, 6751, 6752, 6755, 6764, 6785, 6786, 6789, 6798, 6829,
     6832, 6833, 6846, 6867, 6868, 6880, 6900, 6889, 6911, 6930,
     6941, 6947, 6950, 6962, 6981, 6982, 6993, 7016, 7028, 7029,
     7041, 7050, 7075, 7062, 7087, 7100, 7106, 5855, 5921, 5890,
     6018, 5941, 5978, 5998, 6031, 6048, 5907, 6105, 5930, 6044,
     6094, 6074, 6092, 6125, 6195, 6026, 6144, 6191, 6239, 6209,
     6112, 6135, 6323, 6296, 6207, 6244, 6346, 6348, 6360, 6231,
     6386, 6401, 6416, 6407, 6464, 6492, 6376, 6482, 6266, 6526,
     6535, 6572, 6592, 6561, 6618, 6409, 6657, 6685, 6692, 6703,
     6634, 6712, 6726, 6725, 6597, 6783, 6774, 7119, 6803, 6750,

     6758, 6807, 6835, 5886, 5931,11066, 5897, 5985, 6173, 6292,
     5387,    0,    0,    0, 6857, 6999,11069, 7045, 6515, 6659,
    11068,    0, 6920,    0,11048, 5996, 6005,11066, 5061, 5873,
     5933,11065, 6121,10957,10970, 5778,10974,10973, 6007,10972,
     5981, 5949, 6098, 6161, 5944,10971, 6845, 6319,10970, 6066,
     7122, 6433, 6097, 6583, 6153, 6055,10968, 6146,10778,10777,
    10776, 6199,10775, 6281, 6230,10774,10773,10767, 6283,10765,
     6287, 6297,10762, 6324, 6239, 6549, 6168, 6137, 6368, 6418,
     6404, 6481,10761, 6539, 6378, 6438,10751,10734,10734, 6495,
    10749,10748,10747, 6679, 6390, 6625, 6631, 6596, 6739, 6649,

     6687, 6700,10746,10721,10721,10718,10725,10715,10687,10660,
    10658,10655, 6918, 6687, 6745,10659,10653,10653,10651,10587,
     6780, 6772, 7125, 7138, 7139, 7158, 7171, 7175, 7190, 7196,
     7205, 7209, 7210, 7240, 7247, 7252, 7253, 7259, 7284, 7272,
     7309, 7315, 7316, 7322, 7328, 7347, 6617, 7358, 7372, 7378,
     7379, 7391, 7410, 7414, 7421, 7435, 7452, 7456, 7471, 7491,
     7492, 7504, 7513, 7525, 7534, 7538, 7555, 1529, 7569, 7574,
     7588, 7594, 7605, 7609, 7575, 7626, 7645, 6839, 6921, 6898,
     6933, 6880, 6978, 7666, 7677, 6950, 6889, 7021, 6968, 6988,
     7099, 7047, 7035, 7185, 7060, 7110, 7132, 7112, 7174, 7223,

     7197, 6674, 7259, 7244, 7180, 7246, 7287, 7276, 7308, 7315,
     7371, 7322, 7350, 7397, 7364, 7404, 7442, 7461, 7406, 7594,
     7609, 7413, 2548, 7618, 7428, 7451, 7526, 7430, 7484, 7636,
     7505, 7477, 6877, 6677,10605,10599, 6959, 7515,10603, 6958,
     7618, 7658,12721, 6879, 7005, 6926, 7154,10597,12721, 7195,
     7305, 7070, 7357, 7141, 7248, 7317, 6851, 7339, 7211,10601,
     7693, 5257, 7494, 7550,10600, 7271, 7654, 7589,10511,10510,
    10509, 6821,10508,10507,10506, 7622, 7571, 7086, 7404, 7654,
     7030, 7539,10505, 7657, 7706, 6789, 7127,10496,10248,10253,
     7663, 7174, 7427, 7669, 7381, 7681, 7662, 7472, 7685,10253,

     7686,10243,10250,10231,10236,10225,10224,10210, 7717,10208,
    12721, 7320, 7215,10211,10215,10222,10213,10197, 7412, 7494,
     7725, 7726, 7729, 7738, 7759,10231, 6926, 7689, 7772, 7515,
     7776, 7787, 7806, 7807, 7819, 7838, 7844, 7849, 7850, 7694,
     7853, 7885, 7888, 7900, 7713, 7919, 7920, 7932,10198, 7939,
     7951, 7952, 7971, 7982, 7983, 7986, 8003, 8023, 8018, 8054,
     8055, 7716, 7699, 7744, 7821, 8059,10197, 7125, 7755, 7859,
     7596, 7752, 7836, 7919, 7865, 7954, 7779, 7988, 8003, 7668,
     7740, 7995, 7975, 7676, 7891, 7736, 7703, 7871, 7925,10143,
     8023, 8028, 8030, 8047, 8042, 8043, 8053, 8051, 8052, 8057,

     8064, 8068, 7775, 7829, 8117, 7903, 7929,10130,    0, 8092,
     8099,10091, 7796, 7800, 7159, 7747, 6996, 9983,12721, 7802,
     7845, 9981, 7578, 7620, 7895, 9975, 8094, 9973, 7841, 7897,
     7863, 9967, 9965,12721,12721, 9947, 9925, 7962, 6510, 7457,
     9917, 9910, 9908, 7987, 9885, 9864, 9849, 8128, 4443, 8080,
     8070, 9820, 9813, 9741, 7931, 8103, 7762, 8096, 9704, 9701,
     8024, 9699, 9697, 9693, 9436, 9434, 8144, 8147, 9442, 8150,
     8153,12721, 8156, 8116, 8106,12721, 9415, 9359, 9334, 9316,
     8117, 8107, 8164, 8165, 8169, 8176, 8123, 9320, 8129, 8169,
     8149, 8201, 8206, 8207, 8226, 8237, 8248, 8257, 8268, 8269,

     8288, 8291, 8300, 8311, 8325, 8330, 8342, 8347, 8361, 8367,
     8381, 8382, 8386, 8403, 8417, 8168, 8197, 8202, 8240, 8171,
     9252, 8158, 8210, 8186, 8271, 8301, 8260, 8315, 8262, 8357,
     8371, 8395, 8376, 8377, 8388, 8400, 8402, 8404, 8408, 8419,
     8412, 8410, 8417, 8423, 8431, 8424, 8429, 8430, 8212, 8182,
     8479,12721, 8232, 8468, 8470,12721, 9170, 8159, 7451, 8322,
     8236, 8332, 8006, 9148, 8161, 8140, 8351, 5970, 9119, 9072,
     7963, 9075, 9023, 8294, 8023, 8485, 8997, 8374, 7366, 8907,
     8878,12721, 8460, 8461, 8244, 8859, 8301, 8622, 8490,12721,
    12721, 8618,12721,12721,12721, 8406, 8197, 8564,12721, 8470,

     8396, 8437, 8461, 8495, 8500, 8506, 8387, 8525, 8520, 8378,
     8501, 8542, 8556, 8560, 8563, 8577, 8594, 8600, 8614, 8634,
     8635, 8646, 8657, 8666, 8671, 8471, 8520, 8492, 8342, 8703,
     8706, 8487, 8536, 8718, 8644, 8606, 8525, 8583, 8534, 8649,
     8546, 8680, 8594, 8670, 8694, 8651, 8693, 8491, 8254, 8473,
     8512, 8567, 8579, 8503, 8637, 8681, 8171, 8114, 8531, 8703,
     8079, 8021, 8029, 7773, 8589, 7702, 8745,12721, 7670, 8748,
     8552, 8318, 7579, 7563, 8601, 8708, 7517, 7488, 8751, 8754,
     8763, 8598, 8733, 7459, 7387,12721, 8619, 8740, 8757, 8766,
     8780, 8713, 3027, 8715, 8798, 8805, 8731, 8766, 8763, 8823,

     8830, 8842, 8862, 8867, 8873, 8874, 8904, 8908, 8909, 8921,
     8767, 8744, 8942, 8760, 4517, 8754, 8955, 8960, 8772, 8869,
     8783, 8799, 8801, 8904, 8922, 8782, 8930, 8835, 8803, 8943,
     9017, 8842, 7071, 7936, 7006, 8978, 6973, 7869, 8656, 8852,
     5582, 6842,12721, 8652, 8863, 8938,12721, 8857, 8725, 6789,
     6779, 6666, 6875, 8827, 8982, 6624,12721, 8943, 8868, 6559,
     6454, 8944, 8919, 9002, 9003, 8976, 6366, 9024, 8977, 5095,
     8871, 8980, 8981, 8983, 9042, 9063, 9067, 8977, 9074, 9086,
     8591, 9107, 8994, 8868, 8984, 6237, 9130, 9010, 6590, 8965,
     9042, 9034, 9036, 9012, 9031, 9057, 8993, 9064, 9080, 8754,

     9099, 9032, 6248, 9081, 8870, 9059, 6191, 9137,12721, 8930,
     9057, 8979, 8764, 6160, 6074, 5921, 9114, 5892, 9078, 8952,
     5795,12721, 9088, 9038, 9145, 9108, 5740, 9114, 9148, 9137,
     9151, 9181, 9182, 9187, 9212, 9217, 9119, 9140, 5699, 9145,
     9229, 9155, 9131, 9155, 9125, 9176, 9181, 9200, 9206, 9162,
     9205, 9250, 9228, 5665, 9202, 9138, 5508, 5423, 9231, 5272,
     9221, 9215, 5214, 9227, 9219, 9263, 9266, 9286, 9297, 9235,
     9257, 9246, 9251, 9274, 9277, 9280, 9282, 9274, 9247, 5182,
     5147, 9298, 5130, 9278, 9280, 4968, 9282, 9289, 9333, 9337,
     9344, 9306, 9311, 9327, 9300, 4912, 7301, 4882, 9323, 6031,

    12721, 4836, 9312, 4740, 9324, 6295, 4677, 9329, 8781, 9376,
     9381, 9387, 9320, 9351, 9322, 9345, 4660, 9170, 4478,12721,
     4443, 9410, 9347, 4781,12721, 9350, 7037, 9417, 9361, 4345,
     9365, 3211, 9422, 9372, 9176, 9385, 9370, 9377, 9225, 9381,
     9379, 9382, 9395, 9397, 9396, 9403, 9401, 9409, 9404, 9405,
     9407, 9411, 9408, 9412, 9414, 9420, 4268, 9424, 4229, 9427,
     4162, 4074,12721, 3855, 3821, 3712,12721,12721, 3701, 3651,
    12721, 3499, 3450, 3347,12721,12721,12721, 9485, 9509, 9533,
     9557, 9581, 9605, 9629, 9653, 9674, 9695, 9709, 9721, 9734,
     9758, 9771, 9784, 9808, 9832, 9845, 9868, 9881, 9904, 9918,

     9941, 9960, 9974, 9992, 3328, 3141, 9463, 9467,10014,10038,
    10062,10086,10110, 3101, 3012,10134,10147,10161,10185, 2900,
    10198,10212,10225, 2805,10238,10251,10264, 2775,10274,10291,
    10315,10339,10363,10387,10411,10435,10459,10483,10507,10530,
    10554,10578,10602,10625,10649,10673,10686,10698, 2758,10715,
     2724,10736,10749, 2613, 9471, 9714, 9861, 9956, 9863, 2532,
     2498, 2438,10762, 2410,10775, 9865, 2303,10788, 2226,10798,
    10804,10828,10852,10876,10900,10924,10948,10972,10995,11019,
    11043,11067,11090,11114,11138,11151, 2167,11163,11180,11194,
     2129, 2078, 9897,11207, 1967,11220, 1857,11233, 1815,11243,

     1678,11255, 1643,11267,11280, 1517, 1439, 9972, 1392,11290,
    11296,11320,11344,11368,11392,11416,11440,11463,11487,11511,
    11534,11558,11582,11603,11627, 1361,   69, 9899,  333,11640,
     9901,  580,11653,11665,11677, 9958,  658,11690, 9920,11702,
    11714, 9923,  742,11727,  897,11737, 9975,11749,11773,11797,
    11821,11845,11868,11892,11916,11940,11963,11987,12011,12035,
    12059, 9989,12072,12085,12097,12109,12122,  925,12132,10244,
    12145,  992,10255, 1078, 9979,10227, 1128,12156, 1243,10258,
    12177,12201,12225,12249,12262,12275,10768,12286,12307,12331,
     1277,12345,12366,12390,12414,12438,12462,10781,12486,12510,

    12534,12558,12582,12606,12630,12654,12678
    } ;

static yyconst short int yy_def[3108] =
    {   0,
     2877,    1, 2878, 2878, 2877,    5,    1,    1,    1,    1,
        1,    1, 2879, 2879,    1,    1, 2880, 2880, 2877,   19,
        1,   21,    1,    1,    1,    1,    1,    1, 2881, 2881,
     2882, 2882, 2883, 2883, 2884, 2884, 2885, 2885, 2877, 2877,
     2877, 2877, 2886, 2877, 2877, 2887, 2877, 2877, 2877, 2888,
     2888,   51,   51, 2877, 2877, 2877, 2877, 2889, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2891, 2877,
     2877, 2877, 2877, 2877, 2877, 2892, 2893, 2890, 2890, 2890,
     2891, 2890, 2890, 2890, 2890, 2890, 2877, 2877, 2877, 2877,

     2877, 2877, 2894, 2890, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2895, 2877, 2877, 2877, 2896, 2897,
     2897, 2897,  122,  122,  122,  122,  122,  122,  122,  123,
      122,  122,  122,  130,  130,  122,  123,  122,  122,  122,
      122, 2898, 2899, 2899,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144, 2890,   62, 2890, 2890, 2890, 2890, 2890, 2890,
     2877, 2877, 2877, 2900, 2877, 2877, 2877, 2877, 2877, 2877,
     2901, 2877, 2877, 2877, 2886, 2877, 2902, 2886, 2903, 2887,
     2887, 2904, 2877, 2877, 2877, 2877, 2905,   51, 2906, 2907,

     2877, 2877, 2908,   51, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2877, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2877, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2891, 2891, 2891, 2891, 2909, 2877, 2877,
     2877, 2893, 2893, 2893, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2877, 2877, 2877, 2894, 2894, 2894, 2910, 2877,

     2890, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2895, 2895, 2895, 2911, 2877, 2877, 2877,  122, 2877,
     2877,  122, 2877, 2897,  122,  122,  122,  122,  122, 2912,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122, 2897,  122,  122,
      122,  122,  122,  122,  122,  130,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  348,  122,  122,  377,  377,
      130,  377,  377,  377,  377,  122,  122,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,

      144, 2877, 2877,  144, 2877, 2899,  144,  144,  144,  144,
     2913,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  406,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  406,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2914, 2900, 2915, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2916, 2877, 2877, 2917, 2918, 2877, 2919, 2920, 2921,
     2922, 2923, 2877,  493,  494,  495, 2924, 2877,  498, 2925,

     2877, 2877,  502, 2926, 2877, 2877, 2927, 2928, 2929, 2877,
     2877, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890,
     2890, 2930, 2930, 2930, 2931, 2932, 2877, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2877, 2877, 2933, 2933, 2934,
     2935, 2877, 2890, 2877, 2877, 2877, 2877, 2877, 2877, 2877,

     2877, 2936, 2936, 2937, 2938, 2939, 2877, 2940, 2940, 2940,
     2940, 2940, 2941, 2942, 2877, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2940,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
     2943, 2877, 2944, 2944, 2944, 2944, 2945, 2946, 2877, 2944,
     2944, 2944, 2944,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693, 2890, 2890, 2947, 2877, 2877,
     2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957,
     2958, 2959, 2960, 2877,  764,  765,  766, 2961, 2877, 2958,
     2959, 2961,  767, 2877,  774, 2962, 2877,  777, 2963,  777,
     2877,  778, 2963, 2963, 2964, 2877,  786, 2965,  786, 2877,
     2966,  787, 2965, 2965, 2967, 2968, 2969, 2877, 2970, 2877,

     2877, 2877, 2877, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2972, 2972, 2972, 2973, 2877, 2971, 2971, 2971, 2971, 2971,
     2971,  818,  855, 2877, 2877, 2877, 2974, 2974, 2975, 2975,
     2877,  818, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2976,
     2976, 2977, 2978, 2978, 2979, 2979, 2979, 2979, 2980, 2981,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979,  897, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,  924,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979,  924, 2979, 2979, 2979, 2979, 2979, 2979, 2982, 2982,
     2983, 2983, 2983, 2984, 2985, 2983, 2983, 2983, 2983, 2983,
     2983, 2983, 2983, 2983, 2983, 2983,  962, 2983, 2983, 2983,
     2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983,
     2983, 2983,  987, 2983, 2983, 2983, 2983, 2983, 2983, 2983,

     2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983,
     2983, 2983, 2983,  987, 2983, 2983, 2983, 2983, 2983,  818,
     2971, 2986, 2987, 2877, 2877, 2877, 2877, 2877, 2988, 2989,
     2989, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997,
     2998, 2999, 3000, 2877, 1044, 2994, 2877, 2877, 3001, 2995,
     3002, 2877, 1052, 2996, 2877, 3003, 3004, 3005, 3006, 3007,
     3008, 2998, 3009, 2877, 3010, 3010, 3011, 3011, 3011, 3011,
     3011, 3011, 3011, 3011, 3011, 3011, 2877, 3011, 3011, 3011,
     3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,
     3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,

     3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,
     3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,
     3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,
     3011, 3011, 3011, 3012, 3012, 3012, 3013, 2877, 2877, 2877,
     3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,
     3011, 3011, 3011, 3011, 3011, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 3014, 3014, 3015, 3015, 2877, 3011,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 3016, 3016,
     3017, 2877, 3018, 3018, 3018, 3018, 3018, 3018, 3018, 3018,
     3018, 3018, 3019, 3019, 3019, 3019, 3020, 3018, 3018, 3018,

     3018, 3018, 3018, 3018, 3018, 3018, 3018, 3018, 3018, 3018,
     3018, 3018, 3018, 3018, 3018, 3018, 3018, 3018, 3018, 3018,
     3018, 3018, 3018, 1201, 3018, 3018, 3018, 3018, 3018, 3018,
     3018, 3018, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1201, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 2877, 3021, 3021, 3021,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 3022, 3022, 3022,
     3022, 3023, 1260, 1260, 3021, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1275, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1275, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 3011, 3011,
     3011, 2877, 2877, 3024, 3025, 3026, 3025, 3027, 3025, 3028,
     3028, 3029, 1062, 1062, 3030, 3030, 3031, 3032, 2877, 1349,
     3033, 1349, 2877, 1350, 3034, 3035, 3035, 3036, 3037, 2877,
     1360, 3038, 1360, 3039, 1361, 3040, 3041, 3041, 3042, 3043,
     3044, 3045, 2877, 3046, 3047, 3047, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 2877, 2877, 2877, 2877,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,

     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3049, 3049, 3049, 2877, 2877, 2877, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     3050, 3050, 3051, 3048, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 3052, 3052, 3053, 3053, 3053, 3053, 3053, 3053, 3053,

     3053, 3053, 3053, 3054, 3055, 3054, 3056, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3057, 3057, 3057,
     3057, 3057, 3057, 3057, 3057, 3057, 3057, 3058, 3059, 3058,
     3060, 3057, 3057, 3057, 3057, 3057, 3057, 3057, 3057, 3057,
     3057, 3057, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,

     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 3048, 3048, 3048, 2877, 3061, 3061, 3061, 3062, 3063,
     2877, 1651, 3064, 2877, 3065, 3065, 3066, 3067, 3068, 3069,
     3069, 3070, 3071, 3072, 2877, 3046, 1666, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 2877, 2877, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,

     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3049, 3049, 3049, 2877, 2877, 2877, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 3050, 3050, 3048, 2877, 2877, 2877, 2877, 2877,
     3052, 3052, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3055, 3055, 3055, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,

     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 3059, 3059, 3059, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 3057, 1592, 1592,

     1592, 1592, 3048, 3048, 3048, 2877, 3062, 3062, 3063, 3063,
     3073, 3074, 1651, 1652, 3064, 1651, 3075, 1652, 3066, 1919,
     3076, 3077, 3078, 3079, 2877, 3080, 3080, 3048, 3048, 3048,
     3048, 3048, 3048, 2877, 2877, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 2877, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3049, 3049, 3049, 2877, 2877, 2877, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,

     3048, 3048, 3048, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 3050, 3050, 2877, 2877, 2877, 2877, 2877,
     3052, 3052, 3053, 3053, 3053, 3053, 3053, 3053, 3081, 3082,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 1833, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 1833, 1833, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 1592, 1592, 1592,
     1592, 1592, 1592, 3083, 3084, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,

     1592, 1898, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1898, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 3048, 3048, 3048, 2877, 3085, 3086, 3075, 3087,
     3088, 3078, 2877, 3048, 3048, 3048, 3048, 2877, 2877, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     2877, 3048, 3048, 3048, 3048, 3048, 2877, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3049, 3049, 3049, 2877, 2877, 2877,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,

     3048, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 3050, 3050, 2877, 2877, 2877, 2877, 2877, 3052, 3052,
     3053, 3053, 3053, 3053, 3082, 3082, 3082, 3089, 3053, 1833,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 1833,
     3053, 3053, 3053, 3053, 1833, 3053, 3053, 3053, 1833, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 1592, 1592, 1592, 1592, 3084, 3084, 3084, 3090, 1592,
     1898, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1898, 1592, 1592, 1592, 1592, 1898, 1592, 1592, 1592, 1898,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,

     1592, 1592, 3048, 3048, 2877, 3085, 3085, 3076, 3091, 3092,
     3086, 2877, 3087, 3087, 3048, 3048, 3048, 3048, 2877, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 2877, 2877, 2877, 2877, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3049, 3093, 3049,
     3049, 2877, 2877, 2877, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 3050, 3050, 2877, 2877, 2877, 2877, 2877,
     3052, 3052, 3053, 3053, 3053, 3053, 3094, 3082, 3089, 3089,
     3095, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,

     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 1592, 1592, 1592, 1592, 3096,
     3084, 3090, 3090, 3097, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 3048, 3048,
     2877, 2877, 3098, 3088, 3092, 2877, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 2877, 2877,
     3048, 3048, 3048, 3048, 3093, 3049, 3099, 3049, 3049, 2877,
     2877, 2877, 3048, 3048, 3048, 3048, 3048, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 3050, 3050, 2877, 2877, 2877,

     2877, 3052, 3052, 3053, 3053, 3053, 3082, 3082, 3100, 3095,
     3095, 3101, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3053, 3053, 3053, 1592, 1592, 1592, 3084, 3084,
     3102, 3097, 3097, 3103, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 3048, 3048, 3098,
     3098, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 2877, 2877, 3048, 3048, 3048, 3049, 2877, 3099, 2877,
     3049, 3049, 2877, 2877, 3048, 3048, 3048, 3048, 2877, 2877,
     2877, 3050, 3050, 2877, 2877, 2877, 3052, 3052, 3053, 3053,
     3100, 3100, 3100, 3100, 3104, 3101, 3101, 3101, 3095, 3053,

     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     1592, 1592, 3102, 3102, 3102, 3102, 3105, 3103, 3103, 3103,
     3097, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 2877, 2877, 3048, 3048, 2877, 2877, 3049, 3049, 2877,
     2877, 3048, 3048, 3048, 2877, 2877, 2877, 3050, 3050, 2877,
     2877, 3052, 3052, 3053, 3053, 3089, 3100, 3104, 3104, 3104,
     3104, 3106, 3101, 3095, 3053, 3053, 3053, 2609, 3053, 3053,
     2609, 3053, 1592, 1592, 3090, 3102, 3105, 3105, 3105, 3105,
     3107, 3103, 3097, 1592, 1592, 1592, 2631, 1592, 1592, 2631,

     1592, 3048, 3048, 2877, 3048, 3048, 3048, 3048, 2877, 3048,
     3048, 3049, 3049, 2877, 2877, 3048, 3048, 2877, 3050, 3050,
     2877, 2877, 3052, 3052, 3053, 3095, 3104, 3101, 3101, 3101,
     3053, 3053, 3053, 3053, 3053, 3053, 1592, 3097, 3105, 3103,
     3103, 3103, 1592, 1592, 1592, 1592, 1592, 1592, 3048, 3048,
     3048, 2877, 3048, 3048, 3049, 3049, 2877, 2877, 3048, 2877,
     3050, 3050, 2877, 3052, 3052, 3053, 3053, 3053, 3053, 1592,
     1592, 1592, 1592, 3048, 3048, 3048, 3048, 3049, 3049, 2877,
     2877, 3048, 2877, 3050, 3050, 2877, 3052, 3052, 3053, 3053,
     3053, 1592, 1592, 1592, 3048, 3048, 3048, 3048, 3049, 3049,

     2877, 2877, 3048, 2877, 3050, 3050, 2877, 3052, 3052, 3053,
     3053, 3053, 1592, 1592, 1592, 3048, 3048, 3049, 3049, 2877,
     3048, 2877, 3050, 3050, 2877, 3052, 3052, 3053, 1592, 3048,
     3049, 3049, 2877, 3050, 3050, 3052, 3052, 3049, 3049, 3050,
     3050, 3052, 3052, 3049, 3049, 3050, 3050, 3052, 3052, 3049,
     3049, 3050, 3050, 3052, 3052, 3049, 3049, 3050, 3050, 3052,
     3052, 3049, 2877, 3050, 2877, 3052, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877,    0, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,

     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,

     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,

     2877, 2877, 2877, 2877, 2877, 2877, 2877
    } ;

static yyconst short int yy_nxt[12780] =
    {   0,
       40,   41,   42,   41,   40,   43,   40,   40,   44,   45,
       46,   47,   40,   48,   40,   49,   50,   51,   52,   50,
       50,   50,   50,   53,   50,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   65,   66,   65,
       65,   67,   68,   69,   70,   71,   65,   72,   73,   74,
       75,   76,   77,   78,   65,   65,   79,   40,   81,   81,
      177,  177,   84,   84,  205,  183,  183,  208,  209,  178,
      178,  179,  179,  184,  184,  184,  184,  184,  184,  198,
     1648,   82,   82,   83,   83,   84,   83,   83,   83,   83,
       83,   83,   83,   83,   85,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   86,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   83,
       83,   88,   88,   88,   89,   89,   89,   88,  305,   92,
       89,  214,  250,   92,   90,   90,   93,  251,  306,   94,
       93,  214,  317,   94,  317,   91,   91,   91,  214,  249,
       88,   91,   95,   89,   88,  519,   95,   89,   98,   99,
       98,  206,   88,   90,  104,   89,  287,   90,  100,   96,
       98,   99,   98,   96,   91,   90,  198,  186,   91,  187,

      100,   88,  188,  104,   89,   88,   91,  163,   89,  510,
      510,  101,  214,   88,   90,  163,   89,  214,   90,   40,
       84,   40,  191,  101,  192,   91,   90,  193,  102,   91,
      289,  404,  219,  103,   40,   84,   40,   91,  214,  214,
      102,  404,  220,  214,  221,  103,  106,  106,  106,  214,
       88,  189,  308,   89,  243,  189,  107,  214,  222,  189,
      309,  214, 1445,  170,  273,   88,  214,  238,   89,  230,
      108,  231,  197,  214,   91,  239,  215,  109,  170,  110,
      111,  232,  214,  112,  414,  518,  199,  216,  238,   91,
      200,  217,  113,  218,  201,  214,  288,  114,  415,  202,

      223,  115,  106,  106,  106,  203,  250,  197,  404,  214,
      244,  251,  107,  204,  522, 2877,  245,  435,  214,  214,
      528,  199,  538,  214,  224,  200,  108,  404,  240,  201,
      214,  267,  225,  109,  202,  110,  111,  241,  226,  112,
      203,  227,  242,  228, 1649,  268,  229,  214,  113,  293,
      293,  293,  536,  114,  293,  293,  293,  115,   40,  116,
      117,  116,   40,   43,   40,   40,   44,  118,   46,   47,
       40,   48,   40,   49,   50,   51,   52,   50,   50,   50,
       50,   53,   50,   54,   55,   56,   57,  119,  120,  121,
      122,  123,  124,  125,  126,  127,  128,  129,  127,  130,

      131,  132,  133,  134,  127,  135,  136,  137,  138,  139,
      140,  141,  127,  127,   91,   40,  142,  143,  144,  145,
      146,  147,  148,  149,  149,  150,  149,  149,  151,  152,
      153,  154,  155,  149,  156,  157,  158,  159,  160,  161,
      162,  149,  149,   91,   88,  164,  436,   89,  214,  214,
      221,  464,  437,  165,  246,  166,  404,  167,  442,  168,
      169,  404,  247,  443,  285,  214,  248,  214,   91,   88,
      164,  262,   89,  404,  233,  234,  263,  275,  165,  264,
      166,  265,  167,  404,  168,  169,  266,  214,  252,  235,
     1076,  214,  236,   91,  172,  237,  253,  214,  173,  214,

      527,  276,  277,  549,  276,  277,  214,  254,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  471,  230,  509,
      291,  175,  172,  255,  278,  279,  173,  278,  279, 1506,
      232,  302,  302,  302,  198,  214,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  214,  214,  256,  214,  175,
      214,  233,  234,  515,  257,  258,  269,  270, 1504,  214,
      252,  259,  529,  271,  260,  512,  235,  272,  290,  236,
      214,  261,  286,  214,  292,  297,  298,  313,  314,  254,
      214,  432,  230,  320,  301,  320,  404,  404,  268,  441,
      433, 1650,  541,  321,  232,  434,  404,  404,  299,  300,

      315,  316,  320,  214,  320,  322,  348,  349,  322,  323,
      322,  324,  321,  614,  615,  255,  322,  458,  322,  322,
      214,  350,  214,  517,  351,  322,  331,  352,  323,  322,
      324,  459,  322,  325,  326,  516,  332,  523,  330,  447,
      344,  404,  345,  322,  327,  346,  448,  449,  328,  322,
      329,  322,  347,  450,  322,  353,  451,  330,  320,  444,
      320,  322,  322,  452,  322,  322,  355,  445,  321, 1657,
      354,  322,  322,  404,  356,  322,  214,  322,  446,  378,
      322,  322,  322,  404,  323,  322,  324,  333,  322,  357,
      334,  322,  379,  322,  530,  322,  364,  322,  335,  214,

      380,  336,  365,  322,  214,  322,  322,  337,  322,  366,
      844,  381,  382,  330,  223,  322,  322,  214,  322,  367,
      369,  184,  184,  184,  520,  368,  322,  214,  370,  322,
      555,  394,  371,  214,  322,  322,  322,  525,  338,  322,
      822,  322,  322,  396,  397,  395,  339,  322,  526,  322,
      398,  322,  340, 1662,  399,  341,  322,  342,  322,  214,
      343, 2877,  322,  322,  214,  214, 2877,  322,  240,  425,
      426,  543,  322,  560,  562,  322,  372,  241,  373,  375,
      374,  322,  242,  322,  427,  322,  400,  428,  358,  359,
      429,  376,  322,  360,  404,  322,  377,  223,  214,  322,

      322,  186,  361,  187,  362,  322,  188,  363,  389,  322,
      214,  322,  521,  390,  322,  255,  391,  830,  392,  322,
      214,  416,  430,  393,  422,  322,  423,  404,  214,  417,
      431,  404,  230,  214,  465,  418,  424,  404,  419,  383,
      420,  404,  532,  421,  232,  404,  384,  385,  244,  483,
      483,  483,  214,  386,  245,  186,  387,  187,  322,  438,
      188,  322,  214,  388,  402,  402,  402,  439,  404,  214,
      214,  440,  453, 1105,  403,  554,  535,  454,  404,  191,
      455,  192,  456,  404,  193,  467,  468,  457,  524,  191,
      405,  192,  406,  404,  193,  407,  460,  461,  214,  188,

      214,  185,  214,  462,  556,  484,  408,  463, 1371,  214,
      409,  472,  410,  404,  214,  252,  287,  531,  469,  411,
      402,  402,  402,  253,  537,  474,  470,  487,  214,  475,
      403,  214,  513,  476,  254,  486, 1658,  486,  477,  486,
      533,  486,  214,  486,  478,  489,  405,  489,  406,  190,
      214,  534,  191,  514,  214,  489,  493,  494,  495,  214,
     1136,  553,  214,  412,  539,  572,  489,  489,  550,  497,
      540,  564,  214,  413,  542,  411,  511,  511,  511,  511,
      511,  511,  511,  491,  279,  491,  279,  491,  559,  491,
      214,  491,  498,  499,  499,  499,  499,  500,  500,  500,

      500,  214,  557, 1663,  561,  501,  502,  503,  503,  503,
      503,  504,  504,  504,  504,  214,  544,  214,  214,  505,
      214,  545,  558,  551,  214,  214,  214,  214,  214,  566,
      214,  546,  573,  214,  547,  548,  552,  563,  506,  567,
      574,  214,  565,  214,  569,  568,  571,  570,  580,  214,
      214,  279,  214,  588,  279,  578,  214,  579,  533,  582,
      584,  214,  293,  293,  293,  580,  583,  589,  602,  581,
      214,  526,  300,  404,  593,  302,  302,  302,  599,  585,
      603,  300,  600,  404,  317,  526,  317,  316,  322, 2137,
      320,  322,  320,  322,  316, 2877,  322, 2877,  322,  322,

      321,  322,  322,  214,  322, 2877,  823,  322,  322,  322,
      214,  322,  322,  322,  609,  322,  323,  608,  322,  804,
      656, 2877,  322, 2877,  322,  322,  322,  610,  973,  322,
      322,  322,  404,  322,  322,  322,  684,  322,  322, 2140,
      322,  404,  404,  612,  322,  330,  322,  404,  611,  322,
     2877,  322,  322,  322,  322,  214,  322,  685,  404,  746,
      322,  322,  322,  322,  322,  616,  322,  322,  404,  322,
      526,  322,  617,  322,  322,  322,  322,  322,  322,  662,
      322,  404,  688,  689,  686,  618,  322,  322,  322,  322,
      322,  404,  619, 1077,  322,  322,  690,  620,  322,  322,

      322,  322,  322,  322,  214,  806,  404,  322,  214,  826,
      322,  322,  621,  322,  322,  322,  214,  404,  322,  322,
      322,  404,  683,  214,  214,  322,  322,  404,  322,  322,
      322,  404,  404,  322,  622,  322,  322,  691,  623,  322,
      841,  322,  404,  813,  322,  322,  624,  404,  322,  214,
      322,  322,  625,  322, 1923,  322,  322,  404,  322,  322,
      322,  807,  322,  322,  322,  214,  322,  322,  322,  626,
      808,  322,  404,  322,  322,  322,  322,  694,  627,  628,
      322,  322,  404,  322,  322,  214,  322,  322, 2453,  820,
      629,  630,  322,  795,  322,  322,  322,  322, 2877,  322,

     2877,  322,  322,  322,  214,  404,  697,  797, 2877,  692,
      632,  693,  404,  322,  322,  404,  404,  322,  322,  322,
      798,  322,  404,  821, 2877,  322, 2877,  214,  634,  322,
      322,  631,  322,  322,  322,  633,  404,  322,  322,  704,
      322,  322,  214,  635,  322,  815,  404,  809,  322,  322,
      322,  322,  322, 2877,  695,  404,  322,  322,  214,  322,
      322,  322,  322,  322,  696,  404,  636,  322,  322,  322,
      322,  322, 1647,  836,  404,  322,  322,  637,  322,  322,
      322,  322,  322,  638,  404,  705,  800,  800,  322,  322,
      322,  639,  322,  322,  322,  404,  404,  322,  322,  801,

      698,  322,  214, 1062,  322,  322,  404,  640,  322,  322,
      322,  747,  322,  641,  322,  404,  322,  580,  214,  322,
      322,  322,  214,  322,  322,  404,  858,  322,  322,  322,
      322,  643,  322,  214,  829,  642,  322,  214,  812,  322,
      322,  322,  322,  322,  322,  214,  701,  322,  322,  214,
     1374,  644,  404,  214,  322,  322,  322,  819,  322,  322,
      322,  857,  404,  322,  322,  824,  322,  322,  322,  645,
      322,  322,  863,  825,  647,  646,  322,  322,  322,  322,
      214,  322,  322,  322,  706,  404,  699,  868,  322,  322,
      322,  322,  322,  322,  322,  404,  214,  700,  322,  279,

      831,  322,  322,  648,  322,  649,  322,  404,  214,  322,
      322,  322,  703,  322,  814,  404,  322,  322,  322,  214,
      322,  322,  214,  832,  322,  404,  322,  322, 1058,  322,
      707,  833,  322,  322,  709,  404,  404,  711,  322,  651,
      827,  708,  322,  214,  652,  404,  404,  404,  835,  322,
      322,  214,  322,  322,  653,  404,  839,  654,  655,  322,
      322,  322, 2253,  322,  214,  404,  322,  322,  658,  322,
      322,  661,  322,  322,  657,  322,  322,  659,  845,  322,
      322,  660,  712,  322,  710,  322,  322,  322,  322,  322,
      214,  663,  322,  404,  404,  322,  214, 1166,  322,  853,

      322,  665,  322,  404,  404,  322,  322,  664,  666,  322,
      322,  322,  322,  322,  322,  322,  840,  404,  322,  322,
      322,  322,  322,  300,  214,  404,  322,  404,  667,  669,
      668,  716,  322,  322,  322,  404,  322,  322,  322,  322,
      322,  404,  860,  322,  322,  670,  671,  322,  404,  322,
      322,  322,  727,  322, 1366,  214,  322,  322,  404,  322,
      322,  715,  322,  672,  404,  322,  322,  723,  673,  847,
      214,  322,  322,  867,  404,  322,  404,  322,  322,  322,
      675,  322,  725,  674,  322,  322,  404,  322,  322, 1355,
      322,  322,  404,  322,  322,  726,  676,  724,  404,  322,

      322,  862,  404,  322,  728,  322,  322,  322,  404,  322,
      279,  322,  322,  677,  404,  322,  322,  678,  322,  322,
      322,  402,  402,  402,  404,  322,  322,  800,  800,  322,
      679,  403, 2877, 2877, 2877,  322,  214,  680,  322,  322,
      713,  404, 2877,  729,  214,  404,  714,  405,  718,  846,
      730,  404,  214,  719,  731,  404,  851,  848, 2877,  734,
     2877,  404,  404,  720,  214,  404,  721,  722,  404,  404,
      733,  404,  404,  842,  732,  404,  411,  736,  404,  404,
      735,  404,  738,  404,  404,  843,  214, 2877,  404,  737,
      740,  404,  404,  404,  404,  739,  404,  741,  404,  404,

      850, 1049,  404,  404,  742,  404,  404,  404,  743,  404,
      472,  404,  744,  404,  745,  404,  214,  404,  483,  483,
      483,  404,  810, 1050,  474,  186, 1041,  187,  475,  191,
      188,  192,  476,  214,  193,  811,  757,  477,  816,  877,
      758,  759,  817,  478,  760,  767,  767,  767,  300,  761,
      773,  773,  773,  773,  773,  762,  214,  214,  772,  774,
      773,  773,  773,  773,  493,  494,  495,  214, 1039,  214,
      852,  854,  849,  775,  484,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  870,  776,  785,  861,  754,  763,
      764,  765,  766,  767,  767,  767,  767,  767,  767,  784,

      794,  279,  214,  768,  779,  779,  779,  779,  779,  878,
     1406,  769,  781,  790,  214,  837,  770,  782,  771,  791,
      971,  404,  771,  776,  777,  778,  778,  778,  778,  779,
      779,  779,  779,  214,  404,  838,  300,  780,  788,  788,
      788,  788,  788,  214,  214, 1147,  880,  856,  859,  214,
      781,  792,  300, 1079,  869, 1148,  771,  498,  499,  499,
      499,  499,  500,  500,  500,  500,  785,  786,  787,  787,
      787,  787,  788,  788,  788,  788, 1040,  214, 1037,  890,
      789,  802,  802,  802,  802,  802,  802,  802,  316,  891,
      214,  214, 1021,  790,  803,  506,  866,  404,  871,  791,

      502,  503,  503,  503,  503,  504,  504,  504,  504,  811,
      404,  840,  875,  875,  875,  320,  316,  320,  320,  320,
      320,  320,  320, 1040,  320,  321,  214,  214,  321,  321,
      214, 1081,  321, 1118,  322, 1078,  322,  322,  936,  322,
      876,  323, 1048,  324,  323,  323,  324,  324,  323,  320,
      897,  320,  895,  320,  322,  320,  937,  322,  320,  321,
      320,  896,  320,  321,  320,  214,  214,  322,  321,  322,
      330, 1094,  321,  330,  330,  323,  322,  330,  322,  323,
     1067,  324,  898,  320,  323,  320,  324,  322,  323, 1036,
      324,  938,  320,  321,  320,  902,  322,  977,  901,  322,

      214,  322,  321,  404,  330,  320, 1082,  320,  330,  323,
      322,  324,  322,  330,  903,  321,  404,  330,  323,  322,
      324,  404,  320,  942,  320,  904,  320,  320,  320,  320,
      322,  323,  321,  324,  404,  972,  321,  321,  330,  320,
     1033,  320,  764,  765,  766,  404,  214,  330,  323,  321,
      324, 1132,  323,  323,  324,  324,  905,  974,  404,  907,
      330,  320,  320,  320,  320,  323,  322,  324,  322,  906,
      943,  321,  321,  214,  320,  908,  320,  330, 1022,  404,
     1093,  330,  330,  322,  321,  322,  322,  323,  323,  324,
      324,  939,  404,  978,  330,  909,  320,  214,  320,  320,

      323,  320,  324,  940, 1101,  404,  321,  911,  910,  321,
      320,  912,  320,  320, 2877,  320,  330,  330,  980,  979,
      321,  404,  323,  321,  913,  323,  191,  324,  192,  330,
     1156,  193, 1099,  320,  404,  320,  323,  796,  324,  323,
     1157,  324,  322,  321,  322,  915,  320,  320,  320,  320,
      320,  330,  320,  320,  330,  320,  321,  321,  914,  323,
      321,  324,  322,  321,  404,  330,  982,  214,  330,  404,
     1451, 1098,  323,  323,  324,  324,  323,  404,  324,  323,
      916,  324,  404,  320,  918,  320,  279,  320,  330,  320,
      322,  917,  322,  321,  320,  919,  320,  321,  214,  404,

      941,  330,  330,  404,  321,  330,  981, 1096,  330,  323,
      322,  324,  404,  323, 1061,  324,  404,  320,  920,  320,
      323,  322,  324,  322,  320,  945,  320,  321,  214,  320,
      320,  320,  320,  404,  321,  404,  214, 1106,  330,  321,
      321,  322,  330,  323,  214,  324,  404,  983,  404,  330,
      323, 1391,  324,  922, 1100,  323,  323,  324,  324,  214,
      320,  320,  320,  320,  320,  921,  320,  320,  404,  320,
      321,  321,  330, 1117,  321,  923,  322,  321,  322,  330,
      946,  404,  984,  214,  330,  330,  323,  323,  324,  924,
      323,  987,  324,  323,  214,  324,  322,  404,  320,  320,

      320,  320, 1120,  320,  320,  320,  320,  925,  321,  321,
      404,  214, 1107,  321,  321,  330,  330,  214, 1104,  330,
     1134, 1057,  330, 1097,  323,  323,  324,  324,  985,  323,
      323,  324,  324,  404,  926,  927,  928,  320,  320,  320,
      320,  320,  214,  320,  929,  279,  404,  321,  321, 1051,
     1135,  321, 1165,  330,  330,  322, 1377,  322,  330,  330,
      322,  214,  322,  323,  323,  930,  324,  323,  944,  324,
      322,  931,  322,  947,  322,  322,  322,  279, 1168,  300,
      322, 1095,  404,  322,  932,  322, 2877,  949,  214,  948,
      322,  950,  330,  330,  322,  404,  330,  320,  322,  320,

      322,  952,  322,  322,  322, 1167, 1103,  321, 1121,  767,
      322,  951,  322,  953,  322,  214,  322,  322,  322,  322,
      956,  955,  322,  323, 1133,  324,  933,  322,  934,  322,
      322,  322,  404,  322,  322,  975,  404,  322,  954,  976,
      322,  214,  322, 1043,  986,  404,  935,  322,  957,  404,
     1141,  322,  330,  958,  402,  402,  402,  402,  402,  402,
      322,  402,  402,  402,  403,  214,  404,  403,  402,  402,
      402,  403,  988,  214,  402,  402,  402, 1123,  403,  404,
      405, 2294,  406,  405,  403,  406,  990,  405,  404,  962,
      996,  961,  404, 1122,  405,  404,  406,  963,  404,  989,

      405,  404, 1182,  894,  402,  402,  402,  214,  404,  411,
      997,  404,  411,  991,  403,  404,  411,  402,  402,  402,
      993,  992,  404,  411,  756, 1143,  404,  403,  404,  411,
      405,  995,  406,  994,  404,  404,  402,  402,  402,  404,
      998,  404,  404,  405,  966,  406,  403,  404,  404, 1580,
      967,  214,  404, 1179,  404,  404,  999, 1003, 1000,  411,
      404,  404,  405, 1001,  406,  404,  404, 1005,  404,  968,
      404, 1124,  411,  404, 1004, 1002,  404,  214, 1578,  404,
      316,  404,  404,  404, 1006, 1007,  404, 1008,  404,  404,
     1009,  411,  402,  402,  402,  404,  404, 1142,  404,  404,

      404,  404,  403, 1012,  404,  322, 1011, 1225, 1014,  404,
     1010,  404, 1013,  404,  404,  214,  404,  404,  405, 1015,
      406,  404, 1016,  404,  404, 1017,  969,  404, 1018,  404,
      404,  214,  404, 1144,  404, 1032,  404,  404, 1023,  970,
      800,  800, 1024,  404, 1019,  404, 1025,  411, 1180, 1145,
      404, 1026, 1298,  801,  767,  767,  767, 1027, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031,  772,  757, 1030,
      214,  754,  758,  759,  316, 1329,  760,  773,  773,  773,
      773,  761, 1146, 1257,  960, 1330,  507,  762,  763,  764,
      765,  766,  767,  767,  767,  767,  767,  767,  773,  773,

      773,  773,  768,  773,  773,  773,  773,  773,  214,  214,
      769,  775,  774,  214, 1385,  770,  496, 1378,  214, 1376,
      214,  771, 1044, 1045, 1045, 1045, 1045, 1046, 1046, 1046,
     1046, 1331,  798, 1415, 1382, 1047,  767,  767,  767,  767,
      773,  773,  773,  773,  773,  776,  777,  778,  778,  778,
      778,  779,  779,  779,  779,  776, 2877,  795,  214,  780,
      779,  779,  779,  779,  779,  214,  214, 1383,  214,  784,
     2877, 1063,  781,  782,  214, 1379, 1400, 1381,  771, 1380,
     1446,  214,  781, 2877,  798, 2877, 1056, 2877,  771, 2877,
     1052, 1053, 1053, 1053, 1053, 1054, 1054, 1054, 1054, 2877,

      784, 2877, 1384, 1055,  788,  788,  788,  788,  788,  214,
     1392,  488, 2877,  770, 2877, 2877, 1393,  792, 2877,  771,
     2877,  785, 1048,  785,  786,  787,  787,  787,  787,  788,
      788,  788,  788, 2877,  214,  794, 1138,  789, 2877, 1139,
     1399, 1060,  214, 2877, 2877, 1346,  214, 2877,  790, 1140,
      790, 1401, 2877, 1347,  791,  794,  791, 2877,  770, 1413,
     2877, 1342, 1386, 1483,  771, 2877, 2877, 1414,  790,  214,
     2877, 2877, 1056, 1167,  771, 1344, 2877,  802,  802,  802,
      802,  802,  802,  802,  214, 1453,  784, 1394,  790, 1402,
      803,  802,  802,  802,  802,  802,  802,  802, 2877,  770,

     1068,  279, 1069, 1070,  320,  771,  320, 1071,  214, 1357,
     1171, 1072, 1073, 1407,  321, 1172, 1074, 1075, 2877, 1083,
     1368, 1084, 1358,  473, 1085, 1173,  214, 1086,  771, 1174,
      323, 1410,  324,  790, 1087,  214, 1088, 1089, 1090, 1369,
     1091, 1092,  214,  214, 1108, 1023, 1109, 1183,  214, 1024,
     1397, 1110, 1408, 1025, 1111, 2667, 1398, 1431, 1026,  330,
     1112, 1113, 1114, 1115, 1027, 1116, 2877, 1125, 1149, 1126,
     1150, 1127, 1151, 1128, 1152, 1129, 1153,  214, 1405,  214,
     1409, 1130, 1154,  320,  615,  320, 1131, 1155, 1158,  320,
     1159,  320, 1160,  321, 1161, 1194, 1162, 1194,  320,  321,

      320,  214, 1163, 1077,  320, 1195,  320, 1164,  321,  323,
     1432,  324,  748, 1060,  321,  323, 1433,  324,  214, 1395,
     1370, 1196,  214, 1411,  323, 1574,  324,  794,  214,  404,
      323,  214,  324, 1396, 1372,  320, 1412,  320,  330, 2877,
      790, 2877, 1192,  795,  330,  321,  771, 1373, 1416, 2877,
     1197,  615,  198,  330,  214,  214,  320, 1344,  320,  330,
      214,  323, 1439,  324,  214, 2877,  321, 2877, 1418, 1184,
      798, 1185, 1186,  320,  214,  320, 1187, 1198, 1417, 1438,
     1188, 1189,  323,  321,  324, 1190, 1191,  320, 1419,  320,
      330,  214,  214,  320, 2877,  320,  320,  321,  320,  323,

      214,  324,  214,  321,  404,  214,  321, 1420, 1576, 1403,
     1199,  330, 1049,  323, 1426,  324, 1404, 1421,  214,  323,
     1464, 1201,  323, 1430,  324, 1440,  775,  320,  330,  320,
      320,  320,  320,  320, 1050, 1200,  214,  321,  214,  770,
      321,  321,  330, 1457,  320,  771,  320, 1442,  330,  214,
     1348,  330, 1443,  323,  321,  324,  323,  323,  324,  324,
     2839,  320, 1202,  320,  784,  320, 2877,  320,  279,  214,
      323,  321,  324, 1387, 1388,  321,  214, 1353, 1203,  214,
      214, 1441,  330,  771, 1444,  330,  330,  323,  214,  324,
     1447,  323, 1389,  324, 1450,  214, 1459, 1643, 1215,  330,

     1204,  322, 1205,  322,  322, 1206, 1390,  214, 1207, 1448,
     1465,  214,  322,  322, 1452, 1208,  330, 1209, 1210, 1211,
      330, 1212, 1213,  320,  320,  320,  320,  320,  320,  320,
      320,  214,  214,  321,  321, 1467, 1449,  321,  321,  492,
      279, 1458,  214, 1484, 1351, 1351, 1351, 1351, 1351,  323,
      323,  324,  324,  323,  323,  324,  324, 1354, 1214,  320,
      320,  320,  320,  214,  320, 1217,  320,  214,  214,  321,
      321,  320, 1461,  320,  321, 1216,  214, 1482,  330,  330,
     1468,  321,  330,  330,  214,  323,  323,  324,  324, 1460,
      323, 1466,  324,  300, 2876,  214, 2877,  323, 2877,  324,

     1462, 1218,  214, 1220, 1219, 1470, 2877,  320,  320,  320,
      320,  320, 1493,  320,  330,  330, 1469,  321,  321,  330,
      214,  321, 2877,  214, 2877, 1471,  330,  404,  316, 1481,
      320,  404,  320,  323,  323,  324,  324,  323, 1397,  324,
      321,  214, 1221,  320, 1463,  320, 1223,  320, 1492,  320,
     1427, 2877,  214,  321, 1222,  300,  323,  321, 1224, 1428,
     1505,  404,  330,  330, 1429,  404,  330, 1687,  320,  323,
      320,  324, 1572,  323,  316,  324, 1226,  320,  321,  320,
      320,  320,  320,  320, 1579,  330, 1359,  321, 1507,  900,
      321,  321,  214, 1422,  323, 1583,  324, 2875,  330,  404,

      794, 1423,  330,  323, 1504,  324,  323,  323,  324,  324,
      322,  322, 1424,  790, 1228, 1425,  320, 1227,  320, 1364,
     1581,  965, 1229,  330, 1558, 1530,  321, 1230, 1578, 2874,
      404, 1342,  330, 1531,  404,  330,  330,  320,  320,  320,
      320,  404,  323, 1573,  324,  404,  214,  321,  321, 1269,
     1269, 1269,  320,  404,  320, 1644,  404,  404,  790, 1270,
      322, 1575,  321,  323,  323,  324,  324, 1231,  322, 1232,
     1632,  330, 1577, 1543, 1233, 1271,  214, 1234,  323,  322,
      324, 1671,  322, 1235, 1236, 1237, 1238,  320, 1239,  320,
      214,  214,  330,  330, 1240,  322,  320,  321,  320,  320,

      320,  320,  320, 1544, 1272,  689,  321,  330, 1670,  321,
      321, 1668, 1545,  323,  322,  324,  404, 1546, 1241,  320,
      404,  320,  323,  214,  324,  323,  323,  324, 1242,  321,
      320,  320,  320,  320,  320,  404,  320,  214, 1675,  404,
      321,  321,  330, 1669,  321,  323,  404,  324, 1376, 1586,
      404,  330, 1582,  404,  330,  330,  323,  323,  324,  324,
      323,  798,  324, 1587,  214,  320, 1243,  320,  320,  320,
      320,  320,  404, 1695,  330,  321,  404, 1590,  321,  321,
      404, 2873, 1244, 1596, 1592,  330,  330,  404,  404,  330,
     1585,  323,  404,  324,  323,  323,  324,  324,  214,  214,

      320,  404,  320, 1434, 1721, 1598,  214, 1692, 1435, 1246,
      321, 1436,  320, 1248,  320, 1249, 1245, 1250, 1437, 1251,
      330, 1252,  321,  330,  330,  404,  323, 1253,  324,  404,
      322,  320, 1254,  320,  320,  320,  320,  320,  323,  404,
      324,  321, 1591,  404,  321,  321,  404,  404, 1247, 1600,
      404,  404, 2872,  404, 1597,  330,  320,  323,  320,  324,
      323,  323,  324,  324, 1255, 1593,  321,  330,  320, 2871,
      320,  402,  402,  402,  214,  402,  402,  402,  321, 1040,
     1077,  403,  323,  322,  324,  403,  330, 1547,  404,  330,
      330,  322,  404, 1256,  323, 1679,  324,  405, 1048,  406,

      404,  405,  322,  406,  404,  322, 2877,  214,  402,  402,
      402,  330,  214,  322, 1258,  402,  402,  402,  403, 2877,
      404, 1548, 1696,  330, 1601,  403,  411, 2877, 2877, 2877,
      411,  214,  322, 1738,  405,  322,  406, 2877, 1602, 1734,
      404,  405,  404,  406, 1603, 1362, 1362, 1362, 1362, 1362,
      404, 1672,  404, 2877, 1621, 2877,  404, 1259, 1365, 1260,
     1261, 1267,  279,  411, 1262,  402,  402,  402, 1263, 1264,
      411, 1607, 2870, 1265, 1266,  403,  402,  402,  402,  402,
      402,  402, 2877,  404,  404,  214,  403,  404,  404,  403,
      404,  405, 1673,  406,  404,  404,  402,  402,  402,  404,

     1608, 1594,  405, 1599,  406,  405,  403,  406, 1595,  402,
      402,  402, 2869, 1273,  214,  402,  402,  402,  404,  403,
      411,  186,  405,  187, 1275,  403,  188, 1274,  402,  402,
      402,  411, 1604, 1683,  411,  405,  214,  406,  403, 1702,
     1605,  405,  320,  406,  320,  402,  402,  402,  402,  402,
      402,  411,  321,  404,  405,  403,  406,  404,  403,  404,
     1276, 1622,  214,  404,  411,  402,  402,  402,  323,  214,
      411,  405, 1609,  406,  405,  403,  406,  404, 1693,  214,
      322,  404, 1277,  411, 1710,  402,  402,  402, 1549, 1682,
     1610,  405,  404,  406, 1550,  403,  404,  330, 1630,  322,

      411,  214,  322,  411, 1278,  404, 1279,  404,  404, 1280,
      404,  405, 1281,  406,  404, 1680,  404,  404, 1289, 1282,
      411, 1283, 1284, 1285, 1588, 1286, 1287,  402,  402,  402,
     1589,  402,  402,  402,  404,  404,  214,  403,  404,  404,
      411,  403,  402,  402,  402,  214,  402,  402,  402, 1606,
     1681,  214,  403,  405,  404,  406,  403,  405,  404,  406,
     1397,  214, 1288,  402,  402,  402, 1642, 1617,  405, 1676,
      406,  404,  405,  403,  406,  404, 1984,  402,  402,  402,
      322, 1698,  411, 1291,  214, 1629,  411,  403,  322,  405,
     1290,  406,  214,  214,  402,  402,  402,  411, 1684, 1557,

      279,  411,  322,  405,  403,  406, 1674, 1703,  404, 2877,
     2877, 2877,  404,  402,  402,  402,  214, 1292,  411, 2877,
      405,  404,  406,  403,  214,  404, 1293, 1631,  402,  402,
      402, 2868,  411, 1716, 1685, 2877,  404, 2877,  403,  405,
      404,  406,  404,  402,  402,  402,  404,  404,  404,  411,
     1633,  404, 1640,  403,  405, 1294,  406,  214, 1637,  404,
      402,  402,  402,  404, 2877,  402,  402,  402,  411,  405,
      403,  406,  404, 1635, 1295,  403,  404, 1704, 1296,  402,
      402,  402,  214,  411,  214,  320,  405,  320, 1297,  403,
      404,  405, 1634,  406,  404,  321, 1686, 1699,  411,  402,

      402,  402,  402,  402,  402,  405,  404,  406, 1299,  403,
      404,  323,  403,  324, 1500,  411,  402,  402,  402, 2867,
      411,  402,  402,  402,  322,  405,  403,  406,  405, 1636,
      406,  403,  322,  322,  411,  402,  402,  402, 1555, 1301,
      330, 1559,  405,  322,  406,  403,  322,  405, 1300,  406,
      214, 1712,  322,  214,  411,  322,  322,  411,  214, 1741,
     1731,  405, 1302,  406,  322,  214,  404,  402,  402,  402,
      404,  411,  402,  402,  402,  322,  411,  403,  322, 1638,
      214,  404,  403, 1694, 1732,  404, 2865,  402,  402,  402,
      411,  279,  404,  405, 1700,  406,  404,  403,  405,  214,

      406, 1639, 1303, 2877, 1304, 1641,  402,  402,  402, 1305,
      214, 1697, 1306,  405,  214,  406,  403, 2877, 1307, 1308,
     1309, 1310,  411, 1311, 1706, 2863, 1932,  411, 1346, 1312,
     2877,  214,  405, 1357,  406, 1715, 1347, 1313,  402,  402,
      402,  770,  411,  402,  402,  402, 1358,  771,  403,  402,
      402,  402,  771,  403,  322,  402,  402,  402,  214,  403,
     1556,  411,  322,  214,  405,  403,  406, 1938,  404,  405,
      214, 1314,  404,  322,  214,  405,  322,  406, 1705, 1718,
      404,  405, 1611,  406,  404,  402,  402,  402, 1618,  402,
      402,  402, 1612,  411,  214,  403, 1315, 1619,  411,  403,

      214,  214, 1620,  214,  411, 1690,  402,  402,  402, 1941,
      411,  405, 1701,  406, 1714,  405,  403,  406, 1691,  402,
      402,  402, 2877,  402,  402,  402,  402,  402,  402,  403,
     2877,  322,  405,  403,  406, 2877,  403, 1316,  214,  322,
      411, 2877, 1973,  214,  411,  405,  214,  406, 2476,  405,
      322,  406,  405,  322,  402,  402,  402,  322, 1194, 1688,
     1194,  411, 1689, 1318,  403,  322, 1708, 1317, 1195, 1320,
      214, 1321,  214, 1322,  411, 1323,  322, 1324,  411,  322,
      405,  411,  406, 1325, 1196, 1707,  404,  214, 1326,  402,
      402,  402,  214,  402,  402,  402,  402,  402,  402,  403,

     2477, 1709, 1319,  403, 1370,  214,  403, 1711, 2832,  411,
      402,  402,  402, 1197, 1504,  405,  214,  406, 1664,  405,
      403,  406,  405, 1720,  406,  214, 1327,  402,  402,  402,
     1713, 1373,  214, 1764, 1719,  279,  405,  403,  406,  322,
      320,  322,  320, 1560,  411, 2686, 1717,  322,  411,  322,
      321,  411,  320,  405,  320,  406,  300, 2877,  322,  214,
      322,  322,  321,  322, 1328,  411,  323,  404,  324,  214,
     2877,  404, 1723,  214,  689, 1623, 2877, 1495,  323, 1722,
      324, 1624,  411, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335,  214, 1725, 1494,  330, 1336, 1337, 1337, 1337,

     1337, 1337, 1337, 1337, 1337, 1337, 1724,  330,  214, 1348,
     1338, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
      214, 1730, 1979,  784, 1338, 1348, 1349, 1350, 1350, 1350,
     1350, 1351, 1351, 1351, 1351,  322, 1353,  404, 1551, 1352,
     1625,  404,  771, 1552,  214, 1626, 1553, 1745, 1627,  214,
     1953,  214, 1353, 1554,  322, 1628, 1928,  322,  771, 1044,
     1045, 1045, 1045, 1045, 1046, 1046, 1046, 1046, 1359, 1360,
     1361, 1361, 1361, 1361, 1362, 1362, 1362, 1362, 1661,  214,
     1368, 1864, 1363,  214,  404,  214,  320, 1999,  320,  214,
      320,  770,  320,  790, 1726,  790,  321,  771, 1739, 1369,

      321, 1364, 1052, 1053, 1053, 1053, 1053, 1054, 1054, 1054,
     1054,  320,  323,  320,  324, 1496,  323, 2825,  324, 1497,
      214,  321,  320,  320,  320,  320,  320, 1656,  320,  214,
     1498, 1727,  321,  321, 1743, 1050,  321,  323,  214,  324,
      770,  330, 2877, 1940, 1744,  330,  771, 1728,  323,  323,
      324,  324,  323, 1499,  324, 2877, 1502,  320,  320,  320,
      320, 2877,  320,  320,  320,  320,  330,  321,  321,  214,
      214, 1501,  321,  321, 1503, 1944,  214,  330,  330, 1783,
     2822,  330, 1740,  323,  323,  324,  324,  214,  323,  323,
      324,  324, 1509, 2877, 1733, 2877, 1729, 1508,  320,  320,

      320,  320,  214, 2877,  320,  214,  320, 1742,  321,  321,
      279, 2835,  330,  330,  321,  214, 1746,  330,  330, 2877,
     1748, 2877, 1510, 1784,  323,  323,  324,  324, 1752,  320,
      323,  320,  324, 1667,  320, 1511,  320,  214,  300,  321,
      320,  320,  320,  320,  321,  214,  790, 1749, 2877, 1950,
      321,  321,  771,  330,  330,  323,  322,  324, 1512,  330,
      323,  214,  324, 1750,  322, 1747,  323,  323,  324,  324,
     1561,  320, 1513,  320, 1516,  322, 2820, 1514,  322, 1765,
      320,  321,  320, 1515,  330,  404, 1772, 1517,  404,  330,
      321,  320,  320,  320,  320,  330,  330,  323, 1848,  324,

     1759,  321,  321,  320, 1518,  320,  323,  214,  324,  316,
      214,  214,  320,  321,  320,  214, 1760,  323,  323,  324,
      324, 1522,  321,  320, 1903,  320,  330, 1751, 1519,  323,
     1904,  324, 1763,  321, 1771,  330,  214, 1520,  323, 1523,
      324,  214, 1849, 1943, 1521, 1524,  330,  330,  300,  323,
      316,  324, 1908,  320,  320,  320,  320,  214,  330,  320,
      320,  320,  320,  321,  321,  790,  320,  330,  320,  321,
      321, 1351, 1351, 1351, 1351, 1351,  321, 1905,  330,  323,
      323,  324,  324, 1526, 1354,  323,  323,  324,  324, 2877,
     1525,  320,  323,  320,  324, 1863,  214,  320, 1927,  320,

     2807,  321,  320, 2877,  320, 1929,  214,  321,  330,  330,
      404, 1373,  321,  404,  330,  330, 2877,  323,  214,  324,
     1931,  330, 2877,  323, 1527,  324, 1528,  320,  323,  320,
      324, 1930,  320,  404,  320, 1529,  404,  321,  320,  320,
      320,  320,  321, 1868, 1866,  214,  330,  404,  321,  321,
      404,  404,  330,  323,  404,  324,  214,  330,  323,  404,
      324, 1865,  404, 1936,  323,  323,  324,  324, 1955,  320,
     1532,  320, 1871,  320,  404,  320,  320,  404,  320,  321,
     1533, 1535,  330,  321, 1534,  214,  321,  330,  322,  404,
      214, 1872,  404,  330,  330,  323,  322,  324,  322,  323,

      404,  324,  323,  404,  324, 1937,  322,  322,  322, 1563,
      322, 1562, 2144,  214,  322, 1536,  322,  322,  322, 1537,
      322, 1564,  322, 2727,  330, 1958,  322,  322,  330, 1538,
      322,  330,  320,  322,  320,  322,  322,  322, 1565, 1566,
      322,  404,  321,  322,  404, 1869,  402,  402,  402, 2877,
      404,  322,  900,  404,  322, 1873,  403,  322,  323,  322,
      324, 1539, 2804, 2877, 1567,  402,  402,  402,  404, 1540,
      322,  404,  405,  322,  406,  403, 2877, 1867,  404, 2802,
     1541,  404, 2877, 1542, 1269, 1269, 1269,  330, 1568, 1870,
      214,  405,  404,  406, 1270,  404, 1977,  214, 2877, 2877,

     2877,  411, 1569, 1362, 1362, 1362, 1362, 1362, 2877,  404,
     1271, 1613,  404, 1946,  404,  404, 1365,  404, 1359, 1614,
      411,  402,  402,  402, 2877, 2801, 2877, 1584, 2877, 2877,
     1615,  403,  794, 1616, 1874,  404,  214,  214,  404, 1272,
     1578,  404, 2877, 2877,  404,  790, 1861,  405, 1966,  406,
     1570, 1364, 1945, 2877, 1571, 2877, 2877,  404, 2786, 1862,
      404, 2877, 2877,  404, 1887,  404,  404, 1875,  404, 1876,
     1877,  404,  404,  214,  404,  404,  411, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 2877, 1948, 2330, 1881,
     1336, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,

      404,  214, 1886,  404, 1338, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337,  404, 1951, 2783,  404, 1338, 1348,
     1349, 1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351,  214,
     1878,  404,  404, 1352,  404,  404, 1879, 1880, 1933,  404,
      214,  320,  404,  320, 1882,  404, 1353, 1883,  404, 1939,
      214,  321,  771, 1651, 1652, 1652, 1652, 1652, 1653, 1653,
     1653, 1653,  404,  214,  214,  404, 1654,  323, 1949,  324,
     1961, 1889, 1884,  320,  404,  320, 1885,  404,  404,  404,
     1982,  404,  404,  321, 1910, 1048, 1359, 1360, 1361, 1361,
     1361, 1361, 1362, 1362, 1362, 1362,  330, 1911, 1920,  323,

     1363,  324, 1890,  771,  320,  320,  320,  320,  320,  404,
      320,  790,  404,  790,  321,  321, 1040, 1921,  321, 1364,
     1888, 1773,  404,  404,  214,  404,  404,  320,  330,  320,
      323,  323,  324,  324,  323, 1048,  324,  321,  320,  404,
      320, 1776,  404,  214,  320, 1947,  320,  404,  321, 1891,
      404, 1775, 1774,  323,  321,  324, 1902, 1969,  404,  330,
      330,  404, 1893,  330,  323,  404,  324, 2781,  404,  320,
      323,  320,  324, 1778,  320, 1777,  320, 1892,  320,  321,
      320,  320,  330,  320,  321, 1779,  214,  404,  321, 1942,
      404,  321, 1894,  330,  214,  323,  214,  324, 1780,  330,

      323, 1957,  324, 1956,  323,  404,  324,  323,  404,  324,
      214,  320,  320,  320,  320,  320,  320,  320,  320, 1975,
     1781,  321,  321, 1786,  330,  321,  321, 1785, 1901,  330,
     1895,  404,  404,  330,  404,  404,  330,  323,  323,  324,
      324,  323,  323,  324,  324,  214,  320,  320,  320,  320,
     1959,  404, 2780, 1787,  404, 1896,  321,  321, 1790,  320,
     1788,  320, 1789, 1898, 1897,  404,  330,  330,  404,  321,
      330,  330,  323,  323,  324,  324,  214, 1964,  320, 1899,
      320,  320,  404,  320,  320,  323,  320,  324,  321, 1792,
      214,  321, 1791,  404,  321, 1960,  404, 1900,  320,  214,

      320,  330,  330,  320,  323,  320,  324,  323,  321,  324,
      323,  214,  324,  321,  330,  214,  214, 1796,  214, 1963,
     1968, 1793, 2708, 1976,  323, 1794,  324, 1798, 1795,  323,
     1797,  324, 1912,  330, 1962,  320,  330,  320,  320,  330,
      320,  320,  320,  320,  320,  321,  794, 1799,  321,  214,
      214,  321,  321,  330, 1978,  214, 1997, 1922,  330,  790,
      214,  323,  214,  324,  323, 1917,  324,  323,  323,  324,
      324, 1924,  320, 1965,  320, 1801,  320,  320,  320,  320,
     1967, 1800,  321, 1981, 1925, 1802,  321,  321, 1661,  320,
      330,  320,  214,  330,  214, 2877,  330,  330,  323,  321,

      324,  770,  323,  323,  324,  324, 1971,  771, 2877,  320,
     2877,  320, 1803,  214, 2877,  323,  214,  324, 1805,  321,
      320, 1656,  320, 1995, 1804, 1980,  320,  330,  320, 1050,
      321,  330,  330, 1970,  770,  323,  321,  324, 1986,  320,
      771,  320, 2877,  320,  330,  320,  323,  214,  324,  321,
     2877, 1806,  323,  321,  324, 2877,  965, 1667,  320,  214,
      320, 2877, 2015, 1983,  330,  323, 1807,  324,  321,  323,
      790,  324,  214, 1972, 1808,  330,  771,  320,  320,  320,
      320,  330, 2877,  320,  323,  320,  324,  321,  321,  320,
     1990,  320,  279,  321,  330, 2877, 1985,  900,  330,  321,

      320, 2877,  320,  323,  323,  324,  324,  214, 2150,  323,
      321,  324,  214,  330, 2877,  323,  300,  324,  214,  279,
      320, 1809,  320, 1996, 1992,  320,  323,  320,  324, 2000,
      321, 1810,  330,  330,  214,  321, 2763, 1811,  330,  320,
      214,  320, 1812, 1370,  330,  214,  323,  214,  324,  321,
      320,  323,  320,  324, 1991,  330,  320, 1344,  320, 1993,
      321, 2002,  320, 2003,  320,  323,  321,  324, 1813,  320,
     1373,  320,  321, 2014,  214,  330,  323, 1994,  324,  321,
      330,  214,  323, 2022,  324, 1783, 1998, 1814,  323, 1816,
      324, 1818, 1815, 2021,  330,  323,  300,  324,  214,  320,

      404,  320,  214,  404,  320,  330,  320, 2145,  320,  321,
      320,  330, 1817, 1783,  321,  214,  316,  330,  321, 2001,
     1848,  320, 2134,  320,  330,  323, 1908,  324, 2079, 1784,
      323,  321,  324, 2760,  323,  404,  324,  316,  404,  790,
     1821, 1819,  320, 1848,  320, 1820,  320,  323,  320,  324,
      214,  320,  321,  320,  330, 2078,  321, 2030, 1822,  330,
      214,  321,  214,  330, 1849,  320,  404,  320,  323,  404,
      324, 2146,  323,  214,  324,  321,  330,  323,  214,  324,
     1954, 1954, 1954, 1824, 1823, 2135,  404, 2085, 1825,  404,
      320,  323,  320,  324, 2157, 2029, 1783,  330, 2154,  214,

      321,  330,  320,  320,  320,  320,  330,  320,  214,  320,
      214, 1826,  321,  321, 2877, 2561,  323,  321,  324, 2153,
      330, 2081,  320,  404,  320, 1927,  404, 2877,  323,  323,
      324,  324,  321,  323, 2877,  324,  214, 1827, 1373,  320,
     1784,  320,  320,  404,  320,  330,  404, 2877,  323,  321,
      324, 2152,  321, 1829,  320, 1828,  320,  330,  330,  320,
     2080,  320,  330,  404,  321,  323,  404,  324,  323,  321,
      324,  404, 2082,  320,  404,  320,  404,  330, 2819,  404,
      323, 1830, 1833,  321,  214,  323, 2083,  324,  279,  404,
     1831, 2086,  404,  404,  330,  214,  404,  330, 1834,  323,

     2160,  324, 1832,  320, 2166,  320,  320, 2088,  320,  330,
      402,  402,  402,  321,  330, 2758,  321, 2084, 1848,  404,
      403, 1835,  404,  402,  402,  402,  214,  214,  330,  323,
     2089,  324,  323,  403,  324, 2164,  405,  404,  406,  404,
      404, 1837,  404, 2087, 1836, 2155,  402,  402,  402,  405,
      214,  406, 2167,  402,  402,  402,  403, 2096,  330, 2090,
      404,  330, 1849,  403, 2147,  411,  214,  402,  402,  402,
      404, 1838,  405,  404,  406,  214, 2092,  403,  411,  405,
      404,  406,  214,  404, 2180, 2097,  402,  402,  402,  404,
      214, 2156,  404,  405, 1839,  406,  403,  214, 2757, 1840,

     1841,  411, 1910,  402,  402,  402, 2179, 2165,  411,  402,
      402,  402,  405,  403,  406, 1911,  402,  402,  402,  403,
      214,  771,  411,  402,  402,  402,  403, 2093,  214,  405,
     2091,  406, 2169,  403, 1842,  405,  404,  406, 1843,  404,
      404,  411,  405,  404,  406, 1845,  402,  402,  402,  405,
     1844,  406,  404, 2095,  404,  404,  403,  404,  411,  214,
      402,  402,  402, 2171,  411,  402,  402,  402,  214, 1846,
      403,  411,  405, 2094,  406,  403,  404,  214,  411,  404,
      402,  402,  402, 2177,  404, 2100,  405,  404,  406,  404,
      403,  405,  404,  406,  689, 1850, 1915, 1915, 1915, 1915,

     1915,  411, 1851,  402,  402,  402,  405, 1852,  406, 1918,
      214,  404,  214,  403,  404,  411,  214,  402,  402,  402,
      411, 2877, 2170,  402,  402,  402,  214,  403, 1853,  405,
     2099,  406, 2173,  403, 2877,  411, 2174,  402,  402,  402,
     2877,  404, 2824,  405,  404,  406, 2175,  403,  214,  405,
     1854,  406,  300, 2877,  402,  402,  402, 2176,  411, 1855,
      402,  402,  402,  405,  403,  406, 2098, 2159,  404, 1856,
      403,  404,  411,  320,  320,  320,  320, 2102,  411, 1857,
      405, 2186,  406,  321,  321,  320,  405,  320,  406, 2101,
     2103,  404,  411,  404,  404,  321,  404,  214, 2181,  323,

      323,  324,  324, 1858,  320,  404,  320, 2023,  404,  411,
      320,  323,  320,  324,  321,  411,  402,  402,  402,  214,
      321,  404, 2024,  615,  404, 2110,  403, 2104,  330,  330,
      323,  404,  324,  214,  404,  279,  323, 2194,  324, 2105,
      330,  320,  405,  320,  406, 2025,  404,  214, 2107,  404,
     2106,  321,  404, 2183,  404,  404,  320,  404,  320,  330,
     1859,  404, 2877, 1860,  404,  330,  321,  323, 2182,  324,
     2187,  411, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 2163,  323, 2026,  324, 1336, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335,  279,  330, 2722, 2108, 1336,

     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,  404,
      214,  330,  404, 1338, 1912, 1913, 1914, 1914, 1914, 1914,
     1915, 1915, 1915, 1915,  214, 2191, 2109,  404, 1916, 2111,
      404, 2184,  320,  320,  320,  320,  320,  404,  320,  214,
      404,  790,  321,  321, 1920, 2472,  321, 1917, 1651, 1652,
     1652, 1652, 1652, 1653, 1653, 1653, 1653,  790,  323,  323,
      324,  324,  323, 1921,  324, 2113,  320,  320,  320,  320,
     2028,  404, 2027, 2185,  404, 2112,  321,  321,  214,  320,
      404,  320, 2031,  404, 1954, 1954, 1954,  330,  330,  321,
     2721,  330,  323,  323,  324,  324,  279, 2178,  320, 2033,

      320,  320,  320,  320,  320,  323,  404,  324,  321,  404,
     2116,  321,  321,  320, 2032,  320, 2034,  404, 2739, 2114,
      404,  330,  330,  321,  323,  214,  324,  323,  323,  324,
      324, 2035, 2126, 2115,  330, 2036,  320,  404,  320,  323,
      404,  324,  404, 2197, 2037,  404,  321,  965,  320,  320,
      320,  320, 2117,  330,  214, 2718,  330,  330,  321,  321,
      214,  322,  323,  404,  324, 2241,  404, 2122,  330, 2196,
      320, 2038,  320, 2195,  323,  323,  324,  324,  214,  404,
      321, 2039,  404,  320,  320,  320,  320,  320, 2877,  320,
     2212,  330, 2040,  321,  321,  214,  323,  321,  324, 2199,

     2118, 2877,  404,  330,  330,  404,  214, 2877,  214,  323,
      323,  324,  324,  323, 2041,  324,  214,  320,  404,  320,
     2044,  320, 2282,  320, 2304,  330, 2043,  321, 2193,  214,
      404,  321, 2042,  404, 2119, 2120, 2200,  404,  330,  330,
      404, 2123,  330,  323,  300,  324, 2121,  323,  404,  324,
     2201,  404,  320,  320,  320,  320,  320,  404,  320, 2125,
      404, 2045,  321,  321, 2124,  320,  321,  320,  214, 2198,
      404,  404,  330,  404,  404,  321,  330, 2213,  323,  323,
      324, 2047,  323, 2219,  324, 2048,  320,  320,  320,  320,
      320,  323,  320,  324, 2046, 2131,  321,  321,  404,  320,

      321,  320,  300, 2132, 2220, 2128,  404,  330,  330,  321,
     2715,  330,  323,  323,  324,  324,  323, 2127,  324,  404,
      330, 2350,  404, 2051, 2050,  323, 2049,  324,  404,  316,
      320,  404,  320,  320,  320,  320,  320,  316, 2714, 2052,
      321,  330,  330,  321,  321,  330,  279,  320,  404,  320,
     2877,  404,  404, 2130,  330,  404,  323,  321,  324,  323,
      323,  324,  324, 2053,  214, 2339, 2054, 2133,  320,  320,
      320,  320, 1912,  323,  214,  324, 2709, 2158,  321,  321,
      214,  320, 2055,  320,  404,  330,  794,  404,  330,  330,
      320,  321,  320, 2056,  323,  323,  324,  324, 2327,  790,

      321,  320,  330,  320,  214, 1917,  214,  323,  214,  324,
     2058,  321,  320, 2315,  320, 2716,  323, 2057,  324, 2211,
     2211, 2211,  321,  330,  330,  404, 2303,  323,  404,  324,
     2060,  320, 2263,  320,  404, 1922,  330,  404,  323,  894,
      324,  321,  320,  404,  320,  330,  404, 2059,  320, 2142,
      320,  320,  321,  320, 2388,  214,  330,  323,  321,  324,
     2061,  321, 1925,  320, 2062,  320,  404,  330,  323,  404,
      324, 2264, 2262,  321,  323, 2317,  324,  323,  404,  324,
     2270,  404,  320,  320,  320,  320,  330, 2314, 2307,  323,
     2063,  324,  321,  321,  320,  404,  320,  330,  404, 2064,

     1925,  790,  214,  330,  321, 2065,  330, 2308,  323,  323,
      324,  324, 2272,  404, 2877, 2067,  404,  320,  330,  320,
      323, 2265, 2068,  404, 2066,  214,  404,  321, 2877,  320,
      320,  320,  320,  404,  214,  214,  404,  330,  330,  321,
      321, 2877,  320,  323,  320,  324, 2459, 2877, 2316,  330,
     2271,  320,  321,  320, 2069,  323,  323,  324,  324,  214,
     2877,  321, 2070,  320, 2071,  320,  404, 2837,  323,  404,
      324, 2345,  330,  321, 2877, 2072, 2877,  323, 2877,  324,
      404, 2073, 2275,  404,  330,  330, 2877, 2877,  320,  323,
      320,  324,  404, 2877,  316,  404, 2274,  330,  321,  214,

     2702,  320, 2877,  320, 2877,  404,  330,  320,  404,  320,
     2277,  321, 2075, 2322,  323,  214,  324,  321,  330, 2074,
     2877, 2877, 2877, 2161, 2161, 2161,  320,  323,  320,  324,
     2877, 2877, 2076,  323, 2342,  324,  321, 2273,  960,  320,
      320,  320,  320,  330,  404, 2077, 2877,  404, 2877,  321,
      321, 2162,  323, 2421,  324,  404,  330,  404,  404,  320,
     2279,  320,  330, 2129, 2278,  323,  323,  324,  324,  321,
      214, 2351,  320, 2222,  320, 2877,  320,  404,  320, 2324,
      404,  330,  321,  214,  279,  323,  321,  324,  214, 2221,
     2318, 1194, 2457, 1194,  330,  330, 2223, 2225,  323, 2225,

      324, 1195,  323, 2877,  324, 2356,  320, 2226,  320,  894,
      320,  320,  320,  320,  330, 2276,  321, 1196, 2224,  404,
      321,  321,  404, 2227,  214,  404, 2281,  330,  404, 2285,
      404,  330,  323,  404,  324, 2229,  323,  323,  324, 2230,
      214,  320,  404,  320, 2320,  404, 1197, 1504,  320, 2329,
      320,  321, 2228,  320,  320,  320,  320, 2280,  321, 2375,
      320,  330,  320,  321,  321,  330,  330,  323,  404,  324,
      321,  404,  300,  320,  323,  320,  324,  214, 2325,  323,
      323,  324,  324,  321, 2231,  320,  323,  320,  324,  404,
     2232,  404,  404, 2167,  404,  321,  330, 2283, 2284,  323,

      214,  324, 2233,  330,  404, 2333, 2234,  404,  330,  330,
      320,  323,  320,  324, 2235,  330,  320,  320,  320,  320,
      321,  404, 2236,  320,  404,  320,  321,  321,  330,  320,
      214,  320,  404,  321, 2877,  404,  323, 2286,  324,  321,
      330, 2817,  323,  323,  324,  324,  214, 2237,  320,  323,
      320,  324, 2374,  404, 2321,  323,  404,  324,  321,  320,
      404,  320, 2239,  404, 2238,  330, 2326,  404,  214,  321,
      404,  330,  330,  320,  323,  320, 2240,  300,  330,  320,
      320,  320,  320,  321,  330,  323,  214,  324, 2328,  321,
      321, 2288,  320, 2323,  320,  404, 2242, 2167,  404,  323,

     2572,  324,  321,  330, 2287,  323,  323,  324,  324,  404,
      214,  320,  404,  320,  330,  320,  404,  320,  323,  404,
      324,  321,  320,  279,  320,  321, 2243, 2244,  330, 2359,
     2289, 2661,  321,  214,  330,  330,  320,  323,  320,  324,
     2343,  323,  404, 2245, 2381,  404,  321,  330,  323,  404,
      324,  404,  404,  320,  404,  320,  214,  320,  404,  320,
     2299,  404,  323,  321,  324, 2357,  330,  321, 2246,  316,
      330, 2290,  320,  404,  320,  404, 2296,  330,  404,  323,
      214,  324,  321,  323, 2553,  324,  214,  404, 2660, 2297,
      404,  330,  320,  320,  320,  320,  404, 2247,  323,  404,

      324,  214,  321,  321, 2248,  320,  404,  320,  330,  404,
     2291, 2473,  330, 2362,  320,  321,  320,  214,  323,  323,
      324,  324,  404,  214,  321,  404,  320,  330,  320,  404,
     2309,  323,  404, 2249, 2300,  320,  321,  320, 2382,  320,
      323,  320,  324, 2331, 2311,  321, 2654,  330,  330,  321,
      404,  316,  323,  404,  324, 2302,  320, 2312,  320,  322,
      330,  323, 2250,  324, 2393,  323,  321,  324,  214,  330,
      320,  404,  320, 2298,  404,  320,  320,  320,  320,  214,
      321,  330,  323, 2251,  324,  321,  321, 2252, 2346,  320,
      330,  320, 2651, 2332,  330,  320,  323,  320,  324,  321,

      214,  323,  323,  324,  324,  321,  320,  214,  320, 2650,
      320,  330,  320, 2254, 2341,  323,  321,  324, 2877, 2338,
      321,  323, 2255,  324, 2260,  330, 2256,  320, 2462,  320,
      330,  330,  323, 1922,  324, 2258,  323,  321,  324,  404,
      404, 2257,  404, 2292,  330, 2426,  320, 1344,  320,  214,
      330,  214, 2340,  323,  404,  324,  321,  404, 2293, 2259,
     1925,  330, 2295,  404, 2463,  330,  404, 1269, 1269, 1269,
     2334, 2335,  323, 2877,  324, 2570, 2261, 1270, 2266, 2266,
     2266,  404,  330,  214,  404, 2301,  214, 2877, 2267, 2336,
      960,  214,  214, 1271, 2161, 2161, 2161, 2344,  214, 2358,

     2877,  330, 2390, 2337, 2268, 2361, 2347, 2348, 2348, 2348,
      214, 2349, 2355,  404,  214,  214,  404, 2360, 2372, 2372,
     2372,  404, 1272, 1578,  404, 2402,  320,  320,  320,  320,
      320,  214,  320, 2269, 2363, 2364,  321,  321,  322,  320,
      321,  320, 2417, 2406,  404, 2391, 2030,  404,  404,  321,
     2416,  404,  323,  323,  324,  324,  323,  322,  324, 2383,
     2225,  404, 2225,  279,  404,  323, 2439,  324, 2423, 2384,
     2226, 2435,  894,  320, 2386,  320,  214,  320, 2385,  320,
      404,  330,  330,  321,  404,  330, 2227,  321,  320,  404,
      320,  214,  404, 2418,  330, 2427, 2458,  404,  321,  323,

      404,  324, 2644,  323,  214,  324, 2485,  320,  320,  320,
      320, 2424, 2085, 2449,  323, 2228,  324,  321,  321, 2394,
      320, 2392,  320, 2395,  404, 2314, 2432,  404,  330, 2877,
      321,  214,  330,  323,  323,  324,  324, 2397, 1925,  320,
     2460,  320, 2877,  330, 2396,  320,  323,  320,  324,  321,
      320,  320,  320,  320,  320,  321,  320, 2419,  214, 2450,
      321,  321,  330,  330,  321,  323,  404,  324, 2398,  404,
      214,  323, 2428,  324,  214,  330,  323,  323,  324,  324,
      323,  404,  324, 2461,  404, 2399,  320, 2401,  320,  320,
     2466,  320,  214, 2400,  330, 2430,  321, 2468,  214,  321,

      330,  320, 2403,  320,  404,  330,  330,  404, 2425,  330,
      404,  321,  323,  404,  324,  323,  404,  324, 2705,  404,
      320,  320,  320,  320,  214, 2438,  214,  323, 2404,  324,
      321,  321, 2307,  320, 2405,  320,  404, 2464, 2467,  404,
      320,  330,  320,  321,  330,  790,  323,  323,  324,  324,
      321, 2308,  320,  320,  320,  320,  330, 2429, 2877,  323,
      214,  324,  321,  321,  404,  214,  323,  404,  324, 2483,
      404, 2877,  320,  404,  320,  330,  330, 2877,  323,  323,
      324,  324,  321,  320,  320,  320,  320,  320,  330,  320,
     2703,  214,  214,  321,  321,  330, 2564,  321,  323,  404,

      324, 2408,  404, 2431,  320, 2471,  320,  330,  330,  323,
      323,  324,  324,  323,  321,  324,  214, 2474, 2437,  320,
      404,  320, 2411,  404,  320, 2409,  320,  330, 2476,  321,
      323, 2410,  324,  404,  321,  214,  404, 2433,  330,  330,
      404, 2434,  330,  404, 2436,  323, 2412,  324,  404, 2557,
      323,  404,  324,  214, 2487,  320,  320,  320,  320,  330,
     2266, 2266, 2266, 2643, 2413,  321,  321, 2414,  404, 2642,
     2267,  404,  960,  404,  330,  404,  404, 2441,  404,  330,
     2477,  323,  323,  324,  324, 2442, 2268,  404,  404, 2444,
      404, 2443,  404, 2446, 2445,  404,  404,  404,  404,  404,

      404,  404,  404, 2479, 2415,  404, 2447, 2309,  214,  404,
      330,  330,  404,  404, 2877, 2269,  404, 2448, 2451, 2451,
     2451, 2455, 2452,  214, 2478,  214, 2465,  279, 2877, 2348,
     2348, 2348,  214, 2349, 2312, 2508,  894,  279, 2486, 2497,
     2503, 2877, 2390,  214, 2484, 2490, 2490, 2490, 2491, 2491,
     2491, 2493, 2493, 2493, 2494, 2494, 2494, 2495, 2495, 2495,
     2496, 2502, 2511,  300,  316,  320,  320,  320,  320,  214,
      320, 2423,  320,  300,  316,  321,  321,  320, 2559,  320,
      321, 2509, 2390, 2530,  960,  279, 2030,  321,  214, 2552,
      214,  323,  323,  324,  324, 2558,  323, 2504,  324, 2533,

     2639, 2526,  320,  323,  320,  324, 2512,  320,  320,  320,
      320,  214,  321,  404, 2505, 2085,  404,  321,  321, 2506,
      330,  330, 2531, 2423, 2549,  330, 2030,  320,  323,  320,
      324, 2583,  330,  323,  323,  324,  324,  321,  320, 2513,
      320,  214,  404, 2534, 2514,  404, 2527,  404,  321,  320,
      404,  320, 2528,  323,  300,  324, 2548,  330,  320,  321,
      320, 2551,  330,  330,  323,  214,  324, 2085,  321,  320,
      320,  320,  320,  214, 2312,  323, 2515,  324, 2555,  321,
      321, 2516,  330,  214,  323,  404,  324, 2577,  404,  320,
     2517,  320,  320,  330,  320,  323,  323,  324,  324,  321,

     2518,  320,  321,  320,  330,  404, 2538,  404,  404, 2535,
      404,  321,  320,  330,  320,  323,  404,  324,  323,  404,
      324, 2649,  321,  214,  330,  330,  320,  323,  320,  324,
      214,  320, 2520,  320, 2521, 2566,  321, 2519,  323, 2536,
      324,  321, 2578,  320,  330,  320,  404,  330,  320,  404,
      320,  214,  323,  321,  324,  960,  330,  323,  321,  324,
      404,  214,  320,  404,  320, 2537, 2554,  330,  320,  323,
      320,  324,  321, 2522,  323,  279,  324, 2523,  321, 2556,
      214,  330,  320,  320,  320,  320,  330,  320,  323,  320,
      324, 2511,  321,  321,  323, 2560,  324,  321,  330, 2539,

      894, 2524,  404,  330,  320,  404,  320, 2571,  323,  323,
      324,  324, 2525,  323,  321,  324,  404,  330,  320,  404,
      320,  404,  404,  330,  404,  404, 2541, 2540,  321, 2542,
      323,  279,  324,  404, 2543, 2512,  404,  330,  330, 2582,
      404, 2586,  330,  404,  323,  404,  324,  404,  404,  404,
      404, 2544,  404,  404, 2545,  404,  404,  404,  404,  330,
      404, 2547,  404,  300,  404,  404, 2546,  404,  404,  404,
     2587,  404,  404,  330,  404,  404,  404,  404,  404,  404,
     2451, 2451, 2451, 2309, 2452, 2877, 2567, 2567, 2567,  214,
      214, 2580, 2580, 2580,  316, 2588,  320, 1344,  320, 2877,

     2533,  320, 2551,  320, 2575, 2576,  321,  320, 2585,  320,
     2312,  321, 2877, 2595, 2511, 2312,  404,  321,  316,  404,
      214, 2591,  323, 2591,  324, 2612, 2225,  323, 2225,  324,
     2589, 2592,  214,  323, 2633,  324, 2226,  404,  894, 2590,
      404, 2877, 2568, 2596, 2534, 2596, 2636, 2593, 2617, 2533,
     2611,  330, 2227, 2597, 2877, 1783,  330,  320, 2512,  320,
      214,  320,  330,  320,  320,  404,  320,  321,  404, 2598,
      404,  321, 2624,  404,  321, 2640, 2594,  615,  320,  404,
      320, 2228,  404,  323, 2627,  324, 2648,  323,  321,  324,
      323,  404,  324, 2534,  404,  320,  214,  320, 2599, 2030,

     2600,  320, 2601,  320,  323,  321,  324, 2584,  214,  279,
     2602,  321,  330, 2635, 2634,  320,  330,  320, 2877,  330,
     2603,  323, 2645,  324,  322,  321, 2625,  323,  404,  324,
      214,  404, 2658,  330, 2604,  320,  320,  320,  320, 2629,
     2735,  323,  404,  324, 2652,  321,  321,  320, 2623,  320,
      330,  404, 2605, 2662,  404,  300,  330,  321,  320, 2581,
      320,  323,  323,  324,  324, 2579,  214,  320,  321,  320,
      330, 2637,  320,  323,  320,  324,  316,  321, 2606, 2608,
     2607, 2877,  321, 2626,  323, 2877, 2609, 2706, 2622,  404,
      330,  330,  404,  323,  404,  324,  404,  404,  323,  404,

      324, 2710,  330, 2630, 2266, 2266, 2266, 2613, 2613, 2613,
      214, 2638, 2610,  330, 2267,  404,  960, 2614,  404, 2618,
     2618, 2618,  330, 2631, 2628,  404, 2666,  330,  404, 2619,
     2268, 1848,  214, 2615, 2632, 2641, 2659,  214,  404,  404,
     2653,  404,  404, 2663, 2672, 2620, 2567, 2567, 2567, 2646,
     2646, 2646, 2655, 2655, 2655, 2580, 2580, 2580,  320, 2269,
      320, 2713, 2616,  689, 2657, 2657, 2657,  320,  321,  320,
      615,  614,  615, 2685, 2621, 2085, 2511,  321, 2684, 1783,
     2656, 2591,  279, 2591,  323, 2691,  324,  404, 1784,  404,
      300, 2592,  404,  323, 2673,  324, 2533,  316, 2756, 2668,

     2665, 2668, 2568, 2747, 2664, 2647, 2596, 2593, 2596, 2669,
      688,  689,  404,  330, 2683,  404, 2597,  689, 1783, 2674,
     2512,  279,  330, 1784,  320, 2670,  320,  404, 2827, 1849,
      404,  320, 2598,  320,  321, 2695, 2594,  615,  316, 2693,
     2534,  321, 2694,  320,  404,  320,  404,  404,  404,  404,
      323,  404,  324,  321, 2671,  900, 2877,  323, 2717,  324,
     2712, 2599, 1784,  320, 2676,  320, 2675, 2699,  320,  323,
      320,  324, 2677,  321,  320,  320,  320,  320,  321,  330,
      404,  214, 1848,  404,  321,  321,  330,  404,  214,  323,
      404, 2678,  214, 2711,  323, 2707,  324, 2692,  330,  214,

      323,  323,  324,  324, 2720,  320, 2680,  320, 2750,  320,
     2877,  320, 2877,  404,  279,  321,  404, 2679,  330,  321,
     2877, 2574,  320,  330,  320,  300, 1849, 1507,  900,  330,
      330,  323,  321,  324, 2696,  323, 2877, 2681, 2877, 2646,
     2646, 2646, 2682, 2613, 2613, 2613, 2719, 2723,  323,  404,
      324, 2697,  404, 2614, 2573, 2724, 2687, 2687, 2687,  214,
      330, 2618, 2618, 2618,  330, 2877, 2688,  404, 2753, 2615,
      404, 2619, 2700, 1848, 2698,  404,  316,  330,  404, 2704,
     2704, 2704, 2689, 2655, 2655, 2655, 2762, 2620,  404, 2390,
     2726,  404, 2729, 1783, 1783, 2647, 2511, 2423, 2616,  689,

      300,  316, 2570,  320,  320,  320,  320,  214, 2732,  300,
      322, 2690,  965,  321,  321, 2755, 2621, 1849, 2877, 2877,
     2877, 1581,  965, 2738, 2744, 2668,  404, 2668, 2877,  323,
      323,  324,  324, 2030,  900, 2669,  279, 2730, 1784,  404,
     2512, 2085,  404,  320, 2877,  320, 2877, 1848, 2737, 2533,
     2701, 2670,  214,  321, 2741, 1848, 2725,  404,  330,  330,
      404, 2877,  404, 2749,  320,  404,  320,  965,  320,  323,
      320,  324, 2765, 2877,  321,  320,  404,  320,  321,  404,
     2671,  900, 2704, 2704, 2704,  321,  214,  320,  214,  320,
      323, 1849,  324, 2534,  323,  316,  324,  321,  330, 2742,

     2751,  323,  404,  324, 2565,  404, 2743, 2745,  320,  404,
      320, 2754,  404,  323, 2761,  324, 2731, 2733,  321,  330,
     2746, 2511, 2563,  330, 2764,  404, 2734, 1783,  404, 2748,
      330, 2687, 2687, 2687,  323,  300,  324, 2736, 2752, 2752,
     2752, 2688,  330,  214,  404,  316,  320,  404,  320, 2596,
     1783, 2596,  320, 2533,  320, 2759,  321, 2689, 1848, 2597,
     2562, 1783,  321,  330,  404, 2512,  214,  404, 1848, 2770,
      404, 1784,  323,  404,  324, 2598,  404,  214,  323,  404,
      324, 2779,  320,  320,  320,  320, 2690,  965,  320, 2766,
      320,  214,  321,  321, 2030,  279, 2771, 2534,  321,  214,

      404,  330, 1849,  404, 2599, 1784, 2775,  330,  323,  323,
      324,  324, 2085,  320,  323,  320,  324, 2831,  320, 2772,
      320,  404, 2767,  321,  404, 2841,  404,  279,  321,  404,
     2618, 2618, 2618,  300,  214,  214, 2778,  330,  330,  323,
     2619,  324, 1848,  330,  323,  404,  324, 2774,  404, 2776,
     2768, 2752, 2752, 2752, 2773, 2784, 2620,  214, 2785,  279,
      214, 2787, 2788, 2845,  320,  960,  320,  320,  330,  320,
     2777, 2769,  300,  330,  321, 2782,  316,  321,  300, 2792,
      404, 2800,  279,  404,  316, 2621, 1849,  320, 2794,  320,
      323,  404,  324,  323,  404,  324,  404,  321,  320,  404,

      320, 2793,  404,  214,  279,  404,  214, 2789,  321,  214,
     2790,  214, 2797,  323, 2806,  324, 2798, 2799, 2795,  330,
     2796, 2805,  330, 2809,  323, 2808,  324,  214, 2791,  214,
     2803,  279, 2816,  894,  320,  300,  320,  300,  320,  316,
      320,  214,  330, 2814,  321,  320,  316,  320,  321, 2813,
     2501,  404, 2821,  330,  404,  321,  404, 2818, 2823,  404,
      323, 2815,  324, 2826,  323,  404,  324,  404,  404, 2811,
      404,  323,  404,  324,  214,  404, 2810,  320, 2812,  320,
      279,  300,  320, 2500,  320, 2830,  316,  321,  320,  330,
      320, 2829,  321,  330, 2834, 2838,  404, 2836,  321,  404,

      330, 2499, 2840,  323,  300,  324,  404,  316,  323,  404,
      324, 2833, 2833, 2833,  323, 2842,  324, 2847,  320, 2843,
      320, 2828,  279, 2833, 2833, 2833, 2844,  316,  321,  300,
     2846, 2848,  330, 2849,  279, 2850,  300,  330,  300,  316,
     2851, 2852,  316,  330,  323, 2853,  324, 2854, 2855, 2856,
     2857, 2859,  316,  279,  279, 2858, 2860, 2861,  300, 2498,
      300,  316,  279, 2862,  279,  300,  316, 2864,  300,  316,
     2866,  316, 2492,  330,  496,  496, 2489,  279,  507,  507,
     2488,  300, 1033, 1033,  316,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  190,  190,

      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  198,
      198,  198,  214, 1036,  198, 1036,  214,  198,  214,  198,
      214,  198,  212,  214,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  282, 2482,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  283,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  319, 2481,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  322,
     2480,  322, 1037, 1037, 1041, 1041, 1058, 1058,  214,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  401,  214,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  404,  404,  404, 1340, 1340,
     1340, 1340, 1037, 1037,  214,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  473,  473,
      473, 1658, 1658,  473, 1041, 1041,  473,  214,  473,  214,
      473,  482,  482,  482,  482,  482,  214,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  485,  485, 1039, 1039, 1039,
     1039,  485, 2470,  485,  485,  485,  485, 2469, 1039,  485,
     1039,  485,  488, 1375, 1375,  488, 1375, 1375,  488,  488,
     2138, 2138, 1375,  488,  214, 1375,  214,  488,  490,  490,

     1907, 1907,  214,  490,  214,  490,  490,  490,  490, 1907,
      214,  490,  214,  490,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,

      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  482,  482,  482,  482,  482, 2456,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  751, 1042,
      751,  751,  751,  751,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  752,  752, 2440,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,

      752,  752,  752,  752,  752,  752,  752,  752,  752,  755,
     2420,  755,  755,  755,  755,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  756,  756, 1041, 1041,
      756,  756, 2407,  756, 2387,  756, 2380,  756,  783,  783,
      783, 2379, 2378, 2377, 2376, 1926, 1926, 2373,  783, 2371,
      783,  793,  793,  793, 1926, 2370, 1039, 1039, 2369, 1926,
     1926,  793, 2368,  793,  796,  796,  796, 1039, 1926, 2367,
     2366, 2365,  214, 2354,  796,  799, 2353,  799,  799,  799,
      799,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,

      892,  892,  892,  892,  892,  892,  892,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  322, 2352,  322,  214,  214,  214,  214,  214,  214,
      214,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,

      899,  899,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  404,  404,  404,  214,
      214, 2319, 2877, 2305,  214, 2218,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964, 1022, 1022, 2217,

     2216, 1022, 2215, 2214, 1022, 2210, 1022, 2209, 1022, 1029,
     2208, 1029, 1029, 1029, 1029,  752,  752, 2207,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      756,  756, 2206, 2205,  756,  756, 2204,  756, 2203,  756,
     2202,  756,  783,  783,  783,  214,  214,  214, 2192, 2313,
     2313, 2190,  783, 2189,  783,  793,  793,  793, 2313, 2188,
      214,  214, 2550, 2550,  214,  793, 2172,  793, 1062, 1062,

     1062, 2550,  214,  214,  214,  214, 2168,  214, 1062, 1065,
     1065, 1065, 1065, 1065, 1065,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  322,  214,  322,  214,

      214,  214, 2151,  214, 2149, 2148,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  404,  404,  404,  214,  214, 2143, 1042, 2139, 2136,

     2020,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1022, 1022, 2019, 2018, 1022, 2017, 2016, 1022,
      214, 1022, 2013, 1022, 1334, 2012, 1334, 1334, 1334, 1334,
      752,  752, 2011,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,

      752,  752,  752,  752,  773,  773,  773, 2010, 2009, 2008,
     2007, 2006,  773, 2005,  773, 2004,  773,  783,  783,  783,
      214, 1989, 1988, 1987,  214, 1974,  214,  783,  214,  783,
      793,  793,  793, 1952,  214,  214, 1935, 1934,  214,  214,
      793,  214,  793, 1343, 1343, 1343, 1906,  965, 1578,  689,
      900, 1504,  615, 1343, 1345, 1345, 1770, 1769, 1768, 1767,
     1766, 1345, 1167, 1345, 1762, 1345, 1356, 1356, 1761, 1758,
     1757, 1756, 1755, 1754, 1753, 1356,  214, 1356, 1367, 1367,
     1737, 1736, 1735,  214,  214,  214,  214, 1367,  214, 1367,
     1371, 1371, 1371,  214,  214,  214,  214,  214, 1678, 1677,

     1371, 1065, 1065, 1065, 1065, 1065, 1065,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  322,  214,  322, 1665, 1042, 1659,
     1038, 2877, 1341, 1645,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  404,  404,  404, 1578, 1504,
      316, 1491, 1490, 1489, 1488,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,

      964,  964,  964,  964,  964,  964,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  752,  752, 1487,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752, 1345, 1345, 1486, 1485,  300, 1480, 1479, 1345, 1478,
     1345, 1477, 1345,  783,  783,  783, 1476, 1475, 1474, 1473,
     1472, 1456, 1455,  783, 1454,  783, 1655, 1655,  279,  214,
      214,  214,  214, 1655,  214, 1655,  214, 1655, 1356, 1356,
      214,  214,  214,  214,  214, 2877, 1066, 1356, 1038, 1356,

      793,  793,  793, 1341, 1333, 1332,  965,  960,  900,  894,
      793, 1181,  793, 1660, 1660, 1178, 1177, 1176, 1175, 1170,
     1169, 1167, 1660, 1137, 1660, 1367, 1367,  214,  214,  214,
      214,  214,  214, 1119, 1367,  214, 1367, 1663, 1663, 1663,
      214,  214,  214,  214, 1102,  214,  214, 1663, 1666, 1666,
      214,  214,  214,  214,  214, 1080,  214, 1666,  214, 1666,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  322,
     1066,  322, 1064, 1059, 1048, 1042, 1042, 1038, 1035,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  404,  404,  404, 1034, 1028, 1020,
      965,  689,  960,  900,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,

     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847,
     1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847,
     1847, 1847, 1847, 1847, 1847,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  752,
      752,  615,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752, 1909, 1909,  894,  316,  605,  889,  888,
      887,  886, 1909,  885, 1909,  793,  793,  793,  884,  883,

      882,  881,  591,  874,  873,  793,  872,  793, 1655, 1655,
      865,  279,  576,  214,  855, 1655,  214, 1655,  834, 1655,
     1919, 1919,  214,  828,  214,  214,  214,  214,  818, 1919,
      805, 1919, 1923, 1923, 1923,  214,  750,  749,  214,  214,
      214,  214, 1923, 1660, 1660,  214,  717,  702,  682,  681,
      650,  607, 1660,  606, 1660, 1343, 1343, 1343,  605,  316,
      601,  598,  597,  596,  595, 1343, 2141, 2141, 2141,  594,
      592,  591,  300,  587,  586, 2877, 2141, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959, 2306, 2306,  284,  284,  577,  576,  279,
      214,  214, 2306,  214, 2306, 2310, 2310, 2310,  214,  214,
      214,  214, 2877,  214,  214, 2310, 1343, 1343, 1343,  508,

      198,  481,  480,  479,  466,  318, 1343, 2389, 2389, 2389,
     2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389,
     2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389,
     2389, 2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
     2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
     2422, 2422, 2422, 2422, 2422, 2454, 2454, 2454,  311,  310,
      307,  304,  303,  280,  295, 2454, 2475, 2475, 2475, 2475,
     2475, 2475, 2475, 2475, 2475, 2475, 2475, 2475, 2475, 2475,
     2475, 2475, 2475, 2475, 2475, 2475, 2475, 2475, 2475, 2475,
     2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507,

     2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507, 2507,
     2507, 2507, 2507, 2507, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2529, 2529,
     2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529,
     2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529,
     2529, 2529, 2532, 2532, 2532, 2532, 2532, 2532, 2532, 2532,
     2532, 2532, 2532, 2532, 2532, 2532, 2532, 2532, 2532, 2532,
     2532, 2532, 2532, 2532, 2532, 2532, 2569, 2569, 2569, 2569,
     2569, 2569, 2569, 2569, 2569, 2569, 2569, 2569, 2569, 2569,

     2569, 2569, 2569, 2569, 2569, 2569, 2569, 2569, 2569, 2569,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847,
     1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847,

     1847, 1847, 1847, 1847, 1847, 1847,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964, 2728, 2728, 2728, 2728, 2728, 2728,
     2728, 2728, 2728, 2728, 2728, 2728, 2728, 2728, 2728, 2728,
     2728, 2728, 2728, 2728, 2728, 2728, 2728, 2728, 2740, 2740,
     2740, 2740, 2740, 2740, 2740, 2740, 2740, 2740, 2740, 2740,
     2740, 2740, 2740, 2740, 2740, 2740, 2740, 2740, 2740, 2740,

     2740, 2740,  294,  280,  284,  280,  281,  280,  214,  211,
      210,  207,  196,  195,  194, 2877,   84,   84,  180,  180,
       39, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877
    } ;

static yyconst short int yy_chk[12780] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
       31,   32,   37,   38,   52,   37,   38,   55,   55,   31,
       32,   31,   32,   41,   41,   41,   42,   42,   42,   52,
     3027,    3,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    8,    9,    7,    8,    9,   10,  110,    9,
       10,   71,   72,   10,    7,    8,    9,   72,  110,    9,
       10,  222,  116,   10,  116,    7,    8,    9,   90,   71,
       11,   10,   11,   11,   12,  222,   12,   12,   13,   13,
       13,   53,   15,   11,   15,   15,   90,   12,   13,   11,
       14,   14,   14,   12,   11,   15,   53,   43,   12,   43,

       14,   16,   43,   16,   16,   23,   15,   23,   23,  205,
      205,   13,   93,   24,   16,   24,   24,   60,   23,   27,
       27,   27,   46,   14,   46,   16,   24,   46,   13,   23,
       93,  149,   60,   13,   28,   28,   28,   24, 1127,   68,
       14,  149,   60,   61,   61,   14,   17,   17,   17,   78,
       27,   44,  112,   27,   68,   44,   17,   63,   61,   44,
      112,   66, 1127,   27,   78,   28,  221,   66,   28,   63,
       17,   63,   50,   59,   27,   66,   59,   17,   28,   17,
       17,   63,   92,   17,  145,  221,   50,   59,   92,   28,
       50,   59,   17,   59,   50,   69,   92,   17,  145,   50,

       62,   17,   18,   18,   18,   50,  168,   51,  145,  227,
       69,  168,   18,   51,  227,  233,   69,  152,  243,   67,
      233,   51,  243,   62,   62,   51,   18,  152,   67,   51,
       76,   76,   62,   18,   51,   18,   18,   67,   62,   18,
       51,   62,   67,   62, 3029,   76,   62,  241,   18,   98,
       98,   98,  241,   18,   99,   99,   99,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   25,   25,  153,   25,   70,   88,
       88,  162,  153,   25,   70,   25,  153,   25,  156,   25,
       25,  162,   70,  156,   88,  806,   70,   75,   25,   26,
       26,   75,   26,  156,   64,   64,   75,   79,   26,   75,
       26,   75,   26,  156,   26,   26,   75,   73,   73,   64,
      806,  232,   64,   26,   29,   64,   73,  252,   29,  170,

      232,   91,   91,  252,   79,   79,   95,   73,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  170,   95,  204,
       95,   29,   30,   74,   91,   91,   30,   79,   79, 1196,
       95,  106,  106,  106,  204,  217,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  215,   74,   74,   77,   30,
      234,   89,   89,  217,   74,   74,   77,   77, 1196,   94,
       94,   74,  234,   77,   74,  215,   89,   77,   94,   89,
      104,   74,   89,   96,   96,  103,  103,  115,  115,   94,
      245,  151,  104,  121,  104,  121,  155,  151,   96,  155,
      151, 3032,  245,  121,  104,  151,  155,  151,  103,  103,

      115,  115,  120,  220,  120,  127,  125,  125,  127,  121,
      125,  121,  120,  330,  330,  158,  127,  160,  125,  127,
      219,  125,  229,  220,  125,  127,  121,  125,  120,  124,
      120,  160,  124,  120,  120,  219,  121,  229,  121,  158,
      124,  160,  124,  124,  120,  124,  158,  158,  120,  124,
      120,  126,  124,  158,  126,  126,  158,  120,  122,  157,
      122,  128,  126,  158,  128,  126,  128,  157,  122, 3037,
      126,  126,  128,  157,  128,  128,  235,  129,  157,  136,
      129,  128,  131,  157,  122,  131,  122,  122,  129,  129,
      122,  129,  136,  131,  235,  136,  131,  129,  122,  553,

      136,  122,  131,  136,  224,  132,  136,  122,  132,  132,
      553,  136,  136,  122,  123,  133,  132,  258,  133,  132,
      133,  184,  184,  184,  224,  132,  133,  531,  133,  133,
      258,  139,  133,  231,  139,  133,  140,  231,  123,  140,
      531,  123,  139,  140,  140,  139,  123,  140,  231,  123,
      140,  139,  123, 3043,  140,  123,  140,  123,  123,  165,
      123,  130,  134,  134,  262,  264,  250,  134,  165,  148,
      148,  250,  141,  262,  264,  141,  134,  165,  134,  135,
      134,  134,  165,  141,  148,  130,  141,  148,  130,  130,
      148,  135,  141,  130,  148,  135,  135,  146,  225,  130,

      135,  185,  130,  185,  130,  138,  185,  130,  138,  135,
      542,  135,  225,  138,  135,  137,  138,  542,  138,  138,
      163,  146,  150,  138,  147,  138,  147,  147,  237,  146,
      150,  150,  163,  166,  163,  146,  147,  147,  146,  137,
      146,  150,  237,  146,  163,  146,  137,  137,  166,  183,
      183,  183,  836,  137,  166,  188,  137,  188,  137,  154,
      188,  137,  240,  137,  143,  143,  143,  154,  154,  230,
      257,  154,  159,  836,  143,  257,  240,  159,  154,  190,
      159,  190,  159,  159,  190,  167,  167,  159,  230,  191,
      143,  191,  143,  159,  191,  143,  161,  161,  167,  187,

      259,  187,  236,  161,  259,  183,  143,  161, 3045,  242,
      143,  174,  143,  161,  169,  169,  167,  236,  169,  143,
      144,  144,  144,  169,  242,  174,  169,  189,  216,  174,
      144,  239,  216,  174,  169,  187, 3068,  187,  174,  187,
      239,  187,  256,  187,  174,  189,  144,  189,  144,  192,
      244,  239,  192,  216,  253,  189,  200,  200,  200,  249,
      863,  256,  266,  144,  244,  275,  189,  189,  253,  200,
      244,  266,  261,  144,  249,  144,  206,  206,  206,  206,
      206,  206,  206,  192,  275,  192,  863,  192,  261,  192,
      263,  192,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  260,  260, 3072,  263,  201,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  251,  251,  265,  254,  202,
      268,  251,  260,  254,  267,  270,  271,  272,  273,  268,
      269,  251,  276,  287,  251,  251,  254,  265,  202,  269,
      277,  285,  267,  286,  271,  270,  273,  272,  287,  288,
      289,  276,  290,  297,  277,  285,  291,  286,  288,  289,
      291,  292,  293,  293,  293,  289,  290,  298,  313,  288,
      301,  291,  297,  401,  301,  302,  302,  302,  310,  292,
      314,  298,  310,  401,  317,  301,  317,  313,  319, 3074,
      320,  319,  320,  322,  314,  324,  322,  324,  325,  319,

      320,  325,  319,  532,  322,  324,  532,  322,  319,  325,
      512,  326,  325,  322,  326,  379,  320,  325,  325,  512,
      379,  324,  326,  324,  327,  326,  328,  327,  696,  328,
      379,  326,  404,  379,  379,  327,  408,  328,  327, 3077,
      328,  696,  404,  328,  327,  320,  328,  408,  327,  329,
      324,  331,  329,  332,  331,  465,  332,  408,  410,  465,
      329,  383,  331,  329,  332,  331,  383,  332,  410,  329,
      465,  331,  332,  332,  333,  334,  383,  333,  334,  383,
      383,  409,  411,  411,  409,  333,  334,  335,  333,  334,
      335,  409,  333,  807,  333,  334,  412,  335,  335,  336,

      337,  335,  336,  337,  515,  515,  412,  335,  536,  536,
      336,  337,  336,  336,  337,  338,  807,  407,  338,  336,
      337,  418,  407,  521,  551,  339,  338,  407,  339,  338,
      340,  418,  413,  340,  338,  338,  339,  413,  339,  339,
      551,  340,  413,  521,  340,  339,  339,  420,  341,  516,
      340,  341,  341,  342, 3079,  343,  342,  420,  343,  341,
      344,  516,  341,  344,  342,  517,  343,  342,  341,  343,
      517,  344,  416,  342,  344,  343,  345,  416,  344,  345,
      344,  346,  416,  347,  346,  528,  347,  345, 3091,  528,
      345,  347,  346,  507,  347,  346,  345,  347,  348,  349,

      348,  346,  349,  347,  529,  414,  421,  507,  348,  414,
      349,  415,  415,  349,  351,  414,  421,  351,  350,  349,
      507,  350,  415,  529,  348,  351,  348,  523,  351,  350,
      352,  348,  350,  352,  351,  350,  427,  353,  350,  427,
      353,  352,  518,  352,  352,  523,  427,  518,  353,  354,
      352,  353,  354,  348,  417,  417,  355,  353,  547,  355,
      354,  356,  356,  354,  419,  417,  356,  355,  357,  354,
      355,  357, 3026,  547,  419,  356,  355,  356,  358,  357,
      356,  358,  357,  357,  419,  428,  510,  510,  357,  358,
      359,  358,  358,  359,  360,  428,  422,  360,  358,  510,

      422,  359,  471, 3009,  359,  360,  422,  360,  360,  361,
      359,  471,  361,  361,  360,  430,  362,  471,  568,  362,
      361,  363,  541,  361,  363,  430,  568,  362,  364,  361,
      362,  364,  363,  520,  541,  363,  362,  527,  520,  364,
      365,  363,  364,  365,  366,  533,  424,  366,  364,  567,
     3007,  365,  424,  535,  365,  366,  367,  527,  366,  367,
      365,  567,  424,  368,  366,  533,  368,  367,  369,  367,
      367,  369,  574,  535,  368,  367,  367,  368,  370,  369,
      580,  370,  369,  368,  429,  429,  423,  580,  369,  370,
      371,  372,  370,  371,  372,  429,  543,  423,  370,  574,

      543,  371,  372,  371,  371,  372,  373,  423,  522,  373,
      371,  372,  426,  374,  522,  426,  374,  373,  375,  544,
      373,  375,  537,  544,  374,  426,  373,  374, 3006,  375,
      431,  544,  375,  374,  432,  432,  431,  434,  375,  377,
      537,  431,  377,  546,  377,  432,  431,  434,  546,  378,
      377,  549,  378,  377,  377,  438,  549,  377,  377,  377,
      378,  380, 2068,  378,  554,  438,  380,  381,  381,  378,
      382,  382,  381, 2068,  380,  382,  380,  381,  554,  380,
      380,  381,  435,  381,  433,  382,  381,  384,  382,  382,
      563,  384,  384,  435,  433,  385,  550,  878,  386,  563,

      385,  386,  384,  435,  433,  384,  384,  385,  387,  386,
      385,  387,  386,  385,  385,  388,  550,  439,  386,  387,
      388,  389,  387,  878,  570,  440,  389,  439,  387,  389,
      388,  441,  390,  388,  388,  440,  389,  390,  391,  389,
      389,  441,  570,  391,  392,  390,  391,  390,  447,  392,
      390,  390,  447,  391, 3003,  557,  391,  391,  447,  392,
      393,  437,  392,  392,  437,  393,  394,  444,  393,  557,
      579,  394,  395,  579,  437,  393,  444,  395,  393,  393,
      395,  394,  446,  394,  394,  394,  444,  395,  396, 3001,
      395,  395,  446,  396,  397,  446,  396,  445,  445,  397,

      398,  573,  446,  396,  448,  398,  396,  396,  445,  397,
      573,  399,  397,  397,  448,  398,  399,  398,  398,  398,
      400,  402,  402,  402,  448,  400,  399,  801,  801,  399,
      399,  402,  406,  406,  406,  400,  561,  400,  400,  400,
      436,  436,  406,  449,  555,  449,  436,  402,  443,  555,
      450,  436,  558,  443,  451,  449,  561,  558,  406,  453,
      406,  450,  443,  443,  552,  453,  443,  443,  451,  452,
      452,  450,  443,  552,  451,  453,  402,  455,  451,  452,
      454,  454,  457,  455,  456,  552,  560,  406,  457,  456,
      459,  454,  458,  455,  456,  458,  459,  460,  457,  461,

      560,  773,  458,  460,  461,  462,  459,  463,  462,  461,
      473,  464,  463,  460,  464,  462,  519,  463,  483,  483,
      483,  464,  519,  773,  473,  486, 2999,  486,  473,  491,
      486,  491,  473,  524,  491,  519,  492,  473,  524,  588,
      492,  492,  524,  473,  492,  494,  494,  494,  588,  492,
      495,  495,  495,  495,  495,  492,  562,  564,  494,  495,
      496,  496,  496,  496,  497,  497,  497,  559, 2997,  582,
      562,  564,  559,  496,  483,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  582,  500,  504,  572,  488,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  500,

      504,  572, 1092,  493,  499,  499,  499,  499,  499,  589,
     1092,  493,  500,  504,  548,  548,  493,  499,  500,  504,
      694,  694,  493,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  811,  694,  548,  589,  498,  503,  503,
      503,  503,  503,  566,  569,  872,  591,  566,  569,  581,
      498,  503,  591,  811,  581,  872,  498,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  761,  747, 2995,  602,
      502,  511,  511,  511,  511,  511,  511,  511,  602,  603,
      578,  583,  747,  502,  511,  761,  578,  700,  583,  502,

      505,  505,  505,  505,  505,  505,  505,  505,  505,  578,
      700,  583,  587,  587,  587,  608,  603,  608,  609,  610,
      609,  610,  611,  770,  611,  608,  810,  815,  609,  610,
      843,  815,  611,  843,  656,  810,  656,  657,  656,  657,
      587,  608,  770,  608,  609,  610,  609,  610,  611,  615,
      611,  615,  608,  612,  656,  612,  657,  657,  616,  615,
      616,  610,  617,  612,  617,  804,  821,  659,  616,  659,
      608,  821,  617,  609,  610,  615,  658,  611,  658,  612,
      804,  612,  612,  618,  616,  618,  616,  659,  617, 2992,
      617,  658,  619,  618,  619,  617,  658,  699,  616,  661,

      817,  661,  619,  699,  615,  620,  817,  620,  612,  618,
      663,  618,  663,  616,  618,  620,  699,  617,  619,  661,
      619,  695,  621,  663,  621,  619,  622,  623,  622,  623,
      663,  620,  621,  620,  695,  695,  622,  623,  618,  624,
     2991,  624,  768,  768,  768,  697,  857,  619,  621,  624,
      621,  857,  622,  623,  622,  623,  621,  697,  697,  622,
      620,  625,  626,  625,  626,  624,  664,  624,  664,  621,
      664,  625,  626,  820,  627,  623,  627,  621, 2987,  701,
      820,  622,  623,  660,  627,  660,  664,  625,  626,  625,
      626,  660,  701,  701,  624,  625,  628,  831,  628,  629,

      627,  629,  627,  660,  831,  703,  628,  627,  626,  629,
      630,  627,  630,  631,  828,  631,  625,  626,  703,  702,
      630,  702,  628,  631,  628,  629,  755,  629,  755,  627,
      874,  755,  828,  632,  702,  632,  630, 2969,  630,  631,
      874,  631,  665,  632,  665,  631,  633,  636,  633,  636,
      634,  628,  634,  635,  629,  635,  633,  636,  630,  632,
      634,  632,  665,  635,  704,  630,  706,  827,  631,  706,
     1134,  827,  633,  636,  633,  636,  634,  704,  634,  635,
      632,  635,  706,  637,  635,  637, 1134,  638,  632,  638,
      662,  634,  662,  637,  639,  636,  639,  638,  824,  705,

      662,  633,  636,  708,  639,  634,  705,  824,  635,  637,
      662,  637,  705,  638, 2967,  638,  708,  640,  638,  640,
      639,  667,  639,  667,  641,  667,  641,  640,  837,  642,
      643,  642,  643,  707,  641,  712,  830,  837,  637,  642,
      643,  667,  638,  640, 1078,  640,  707,  707,  712,  639,
      641, 1078,  641,  641,  830,  642,  643,  642,  643,  842,
      644,  645,  644,  645,  646,  640,  646,  647,  709,  647,
      644,  645,  640,  842,  646,  642,  668,  647,  668,  641,
      668,  709,  709,  847,  642,  643,  644,  645,  644,  645,
      646,  713,  646,  647,  838,  647,  668,  713,  648,  649,

      648,  649,  847,  650,  651,  650,  651,  647,  648,  649,
      713,  826,  838,  650,  651,  644,  645,  835,  835,  646,
      861, 2964,  647,  826,  648,  649,  648,  649,  710,  650,
      651,  650,  651,  710,  649,  650,  651,  652,  653,  652,
      653,  654, 1067,  654,  651,  861,  710,  652,  653, 2962,
      862,  654,  877,  648,  649,  666, 1067,  666,  650,  651,
      669,  823,  669,  652,  653,  652,  653,  654,  666,  654,
      670,  653,  670,  669,  671,  666,  671,  862,  880,  877,
      669,  823,  714,  672,  654,  672,  834,  671,  850,  670,
      670,  672,  652,  653,  671,  714,  654,  655,  673,  655,

      673,  674,  674,  672,  674,  880,  834,  655,  850, 2961,
      675,  673,  675,  675,  677,  860,  677,  678,  673,  678,
      678,  677,  674,  655,  860,  655,  655,  676,  655,  676,
      675,  679,  711,  679,  677,  698,  698,  678,  676,  698,
      680,  866,  680, 2960,  711,  711,  655,  676,  679,  698,
      866,  679,  655,  680,  683,  683,  683,  684,  684,  684,
      680,  685,  685,  685,  683,  853,  715,  684,  686,  686,
      686,  685,  715,  852,  689,  689,  689,  853,  686,  715,
      683, 2123,  683,  684,  689,  684,  717,  685,  717,  685,
      722,  683, 2123,  852,  686,  722,  686,  686,  716,  716,

      689,  717,  894,  894,  690,  690,  690,  868,  722,  683,
      722,  716,  684,  718,  690,  718,  685,  691,  691,  691,
      719,  718,  721,  686, 2954,  868,  719,  691,  718,  689,
      690,  721,  690,  720,  720,  721,  692,  692,  692,  719,
      723,  723,  724,  691,  690,  691,  692,  720,  725, 1271,
      691,  854,  727,  890,  723,  724,  724,  727,  725,  690,
      726,  725,  692,  726,  692,  727,  728,  729,  729,  692,
      730,  854,  691,  726,  728,  726,  731,  867, 1271,  728,
      890,  729,  734,  730,  731,  732,  732,  733,  733,  731,
      734,  692,  693,  693,  693,  734,  735,  867,  736,  732,

      737,  733,  693,  737,  738,  930,  736,  930,  739,  735,
      735,  736,  738,  737,  739,  869,  741,  738,  693,  740,
      693,  740,  741,  742,  745,  742,  693,  739,  743,  741,
      743,  870,  744,  869,  740, 2951,  742,  745,  748,  693,
      800,  800,  748,  743,  744,  744,  748,  693,  891,  870,
      993,  748,  993,  800,  765,  765,  765,  748,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  765,  756, 2949,
      871,  753,  756,  756,  891, 1020,  756,  775,  775,  775,
      775,  756,  871,  960,  960, 1020, 2928,  756,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  767,  767,

      767,  767,  764,  766,  766,  766,  766,  766, 1068, 1074,
      764,  767,  766, 1021, 1074,  764, 2924, 1068, 1103, 1061,
     1071,  764,  769,  769,  769,  769,  769,  769,  769,  769,
      769, 1021, 1061, 1103, 1071,  769,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  779,  780,  796, 1087,  777,
      778,  778,  778,  778,  778, 1070, 1072, 1072, 1128,  779,
      780,  796,  777,  778, 1069, 1069, 1087, 1070,  777, 1069,
     1128, 1073,  779,  780,  796,  782,  783,  784,  779,  780,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  782,

      783,  784, 1073,  781,  787,  787,  787,  787,  787, 1079,
     1079, 2920,  782,  783,  784, 1080, 1080,  787,  782,  783,
      784,  788,  781,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  789, 1086,  788,  865,  786,  792,  865,
     1086,  793, 1075,  794, 1102, 1043, 1088,  789,  788,  865,
      786, 1088,  792, 1043,  788,  793,  786,  794, 1043, 1102,
      789, 1041, 1075, 1168, 1043,  792,  789, 1102,  793, 1089,
      794,  792, 1037, 1168,  793, 1041,  794,  802,  802,  802,
      802,  802,  802,  802, 1083, 1136, 1037, 1083, 1041, 1089,
      802,  803,  803,  803,  803,  803,  803,  803,  805, 1037,

      805, 1136,  805,  805,  895, 1037,  895,  805, 1093, 1051,
      884,  805,  805, 1093,  895,  884,  805,  805,  818,  818,
     1057,  818, 1051, 2915,  818,  884, 1099,  818, 1051,  884,
      895, 1099,  895, 1057,  818, 1085,  818,  818,  818, 1057,
      818,  818,  839, 1095,  839, 1022,  839,  895, 1113, 1022,
     1085,  839, 1095, 1022,  839, 2593, 1085, 1113, 1022,  895,
      839,  839,  839,  839, 1022,  839,  855,  855,  873,  855,
      873,  855,  873,  855,  873,  855,  873, 1091, 1091, 1096,
     1096,  855,  873,  896, 2593,  896,  855,  873,  876,  898,
      876,  898,  876,  896,  876,  900,  876,  900,  901,  898,

      901, 1114,  876,  901,  902,  900,  902,  876,  901,  896,
     1114,  896, 2914, 1039,  902,  898, 1114,  898, 1084, 1084,
     1058,  900, 1100, 1100,  901, 1263,  901, 1039, 1104, 1263,
      902, 1101,  902, 1084, 1058,  903, 1101,  903,  896,  897,
     1039,  897,  898, 1062,  898,  903, 1039, 1058, 1104,  897,
      900,  900, 2906,  901, 1106, 1117,  904, 1062,  904,  902,
     1105,  903, 1117,  903, 1116,  897,  904,  897, 1106,  897,
     1062,  897,  897,  905, 1107,  905,  897,  903, 1105, 1116,
      897,  897,  904,  905,  904,  897,  897,  906, 1107,  906,
      903, 1090, 1108,  907,  897,  907,  908,  906,  908,  905,

     1110,  905, 1148,  907, 1265, 1118,  908, 1108, 1265, 1090,
      905,  904, 1033,  906, 1110,  906, 1090, 1108, 1112,  907,
     1148,  907,  908, 1112,  908, 1118, 1033,  909,  905,  909,
      910,  911,  910,  911, 1033,  906, 1141,  909, 1120, 1033,
      910,  911,  906, 1141,  912, 1033,  912, 1120,  907, 1125,
     1046,  908, 1125,  909,  912,  909,  910,  911,  910,  911,
     2832,  914,  910,  914, 1046,  916, 1119,  916, 2832, 1126,
      912,  914,  912, 1077, 1077,  916, 1129, 1046,  912, 1330,
     1133, 1119,  909, 1046, 1126,  910,  911,  914, 1130,  914,
     1129,  916, 1077,  916, 1133, 1143, 1143, 1330,  916,  912,

      913,  913,  913,  913,  913,  913, 1077, 1149,  913, 1130,
     1149, 1151,  913,  913, 1135,  913,  914,  913,  913,  913,
      916,  913,  913,  915,  917,  915,  917,  918,  919,  918,
      919, 1131, 1142,  915,  917, 1151, 1131,  918,  919, 2905,
     1135, 1142, 1170, 1170, 1045, 1045, 1045, 1045, 1045,  915,
      917,  915,  917,  918,  919,  918,  919, 1045,  915,  920,
      921,  920,  921, 1145,  922,  919,  922, 1144, 1152,  920,
      921,  923, 1145,  923,  922,  918, 1150, 1166,  915,  917,
     1152,  923,  918,  919, 1154,  920,  921,  920,  921, 1144,
      922, 1150,  922, 1166, 2874, 1146,  924,  923,  924,  923,

     1146,  920, 1153,  923,  922, 1154,  924,  925,  926,  925,
      926,  927, 1180,  927,  920,  921, 1153,  925,  926,  922,
     1155,  927,  924, 1147,  924, 1155,  923, 1267, 1180, 1165,
      928, 1267,  928,  925,  926,  925,  926,  927, 1147,  927,
      928, 1111,  924,  929, 1147,  929,  927,  931, 1179,  931,
     1111,  924, 1400,  929,  926, 1165,  928,  931,  928, 1111,
     1195, 1261,  925,  926, 1111, 1261,  927, 1400,  932,  929,
      932,  929, 1261,  931, 1179,  931,  931,  933,  932,  933,
      934,  935,  934,  935, 1270,  928, 1054,  933, 1197, 1197,
      934,  935, 1109, 1109,  932, 1274,  932, 2873,  929, 1274,

     1054, 1109,  931,  933, 1195,  933,  934,  935,  934,  935,
     1242, 1224, 1109, 1054,  933, 1109,  937,  932,  937, 1054,
     1272, 1272,  934,  932, 1242, 1224,  937,  935, 1270, 2872,
     1262, 1343,  933, 1224, 1262,  934,  935,  936,  938,  936,
      938, 1264,  937, 1262,  937, 1264, 1331,  936,  938,  965,
      965,  965,  939, 1266,  939, 1331, 1314, 1266, 1343,  965,
     1233, 1264,  939,  936,  938,  936,  938,  936, 1233,  936,
     1314,  937, 1266, 1233,  936,  965, 1381,  936,  939, 1233,
      939, 1381, 1233,  936,  936,  936,  936,  940,  936,  940,
     1380, 1378,  936,  938,  939, 1234,  941,  940,  941,  942,

      943,  942,  943, 1234,  965,  965,  941,  939, 1380,  942,
      943, 1378, 1234,  940, 1234,  940, 1276, 1234,  940,  944,
     1276,  944,  941, 1379,  941,  942,  943,  942,  943,  944,
      945,  946,  945,  946,  947, 1277,  947, 1385, 1385, 1277,
      945,  946,  940, 1379,  947,  944, 1273,  944, 1375, 1279,
     1273,  941, 1273, 1279,  942,  943,  945,  946,  945,  946,
      947, 1375,  947, 1279, 1406,  948,  944,  948,  949,  950,
      949,  950, 1281, 1406,  944,  948, 1281, 1281,  949,  950,
     1283, 2870,  947, 1286, 1283,  945,  946, 1286, 1278,  947,
     1278,  948, 1278,  948,  949,  950,  949,  950, 1441, 1115,

      951, 1288,  951, 1115, 1441, 1288, 1403, 1403, 1115,  950,
      951, 1115,  953,  952,  953,  952,  949,  952, 1115,  952,
      948,  952,  953,  949,  950, 1282,  951,  952,  951, 1282,
      952,  954,  952,  954,  955,  956,  955,  956,  953, 1289,
      953,  954, 1282, 1289,  955,  956, 1284, 1287,  951, 1291,
     1284, 1287, 2869, 1291, 1287,  951,  957,  954,  957,  954,
      955,  956,  955,  956,  954, 1284,  957,  953,  958, 2866,
      958,  961,  961,  961, 1391,  966,  966,  966,  958, 1358,
      966,  961,  957, 1235,  957,  966,  954, 1235, 1292,  955,
      956, 1235, 1292,  957,  958, 1391,  958,  961, 1358,  961,

     1293,  966, 1235,  966, 1293, 1235, 1376, 1408,  963,  963,
      963,  957, 1457, 1236,  961,  967,  967,  967,  963, 1376,
     1294, 1236, 1408,  958, 1294,  967,  961,  962,  962,  962,
      966, 1382, 1236, 1457,  963, 1236,  963,  962, 1295, 1453,
     1296,  967, 1295,  967, 1296, 1053, 1053, 1053, 1053, 1053,
     1307, 1382, 1299,  962, 1307,  962, 1299,  962, 1053,  962,
      962,  963, 1453,  963,  962,  968,  968,  968,  962,  962,
      967, 1299, 2865,  962,  962,  968,  969,  969,  969,  970,
      970,  970,  962, 1300, 1285, 1383,  969, 1300, 1285,  970,
     1316,  968, 1383,  968, 1316, 1290,  971,  971,  971, 1290,

     1300, 1285,  969, 1290,  969,  970,  971,  970, 1285,  972,
      972,  972, 2864,  969, 1395,  973,  973,  973, 1297,  972,
      968, 1334,  971, 1334,  971,  973, 1334,  970,  974,  974,
      974,  969, 1297, 1395,  970,  972, 1417,  972,  974, 1417,
     1297,  973, 1182,  973, 1182,  975,  975,  975,  976,  976,
      976,  971, 1182, 1308,  974,  975,  974, 1308,  976, 1301,
      974, 1308, 1404, 1301,  972,  978,  978,  978, 1182, 1394,
      973,  975, 1301,  975,  976,  978,  976, 1302, 1404, 1428,
     1237, 1302,  976,  974, 1428,  980,  980,  980, 1237, 1394,
     1302,  978, 1312,  978, 1237,  980, 1312, 1182, 1312, 1237,

      975, 1392, 1237,  976,  977,  977,  977,  977,  977,  977,
     1280,  980,  977,  980, 1280, 1392,  977,  977,  980,  977,
      978,  977,  977,  977, 1280,  977,  977,  979,  979,  979,
     1280,  981,  981,  981, 1317, 1298, 1393,  979, 1317, 1298,
      980,  981,  982,  982,  982, 1329,  983,  983,  983, 1298,
     1393, 1386,  982,  979, 1305,  979,  983,  981, 1305,  981,
     1329, 1410,  979,  984,  984,  984, 1329, 1305,  982, 1386,
      982, 1311,  983,  984,  983, 1311, 1732,  985,  985,  985,
     1241, 1410,  979,  983, 1396, 1311,  981,  985, 1241,  984,
      982,  984, 1420, 1384,  986,  986,  986,  982, 1396, 1241,

     1732,  983, 1241,  985,  986,  985, 1384, 1420, 1313,  987,
      987,  987, 1313,  988,  988,  988, 1397,  985,  984,  987,
      986, 1318,  986,  988, 1434, 1318,  986, 1313,  989,  989,
      989, 2862,  985, 1434, 1397,  987, 1319,  987,  989,  988,
     1319,  988, 1315,  990,  990,  990, 1315, 1323, 1326,  986,
     1315, 1323, 1326,  990,  989,  987,  989, 1421, 1323, 1321,
      991,  991,  991, 1321,  987,  992,  992,  992,  988,  990,
      991,  990, 1327, 1321,  989,  992, 1327, 1421,  990,  994,
      994,  994, 1398,  989, 1411, 1188,  991, 1188,  991,  994,
     1320,  992, 1320,  992, 1320, 1188, 1398, 1411,  990,  995,

      995,  995,  996,  996,  996,  994, 1322,  994,  994,  995,
     1322, 1188,  996, 1188, 1188,  991,  997,  997,  997, 2861,
      992,  999,  999,  999, 1239,  995,  997,  995,  996, 1322,
      996,  999, 1239, 1243,  994, 1000, 1000, 1000, 1239,  996,
     1188, 1243,  997, 1239,  997, 1000, 1239,  999,  995,  999,
     1430, 1430, 1243, 1450,  995, 1243, 1244,  996, 1460, 1460,
     1450, 1000,  997, 1000, 1244, 1405, 1324, 1003, 1003, 1003,
     1324,  997,  998,  998,  998, 1244,  999, 1003, 1244, 1324,
     1413, 1325,  998, 1405, 1451, 1325, 2859, 1001, 1001, 1001,
     1000, 1451, 1328, 1003, 1413, 1003, 1328, 1001,  998, 1409,

      998, 1325,  998, 1344,  998, 1328, 1002, 1002, 1002,  998,
     1423, 1409,  998, 1001, 1675, 1001, 1002, 1344,  998,  998,
      998,  998, 1003,  998, 1423, 2857, 1675,  998, 1345, 1001,
     1344, 1433, 1002, 1356, 1002, 1433, 1345, 1002, 1004, 1004,
     1004, 1345, 1001, 1005, 1005, 1005, 1356, 1345, 1004, 1006,
     1006, 1006, 1356, 1005, 1240, 1007, 1007, 1007, 1422, 1006,
     1240, 1002, 1240, 1681, 1004, 1007, 1004, 1681, 1303, 1005,
     1436, 1005, 1303, 1240, 2830, 1006, 1240, 1006, 1422, 1436,
     1306, 1007, 1303, 1007, 1306, 1008, 1008, 1008, 1306, 1009,
     1009, 1009, 1303, 1004, 1414, 1008, 1006, 1306, 1005, 1009,

     1402, 1432, 1306, 1684, 1006, 1402, 1010, 1010, 1010, 1684,
     1007, 1008, 1414, 1008, 1432, 1009, 1010, 1009, 1402, 1011,
     1011, 1011, 1346, 1012, 1012, 1012, 1257, 1257, 1257, 1011,
     1346, 1245, 1010, 1012, 1010, 1346, 1257, 1009, 1720, 1245,
     1008, 1346, 1720, 1401, 1009, 1011, 1426, 1011, 2349, 1012,
     1245, 1012, 1257, 1245, 1013, 1013, 1013, 1246, 1194, 1401,
     1194, 1010, 1401, 1012, 1013, 1246, 1426, 1011, 1194, 1014,
     1425, 1014, 2821, 1014, 1011, 1014, 1246, 1014, 1012, 1246,
     1013, 1257, 1013, 1014, 1194, 1425, 1014, 1427, 1014, 1015,
     1015, 1015, 1429, 1016, 1016, 1016, 1017, 1017, 1017, 1015,

     2349, 1427, 1013, 1016, 1371, 1438, 1017, 1429, 2819, 1013,
     1018, 1018, 1018, 1194, 1194, 1015, 1431, 1015, 1371, 1016,
     1018, 1016, 1017, 1438, 1017, 1437, 1016, 1019, 1019, 1019,
     1431, 1371, 1435, 1482, 1437, 2819, 1018, 1019, 1018, 1247,
     1184, 1248, 1184, 1248, 1015, 2615, 1435, 1247, 1016, 1248,
     1184, 1017, 1183, 1019, 1183, 1019, 1482, 1357, 1247, 1442,
     1248, 1247, 1183, 1248, 1019, 1018, 1184, 1309, 1184, 1443,
     1357, 1309, 1443, 1445, 2615, 1309, 1357, 1184, 1183, 1442,
     1183, 1309, 1019, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1444, 1445, 1183, 1184, 1030, 1031, 1031, 1031,

     1031, 1031, 1031, 1031, 1031, 1031, 1444, 1183, 1449, 1351,
     1031, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1726, 1449, 1726, 1351, 1032, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1238, 1351, 1310, 1238, 1044,
     1310, 1310, 1351, 1238, 1465, 1310, 1238, 1465, 1310, 1698,
     1698, 1669, 1044, 1238, 1238, 1310, 1669, 1238, 1044, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1366, 1446,
     1367, 1595, 1052, 1458, 1595, 1748, 1185, 1748, 1185, 2817,
     1186, 1366, 1186, 1367, 1446, 1052, 1185, 1366, 1458, 1367,

     1186, 1052, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1187, 1185, 1187, 1185, 1185, 1186, 2807, 1186, 1185,
     1463, 1187, 1189, 1190, 1189, 1190, 1191, 1355, 1191, 1464,
     1186, 1447, 1189, 1190, 1463, 1355, 1191, 1187, 1683, 1187,
     1355, 1185, 1368, 1683, 1464, 1186, 1355, 1447, 1189, 1190,
     1189, 1190, 1191, 1187, 1191, 1368, 1190, 1192, 1198, 1192,
     1198, 1368, 1199, 1200, 1199, 1200, 1187, 1192, 1198, 1459,
     1688, 1189, 1199, 1200, 1191, 1688, 1448, 1189, 1190, 1505,
     2804, 1191, 1459, 1192, 1198, 1192, 1198, 1461, 1199, 1200,
     1199, 1200, 1200, 1201, 1452, 1201, 1448, 1199, 1202, 1203,

     1202, 1203, 1466, 1201, 1204, 1468, 1204, 1461, 1202, 1203,
     1452, 2824, 1192, 1198, 1204, 1471, 1466, 1199, 1200, 1201,
     1468, 1201, 1201, 1505, 1202, 1203, 1202, 1203, 1471, 1205,
     1204, 1205, 1204, 1374, 1206, 1204, 1206, 1695, 2824, 1205,
     1207, 1208, 1207, 1208, 1206, 1467, 1374, 1469, 1201, 1695,
     1207, 1208, 1374, 1202, 1203, 1205, 1249, 1205, 1205, 1204,
     1206, 1484, 1206, 1469, 1249, 1467, 1207, 1208, 1207, 1208,
     1249, 1209, 1205, 1209, 1207, 1249, 2802, 1206, 1249, 1484,
     1210, 1209, 1210, 1206, 1205, 1598, 1493, 1208, 1598, 1206,
     1210, 1211, 1212, 1211, 1212, 1207, 1208, 1209, 1579, 1209,

     1478, 1211, 1212, 1213, 1209, 1213, 1210, 1470, 1210, 1493,
     1642, 2798, 1214, 1213, 1214, 1643, 1478, 1211, 1212, 1211,
     1212, 1212, 1214, 1215, 1642, 1215, 1209, 1470, 1210, 1213,
     1643, 1213, 1481, 1215, 1492, 1210, 1687, 1211, 1214, 1213,
     1214, 2796, 1579, 1687, 1211, 1214, 1211, 1212, 1481, 1215,
     1492, 1215, 1649, 1216, 1217, 1216, 1217, 1644, 1213, 1218,
     1219, 1218, 1219, 1216, 1217, 1649, 1220, 1214, 1220, 1218,
     1219, 1350, 1350, 1350, 1350, 1350, 1220, 1644, 1215, 1216,
     1217, 1216, 1217, 1217, 1350, 1218, 1219, 1218, 1219, 1352,
     1216, 1221, 1220, 1221, 1220, 1594, 1670, 1222, 1662, 1222,

     2786, 1221, 1223, 1352, 1223, 1670, 1673, 1222, 1216, 1217,
     1594, 1662, 1223, 1594, 1218, 1219, 1352, 1221, 1671, 1221,
     1673, 1220, 1352, 1222, 1221, 1222, 1222, 1225, 1223, 1225,
     1223, 1671, 1226, 1603, 1226, 1223, 1603, 1225, 1227, 1228,
     1227, 1228, 1226, 1600, 1597, 1679, 1221, 1600, 1227, 1228,
     1600, 1597, 1222, 1225, 1597, 1225, 1700, 1223, 1226, 1596,
     1226, 1596, 1596, 1679, 1227, 1228, 1227, 1228, 1700, 1229,
     1225, 1229, 1604, 1230, 1604, 1230, 1231, 1604, 1231, 1229,
     1226, 1228, 1225, 1230, 1227, 1680, 1231, 1226, 1250, 1605,
     1929, 1605, 1605, 1227, 1228, 1229, 1250, 1229, 1251, 1230,

     1606, 1230, 1231, 1606, 1231, 1680, 1251, 1250, 1252, 1251,
     1250, 1250, 1929, 1703, 1255, 1230, 1252, 1251, 1253, 1231,
     1251, 1252, 1255, 2670, 1229, 1703, 1253, 1252, 1230, 1231,
     1252, 1231, 1232, 1255, 1232, 1254, 1255, 1253, 1253, 1254,
     1253, 1601, 1232, 1254, 1601, 1601, 1258, 1258, 1258, 1354,
     1607, 1256, 2670, 1607, 1254, 1608, 1258, 1254, 1232, 1256,
     1232, 1232, 2783, 1354, 1256, 1259, 1259, 1259, 1608, 1232,
     1256, 1608, 1258, 1256, 1258, 1259, 1354, 1599, 1599, 2781,
     1232, 1599, 1354, 1232, 1269, 1269, 1269, 1232, 1258, 1602,
     1724, 1259, 1602, 1259, 1269, 1602, 1724, 1690, 1275, 1275,

     1275, 1258, 1259, 1361, 1361, 1361, 1361, 1361, 1275, 1609,
     1269, 1304, 1609, 1690, 1610, 1304, 1361, 1610, 1362, 1304,
     1259, 1260, 1260, 1260, 1275, 2780, 1275, 1275, 1363, 1365,
     1304, 1260, 1362, 1304, 1611, 1611, 1712, 1689, 1611, 1269,
     1269, 1615, 1363, 1365, 1615, 1362, 1593, 1260, 1712, 1260,
     1260, 1362, 1689, 1275, 1260, 1363, 1365, 1593, 2763, 1593,
     1593, 1363, 1365, 1612, 1625, 1613, 1612, 1612, 1613, 1613,
     1614, 1625, 1614, 1692, 1625, 1614, 1260, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 2162, 1692, 2162, 1619,
     1335, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,

     1619, 1696, 1624, 1619, 1337, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1624, 1696, 2760, 1624, 1339, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1676,
     1616, 1616, 1617, 1349, 1616, 1617, 1617, 1618, 1676, 1618,
     1682, 1494, 1618, 1494, 1620, 1620, 1349, 1621, 1620, 1682,
     1706, 1494, 1349, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1621, 1693, 1729, 1621, 1353, 1494, 1693, 1494,
     1706, 1627, 1622, 1495, 1622, 1495, 1623, 1622, 1627, 1623,
     1729, 1627, 1623, 1495, 1650, 1353, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1494, 1650, 1657, 1495,

     1360, 1495, 1628, 1650, 1496, 1497, 1496, 1497, 1498, 1628,
     1498, 1657, 1628, 1360, 1496, 1497, 1911, 1657, 1498, 1360,
     1626, 1495, 1626, 1630, 1691, 1626, 1630, 1499, 1495, 1499,
     1496, 1497, 1496, 1497, 1498, 1911, 1498, 1499, 1500, 1631,
     1500, 1498, 1631, 1716, 1501, 1691, 1501, 1629, 1500, 1629,
     1629, 1497, 1496, 1499, 1501, 1499, 1641, 1716, 1633, 1496,
     1497, 1633, 1633, 1498, 1500, 1641, 1500, 2758, 1641, 1502,
     1501, 1502, 1501, 1500, 1503, 1499, 1503, 1632, 1508, 1502,
     1508, 1509, 1499, 1509, 1503, 1501, 1686, 1632, 1508, 1686,
     1632, 1509, 1634, 1500, 1701, 1502, 1702, 1502, 1502, 1501,

     1503, 1702, 1503, 1701, 1508, 1634, 1508, 1509, 1634, 1509,
     1722, 1510, 1511, 1510, 1511, 1512, 1513, 1512, 1513, 1722,
     1503, 1510, 1511, 1509, 1502, 1512, 1513, 1508, 1640, 1503,
     1635, 1640, 1635, 1508, 1640, 1635, 1509, 1510, 1511, 1510,
     1511, 1512, 1513, 1512, 1513, 1704, 1514, 1515, 1514, 1515,
     1704, 1636, 2757, 1510, 1636, 1636, 1514, 1515, 1513, 1516,
     1511, 1516, 1512, 1638, 1637, 1637, 1510, 1511, 1637, 1516,
     1512, 1513, 1514, 1515, 1514, 1515, 1710, 1710, 1517, 1638,
     1517, 1518, 1638, 1518, 1519, 1516, 1519, 1516, 1517, 1515,
     1705, 1518, 1514, 1639, 1519, 1705, 1639, 1639, 1520, 1709,

     1520, 1514, 1515, 1521, 1517, 1521, 1517, 1518, 1520, 1518,
     1519, 2641, 1519, 1521, 1516, 1714, 1707, 1519, 1723, 1709,
     1714, 1517, 2641, 1723, 1520, 1518, 1520, 1520, 1518, 1521,
     1519, 1521, 1653, 1517, 1707, 1522, 1518, 1522, 1523, 1519,
     1523, 1524, 1525, 1524, 1525, 1522, 1653, 1521, 1523, 1725,
     1746, 1524, 1525, 1520, 1725, 1711, 1746, 1658, 1521, 1653,
     1713, 1522, 1728, 1522, 1523, 1653, 1523, 1524, 1525, 1524,
     1525, 1658, 1526, 1711, 1526, 1523, 1527, 1528, 1527, 1528,
     1713, 1522, 1526, 1728, 1658, 1525, 1527, 1528, 1660, 1529,
     1522, 1529, 1718, 1523, 2754, 1661, 1524, 1525, 1526, 1529,

     1526, 1660, 1527, 1528, 1527, 1528, 1718, 1660, 1661, 1530,
     1727, 1530, 1526, 1717, 1661, 1529, 1744, 1529, 1528, 1530,
     1531, 1655, 1531, 1744, 1527, 1727, 1532, 1526, 1532, 1655,
     1531, 1527, 1528, 1717, 1655, 1530, 1532, 1530, 1734, 1533,
     1655, 1533, 1656, 1534, 1529, 1534, 1531, 1730, 1531, 1533,
     1656, 1530, 1532, 1534, 1532, 1656, 2739, 1666, 1535, 1719,
     1535, 1656, 1764, 1730, 1530, 1533, 1531, 1533, 1535, 1534,
     1666, 1534, 1738, 1719, 1534, 1531, 1666, 1536, 1537, 1536,
     1537, 1532, 1667, 1538, 1535, 1538, 1535, 1536, 1537, 1539,
     1738, 1539, 1734, 1538, 1533, 1667, 1733, 2727, 1534, 1539,

     1540, 1667, 1540, 1536, 1537, 1536, 1537, 1936, 1936, 1538,
     1540, 1538, 1741, 1535, 1749, 1539, 1764, 1539, 1745, 1733,
     1541, 1537, 1541, 1745, 1741, 1542, 1540, 1542, 1540, 1749,
     1541, 1538, 1536, 1537, 1742, 1542, 2721, 1539, 1538, 1543,
     1739, 1543, 1540, 1663, 1539, 1751, 1541, 1752, 1541, 1543,
     1544, 1542, 1544, 1542, 1739, 1540, 1545, 1663, 1545, 1742,
     1544, 1751, 1547, 1752, 1547, 1543, 1545, 1543, 1542, 1546,
     1663, 1546, 1547, 1763, 1743, 1541, 1544, 1743, 1544, 1546,
     1542, 1747, 1545, 1772, 1545, 1782, 1747, 1543, 1547, 1545,
     1547, 1547, 1544, 1771, 1543, 1546, 1763, 1546, 1750, 1548,

     1838, 1548, 1930, 1838, 1549, 1544, 1549, 1930, 1550, 1548,
     1550, 1545, 1546, 1784, 1549, 1904, 1771, 1547, 1550, 1750,
     1847, 1551, 1904, 1551, 1546, 1548, 1907, 1548, 1840, 1782,
     1549, 1551, 1549, 2718, 1550, 1840, 1550, 1772, 1840, 1907,
     1550, 1548, 1552, 1849, 1552, 1549, 1553, 1551, 1553, 1551,
     2716, 1554, 1552, 1554, 1548, 1839, 1553, 1784, 1551, 1549,
     1905, 1554, 1931, 1550, 1847, 1555, 1839, 1555, 1552, 1839,
     1552, 1931, 1553, 1945, 1553, 1555, 1551, 1554, 1942, 1554,
     1699, 1699, 1699, 1553, 1552, 1905, 1842, 1849, 1554, 1842,
     1556, 1555, 1556, 1555, 1945, 1783, 1783, 1552, 1942, 2468,

     1556, 1553, 1557, 1558, 1557, 1558, 1554, 1559, 1699, 1559,
     1941, 1555, 1557, 1558, 1908, 2468, 1556, 1559, 1556, 1941,
     1555, 1843, 1560, 1843, 1560, 1926, 1843, 1908, 1557, 1558,
     1557, 1558, 1560, 1559, 1927, 1559, 1939, 1558, 1926, 1561,
     1783, 1561, 1562, 1844, 1562, 1556, 1844, 1927, 1560, 1561,
     1560, 1939, 1562, 1560, 1564, 1559, 1564, 1557, 1558, 1563,
     1841, 1563, 1559, 1841, 1564, 1561, 1841, 1561, 1562, 1563,
     1562, 1856, 1845, 1565, 1856, 1565, 1845, 1560, 2800, 1845,
     1564, 1561, 1564, 1565, 1956, 1563, 1846, 1563, 2800, 1850,
     1562, 1850, 1850, 1846, 1561, 1950, 1846, 1562, 1564, 1565,

     1950, 1565, 1563, 1566, 1956, 1566, 1567, 1852, 1567, 1564,
     1568, 1568, 1568, 1566, 1563, 2715, 1567, 1848, 1848, 1852,
     1568, 1565, 1852, 1569, 1569, 1569, 1953, 1943, 1565, 1566,
     1853, 1566, 1567, 1569, 1567, 1953, 1568, 1853, 1568, 1851,
     1853, 1567, 1851, 1851, 1566, 1943, 1570, 1570, 1570, 1569,
     1933, 1569, 1958, 1571, 1571, 1571, 1570, 1861, 1566, 1854,
     1861, 1567, 1848, 1571, 1933, 1568, 1978, 1572, 1572, 1572,
     1854, 1569, 1570, 1854, 1570, 1958, 1857, 1572, 1569, 1571,
     1862, 1571, 1955, 1862, 1978, 1862, 1573, 1573, 1573, 1857,
     1944, 1944, 1857, 1572, 1570, 1572, 1573, 1977, 2714, 1571,

     1572, 1570, 1909, 1574, 1574, 1574, 1977, 1955, 1571, 1575,
     1575, 1575, 1573, 1574, 1573, 1909, 1576, 1576, 1576, 1575,
     2707, 1909, 1572, 1577, 1577, 1577, 1576, 1858, 1962, 1574,
     1855, 1574, 1962, 1577, 1573, 1575, 1858, 1575, 1574, 1858,
     1855, 1573, 1576, 1855, 1576, 1576, 1582, 1582, 1582, 1577,
     1575, 1577, 1865, 1860, 1860, 1865, 1582, 1860, 1574, 1965,
     1583, 1583, 1583, 1965, 1575, 1584, 1584, 1584, 1975, 1577,
     1583, 1576, 1582, 1859, 1582, 1584, 1870, 2703, 1577, 1870,
     1585, 1585, 1585, 1975, 1859, 1866, 1583, 1859, 1583, 1866,
     1585, 1584, 1866, 1584, 2686, 1582, 1652, 1652, 1652, 1652,

     1652, 1582, 1583, 1586, 1586, 1586, 1585, 1584, 1585, 1652,
     1964, 1879, 1969, 1586, 1879, 1583, 1971, 1587, 1587, 1587,
     1584, 1910, 1964, 1588, 1588, 1588, 1972, 1587, 1585, 1586,
     1864, 1586, 1969, 1588, 1910, 1585, 1971, 1589, 1589, 1589,
     1910, 1864, 2806, 1587, 1864, 1587, 1972, 1589, 1948, 1588,
     1586, 1588, 2806, 1974, 1590, 1590, 1590, 1974, 1586, 1587,
     1591, 1591, 1591, 1589, 1590, 1589, 1863, 1948, 1863, 1588,
     1591, 1863, 1587, 1773, 1774, 1773, 1774, 1868, 1588, 1589,
     1590, 1985, 1590, 1773, 1774, 1775, 1591, 1775, 1591, 1867,
     1869, 1867, 1589, 1868, 1867, 1775, 1868, 1979, 1979, 1773,

     1774, 1773, 1774, 1591, 1776, 1869, 1776, 1774, 1869, 1590,
     1777, 1775, 1777, 1775, 1776, 1591, 1592, 1592, 1592, 1995,
     1777, 1877, 1775, 2667, 1877, 1877, 1592, 1871, 1773, 1774,
     1776, 1871, 1776, 1981, 1871, 1985, 1777, 1995, 1777, 1872,
     1775, 1778, 1592, 1778, 1592, 1776, 1872, 1980, 1874, 1872,
     1873, 1778, 1874, 1981, 1886, 1874, 1779, 1886, 1779, 1776,
     1592, 1873, 1952, 1592, 1873, 1777, 1779, 1778, 1980, 1778,
     1986, 1592, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1952, 1779, 1778, 1779, 1646, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1986, 1778, 2661, 1875, 1647,

     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1875,
     1982, 1779, 1875, 1648, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1990, 1990, 1876, 1878, 1651, 1878,
     1878, 1982, 1780, 1781, 1780, 1781, 1785, 1876, 1785, 2339,
     1876, 1651, 1780, 1781, 1919, 2339, 1785, 1651, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1919, 1780, 1781,
     1780, 1781, 1785, 1919, 1785, 1881, 1786, 1787, 1786, 1787,
     1781, 1880, 1780, 1984, 1880, 1880, 1786, 1787, 1976, 1788,
     1881, 1788, 1785, 1881, 1954, 1954, 1954, 1780, 1781, 1788,
     2660, 1785, 1786, 1787, 1786, 1787, 1984, 1976, 1789, 1787,

     1789, 1790, 1791, 1790, 1791, 1788, 1884, 1788, 1789, 1884,
     1884, 1790, 1791, 1792, 1786, 1792, 1788, 1882, 2689, 1882,
     1882, 1786, 1787, 1792, 1789, 1998, 1789, 1790, 1791, 1790,
     1791, 1789, 1895, 1883, 1788, 1790, 1793, 1883, 1793, 1792,
     1883, 1792, 1895, 1998, 1792, 1895, 1793, 2689, 1794, 1795,
     1794, 1795, 1885, 1789, 1996, 2656, 1790, 1791, 1794, 1795,
     1997, 2047, 1793, 1885, 1793, 2047, 1885, 1891, 1792, 1997,
     1796, 1793, 1796, 1996, 1794, 1795, 1794, 1795, 2000, 1891,
     1796, 1794, 1891, 1797, 1798, 1797, 1798, 1799, 1920, 1799,
     2014, 1793, 1795, 1797, 1798, 2652, 1796, 1799, 1796, 2000,

     1887, 1920, 1887, 1794, 1795, 1887, 2134, 1920, 1994, 1797,
     1798, 1797, 1798, 1799, 1796, 1799, 2001, 1800, 2102, 1800,
     1799, 1801, 2102, 1801, 2134, 1796, 1798, 1800, 1994, 2002,
     1888, 1801, 1797, 1888, 1888, 1889, 2001, 1889, 1797, 1798,
     1889, 1892, 1799, 1800, 2014, 1800, 1890, 1801, 1890, 1801,
     2002, 1890, 1802, 1803, 1802, 1803, 1804, 1892, 1804, 1894,
     1892, 1801, 1802, 1803, 1893, 1805, 1804, 1805, 1999, 1999,
     1894, 1893, 1800, 1894, 1893, 1805, 1801, 2015, 1802, 1803,
     1802, 1803, 1804, 2021, 1804, 1804, 1806, 1807, 1806, 1807,
     1808, 1805, 1808, 1805, 1802, 1900, 1806, 1807, 1900, 1809,

     1808, 1809, 2015, 1901, 2022, 1897, 1901, 1802, 1803, 1809,
     2651, 1804, 1806, 1807, 1806, 1807, 1808, 1896, 1808, 1897,
     1805, 2186, 1897, 1808, 1807, 1809, 1806, 1809, 1896, 2022,
     1810, 1896, 1810, 1811, 1812, 1811, 1812, 2021, 2650, 1809,
     1810, 1806, 1807, 1811, 1812, 1808, 2186, 1813, 1899, 1813,
     2172, 1899, 1902, 1899, 1809, 1902, 1810, 1813, 1810, 1811,
     1812, 1811, 1812, 1810, 1903, 2172, 1811, 1903, 1814, 1815,
     1814, 1815, 1915, 1813, 1947, 1813, 2642, 1947, 1814, 1815,
     2157, 1816, 1812, 1816, 2078, 1810, 1915, 2078, 1811, 1812,
     1818, 1816, 1818, 1813, 1814, 1815, 1814, 1815, 2157, 1915,

     1818, 1817, 1813, 1817, 2653, 1915, 2133, 1816, 2144, 1816,
     1816, 1817, 1819, 2144, 1819, 2653, 1818, 1815, 1818, 2013,
     2013, 2013, 1819, 1814, 1815, 2082, 2133, 1817, 2082, 1817,
     1818, 1820, 2080, 1820, 2087, 1923, 1816, 2087, 1819, 2227,
     1819, 1820, 1821, 2080, 1821, 1818, 2080, 1817, 1822, 1923,
     1822, 1823, 1821, 1823, 2227, 2146, 1817, 1820, 1822, 1820,
     1819, 1823, 1923, 1824, 1820, 1824, 2079, 1819, 1821, 2079,
     1821, 2081, 2079, 1824, 1822, 2146, 1822, 1823, 2081, 1823,
     2086, 2081, 1825, 1826, 1825, 1826, 1820, 2140, 2137, 1824,
     1822, 1824, 1825, 1826, 1827, 2086, 1827, 1821, 2086, 1823,

     2140, 2137, 2637, 1822, 1827, 1824, 1823, 2137, 1825, 1826,
     1825, 1826, 2089, 2089, 1916, 1826, 2089, 1828, 1824, 1828,
     1827, 2083, 1827, 2083, 1825, 2317, 2083, 1828, 1916, 1829,
     1830, 1829, 1830, 2090, 2145, 2635, 2090, 1825, 1826, 1829,
     1830, 1916, 1831, 1828, 1831, 1828, 2317, 1916, 2145, 1827,
     2088, 1832, 1831, 1832, 1828, 1829, 1830, 1829, 1830, 2181,
     1918, 1832, 1829, 1834, 1830, 1834, 2088, 2827, 1831, 2088,
     1831, 2181, 1828, 1834, 1918, 1831, 1833, 1832, 1833, 1832,
     2093, 1832, 2093, 2093, 1829, 1830, 1833, 1918, 1835, 1834,
     1835, 1834, 2092, 1918, 2827, 2092, 2092, 1831, 1835, 2152,

     2633, 1836, 1833, 1836, 1833, 2095, 1832, 1837, 2095, 1837,
     2095, 1836, 1834, 2152, 1835, 2178, 1835, 1837, 1834, 1833,
     1898, 1898, 1898, 1951, 1951, 1951, 2023, 1836, 2023, 1836,
     1898, 1833, 1835, 1837, 2178, 1837, 2023, 2091, 2268, 2024,
     2025, 2024, 2025, 1835, 2091, 1836, 1898, 2091, 1898, 2024,
     2025, 1951, 2023, 2268, 2023, 2096, 1836, 2098, 2096, 2026,
     2098, 2026, 1837, 1898, 2097, 2024, 2025, 2024, 2025, 2026,
     2154, 2187, 2027, 2025, 2027, 1898, 2028, 2097, 2028, 2154,
     2097, 2023, 2027, 2147, 2187, 2026, 2028, 2026, 2315, 2024,
     2147, 2029, 2315, 2029, 2024, 2025, 2026, 2030, 2027, 2030,

     2027, 2029, 2028, 2192, 2028, 2192, 2031, 2030, 2031, 2030,
     2032, 2033, 2032, 2033, 2026, 2094, 2031, 2029, 2028, 2099,
     2032, 2033, 2099, 2030, 2150, 2105, 2101, 2027, 2105, 2105,
     2094, 2028, 2031, 2094, 2031, 2031, 2032, 2033, 2032, 2033,
     2159, 2034, 2101, 2034, 2150, 2101, 2029, 2029, 2035, 2159,
     2035, 2034, 2030, 2036, 2037, 2036, 2037, 2100, 2035, 2213,
     2038, 2031, 2038, 2036, 2037, 2032, 2033, 2034, 2100, 2034,
     2038, 2100, 2213, 2040, 2035, 2040, 2035, 2155, 2155, 2036,
     2037, 2036, 2037, 2040, 2034, 2039, 2038, 2039, 2038, 2104,
     2036, 2106, 2104, 2107, 2106, 2039, 2034, 2103, 2104, 2040,

     2166, 2040, 2037, 2035, 2103, 2166, 2038, 2103, 2036, 2037,
     2041, 2039, 2041, 2039, 2039, 2038, 2042, 2043, 2042, 2043,
     2041, 2108, 2040, 2044, 2108, 2044, 2042, 2043, 2040, 2045,
     2797, 2045, 2107, 2044, 2151, 2107, 2041, 2109, 2041, 2045,
     2039, 2797, 2042, 2043, 2042, 2043, 2156, 2042, 2046, 2044,
     2046, 2044, 2212, 2109, 2151, 2045, 2109, 2045, 2046, 2048,
     2110, 2048, 2045, 2110, 2043, 2041, 2156, 2112, 2158, 2048,
     2112, 2042, 2043, 2049, 2046, 2049, 2046, 2212, 2044, 2050,
     2051, 2050, 2051, 2049, 2045, 2048, 2153, 2048, 2158, 2050,
     2051, 2113, 2052, 2153, 2052, 2113, 2048, 2052, 2113, 2049,

     2479, 2049, 2052, 2046, 2111, 2050, 2051, 2050, 2051, 2115,
     2195, 2053, 2115, 2053, 2048, 2054, 2111, 2054, 2052, 2111,
     2052, 2053, 2055, 2479, 2055, 2054, 2049, 2050, 2049, 2195,
     2114, 2585, 2055, 2179, 2050, 2051, 2056, 2053, 2056, 2053,
     2179, 2054, 2114, 2054, 2219, 2114, 2056, 2052, 2055, 2116,
     2055, 2119, 2116, 2057, 2119, 2057, 2193, 2058, 2122, 2058,
     2128, 2122, 2056, 2057, 2056, 2193, 2053, 2058, 2056, 2219,
     2054, 2117, 2059, 2125, 2059, 2128, 2125, 2055, 2128, 2057,
     2459, 2057, 2059, 2058, 2459, 2058, 2340, 2117, 2584, 2126,
     2117, 2056, 2060, 2061, 2060, 2061, 2126, 2058, 2059, 2126,

     2059, 2198, 2060, 2061, 2059, 2062, 2118, 2062, 2057, 2118,
     2118, 2340, 2058, 2198, 2063, 2062, 2063, 2578, 2060, 2061,
     2060, 2061, 2132, 2163, 2063, 2132, 2064, 2059, 2064, 2129,
     2138, 2062, 2129, 2062, 2129, 2065, 2064, 2065, 2220, 2066,
     2063, 2066, 2063, 2163, 2138, 2065, 2577, 2060, 2061, 2066,
     2131, 2220, 2064, 2131, 2064, 2131, 2067, 2138, 2067, 2230,
     2062, 2065, 2063, 2065, 2230, 2066, 2067, 2066, 2182, 2063,
     2069, 2127, 2069, 2127, 2127, 2070, 2075, 2070, 2075, 2164,
     2069, 2064, 2067, 2065, 2067, 2070, 2075, 2066, 2182, 2071,
     2065, 2071, 2574, 2164, 2066, 2072, 2069, 2072, 2069, 2071,

     2177, 2070, 2075, 2070, 2075, 2072, 2073, 2323, 2073, 2573,
     2074, 2067, 2074, 2069, 2177, 2071, 2073, 2071, 2168, 2168,
     2074, 2072, 2070, 2072, 2075, 2069, 2071, 2076, 2323, 2076,
     2070, 2075, 2073, 2141, 2073, 2073, 2074, 2076, 2074, 2120,
     2271, 2072, 2120, 2120, 2071, 2271, 2077, 2141, 2077, 2324,
     2072, 2176, 2176, 2076, 2121, 2076, 2077, 2121, 2121, 2074,
     2141, 2073, 2124, 2124, 2324, 2074, 2124, 2084, 2084, 2084,
     2167, 2167, 2077, 2142, 2077, 2569, 2076, 2084, 2085, 2085,
     2085, 2130, 2076, 2180, 2130, 2130, 2184, 2142, 2085, 2167,
     2085, 2197, 2191, 2084, 2161, 2161, 2161, 2180, 2194, 2194,

     2142, 2077, 2228, 2167, 2085, 2197, 2184, 2185, 2185, 2185,
     2196, 2185, 2191, 2280, 2199, 2201, 2280, 2196, 2209, 2209,
     2209, 2284, 2084, 2084, 2284, 2240, 2221, 2222, 2221, 2222,
     2223, 2566, 2223, 2085, 2199, 2201, 2221, 2222, 2240, 2224,
     2223, 2224, 2263, 2245, 2263, 2228, 2228, 2263, 2287, 2224,
     2262, 2287, 2221, 2222, 2221, 2222, 2223, 2245, 2223, 2221,
     2225, 2262, 2225, 2185, 2262, 2224, 2286, 2224, 2269, 2222,
     2225, 2281, 2225, 2229, 2224, 2229, 2316, 2231, 2223, 2231,
     2286, 2221, 2222, 2229, 2281, 2223, 2225, 2231, 2232, 2264,
     2232, 2357, 2264, 2264, 2224, 2272, 2316, 2272, 2232, 2229,

     2272, 2229, 2564, 2231, 2303, 2231, 2357, 2233, 2234, 2233,
     2234, 2269, 2269, 2303, 2232, 2225, 2232, 2233, 2234, 2231,
     2235, 2229, 2235, 2232, 2277, 2313, 2277, 2277, 2229, 2314,
     2235, 2320, 2231, 2233, 2234, 2233, 2234, 2234, 2313, 2236,
     2320, 2236, 2314, 2232, 2233, 2237, 2235, 2237, 2235, 2236,
     2238, 2239, 2238, 2239, 2241, 2237, 2241, 2265, 2304, 2304,
     2238, 2239, 2233, 2234, 2241, 2236, 2265, 2236, 2235, 2265,
     2329, 2237, 2273, 2237, 2321, 2235, 2238, 2239, 2238, 2239,
     2241, 2273, 2241, 2321, 2273, 2236, 2242, 2238, 2242, 2243,
     2329, 2243, 2331, 2237, 2236, 2275, 2242, 2331, 2638, 2243,

     2237, 2244, 2241, 2244, 2270, 2238, 2239, 2270, 2270, 2241,
     2275, 2244, 2242, 2275, 2242, 2243, 2288, 2243, 2638, 2288,
     2246, 2247, 2246, 2247, 2325, 2285, 2330, 2244, 2242, 2244,
     2246, 2247, 2306, 2248, 2244, 2248, 2285, 2325, 2330, 2285,
     2250, 2242, 2250, 2248, 2243, 2306, 2246, 2247, 2246, 2247,
     2250, 2306, 2251, 2252, 2251, 2252, 2244, 2274, 2307, 2248,
     2355, 2248, 2251, 2252, 2274, 2634, 2250, 2274, 2250, 2355,
     2289, 2307, 2253, 2289, 2253, 2246, 2247, 2307, 2251, 2252,
     2251, 2252, 2253, 2254, 2255, 2254, 2255, 2256, 2248, 2256,
     2634, 2338, 2471, 2254, 2255, 2250, 2471, 2256, 2253, 2276,

     2253, 2253, 2276, 2276, 2257, 2338, 2257, 2251, 2252, 2254,
     2255, 2254, 2255, 2256, 2257, 2256, 2344, 2344, 2283, 2259,
     2283, 2259, 2256, 2283, 2258, 2254, 2258, 2253, 2475, 2259,
     2257, 2255, 2257, 2278, 2258, 2463, 2278, 2278, 2254, 2255,
     2282, 2279, 2256, 2282, 2282, 2259, 2257, 2259, 2279, 2463,
     2258, 2279, 2258, 2361, 2361, 2260, 2261, 2260, 2261, 2257,
     2266, 2266, 2266, 2563, 2258, 2260, 2261, 2259, 2291, 2562,
     2266, 2291, 2266, 2292, 2259, 2293, 2292, 2294, 2293, 2258,
     2475, 2260, 2261, 2260, 2261, 2295, 2266, 2295, 2296, 2297,
     2295, 2296, 2294, 2299, 2298, 2294, 2298, 2299, 2297, 2298,

     2299, 2297, 2300, 2351, 2261, 2300, 2300, 2310, 2561, 2301,
     2260, 2261, 2301, 2302, 2311, 2266, 2302, 2302, 2305, 2305,
     2305, 2310, 2305, 2327, 2350, 2358, 2327, 2351, 2311, 2348,
     2348, 2348, 2356, 2348, 2310, 2387, 2387, 2350, 2358, 2375,
     2382, 2311, 2389, 2558, 2356, 2367, 2367, 2367, 2368, 2368,
     2368, 2370, 2370, 2370, 2371, 2371, 2371, 2373, 2373, 2373,
     2374, 2381, 2391, 2375, 2382, 2383, 2384, 2383, 2384, 2466,
     2385, 2422, 2385, 2374, 2381, 2383, 2384, 2386, 2466, 2386,
     2385, 2390, 2390, 2420, 2420, 2348, 2389, 2386, 2458, 2458,
     2465, 2383, 2384, 2383, 2384, 2465, 2385, 2383, 2385, 2424,

     2557, 2416, 2392, 2386, 2392, 2386, 2391, 2393, 2394, 2393,
     2394, 2450, 2392, 2416, 2384, 2422, 2416, 2393, 2394, 2385,
     2383, 2384, 2423, 2423, 2450, 2385, 2390, 2395, 2392, 2395,
     2392, 2497, 2386, 2393, 2394, 2393, 2394, 2395, 2396, 2392,
     2396, 2449, 2417, 2424, 2393, 2417, 2417, 2418, 2396, 2397,
     2418, 2397, 2418, 2395, 2497, 2395, 2449, 2392, 2398, 2397,
     2398, 2453, 2393, 2394, 2396, 2461, 2396, 2423, 2398, 2399,
     2400, 2399, 2400, 2485, 2453, 2397, 2395, 2397, 2461, 2399,
     2400, 2396, 2395, 2549, 2398, 2419, 2398, 2485, 2419, 2401,
     2397, 2401, 2402, 2396, 2402, 2399, 2400, 2399, 2400, 2401,

     2399, 2403, 2402, 2403, 2397, 2427, 2429, 2429, 2427, 2425,
     2429, 2403, 2404, 2398, 2404, 2401, 2425, 2401, 2402, 2425,
     2402, 2572, 2404, 2474, 2399, 2400, 2405, 2403, 2405, 2403,
     2487, 2406, 2402, 2406, 2403, 2474, 2405, 2401, 2404, 2426,
     2404, 2406, 2487, 2407, 2401, 2407, 2426, 2402, 2408, 2426,
     2408, 2460, 2405, 2407, 2405, 2529, 2403, 2406, 2408, 2406,
     2428, 2462, 2409, 2428, 2409, 2428, 2460, 2404, 2410, 2407,
     2410, 2407, 2409, 2406, 2408, 2572, 2408, 2407, 2410, 2462,
     2467, 2405, 2411, 2412, 2411, 2412, 2406, 2413, 2409, 2413,
     2409, 2510, 2411, 2412, 2410, 2467, 2410, 2413, 2407, 2430,

     2507, 2408, 2430, 2408, 2414, 2430, 2414, 2478, 2411, 2412,
     2411, 2412, 2412, 2413, 2414, 2413, 2431, 2409, 2415, 2431,
     2415, 2433, 2434, 2410, 2433, 2434, 2434, 2432, 2415, 2435,
     2414, 2478, 2414, 2435, 2436, 2510, 2435, 2411, 2412, 2496,
     2432, 2501, 2413, 2432, 2415, 2436, 2415, 2437, 2436, 2438,
     2437, 2439, 2438, 2439, 2440, 2442, 2439, 2441, 2442, 2414,
     2441, 2445, 2443, 2496, 2440, 2443, 2441, 2440, 2444, 2446,
     2502, 2444, 2446, 2415, 2447, 2448, 2445, 2447, 2448, 2445,
     2451, 2451, 2451, 2454, 2451, 2455, 2476, 2476, 2476, 2483,
     2484, 2489, 2489, 2489, 2502, 2503, 2504, 2454, 2504, 2455,

     2532, 2505, 2550, 2505, 2483, 2484, 2504, 2506, 2500, 2506,
     2454, 2505, 2455, 2511, 2511, 2550, 2526, 2506, 2503, 2526,
     2548, 2509, 2504, 2509, 2504, 2528, 2508, 2505, 2508, 2505,
     2505, 2509, 2554, 2506, 2548, 2506, 2508, 2528, 2508, 2506,
     2528, 2551, 2476, 2512, 2532, 2512, 2554, 2509, 2533, 2533,
     2527, 2504, 2508, 2512, 2551, 2512, 2505, 2513, 2511, 2513,
     2559, 2514, 2506, 2514, 2515, 2527, 2515, 2513, 2527, 2512,
     2537, 2514, 2537, 2537, 2515, 2559, 2509, 2509, 2516, 2539,
     2516, 2508, 2539, 2513, 2541, 2513, 2571, 2514, 2516, 2514,
     2515, 2541, 2515, 2533, 2541, 2517, 2552, 2517, 2512, 2512,

     2513, 2518, 2514, 2518, 2516, 2517, 2516, 2498, 2553, 2571,
     2515, 2518, 2513, 2553, 2552, 2519, 2514, 2519, 2565, 2515,
     2516, 2517, 2565, 2517, 2681, 2519, 2538, 2518, 2538, 2518,
     2575, 2538, 2582, 2516, 2518, 2520, 2521, 2520, 2521, 2543,
     2681, 2519, 2543, 2519, 2575, 2520, 2521, 2522, 2536, 2522,
     2517, 2536, 2519, 2587, 2536, 2582, 2518, 2522, 2523, 2492,
     2523, 2520, 2521, 2520, 2521, 2488, 2555, 2524, 2523, 2524,
     2519, 2555, 2525, 2522, 2525, 2522, 2587, 2524, 2520, 2522,
     2521, 2644, 2525, 2540, 2523, 2639, 2523, 2639, 2535, 2535,
     2520, 2521, 2535, 2524, 2540, 2524, 2546, 2540, 2525, 2546,

     2525, 2644, 2522, 2544, 2530, 2530, 2530, 2531, 2531, 2531,
     2556, 2556, 2525, 2523, 2530, 2544, 2530, 2531, 2544, 2534,
     2534, 2534, 2524, 2545, 2542, 2542, 2592, 2525, 2542, 2534,
     2530, 2534, 2560, 2531, 2547, 2560, 2583, 2576, 2547, 2545,
     2576, 2547, 2545, 2588, 2597, 2534, 2567, 2567, 2567, 2570,
     2570, 2570, 2579, 2579, 2579, 2580, 2580, 2580, 2589, 2530,
     2589, 2649, 2531, 2531, 2581, 2581, 2581, 2590, 2589, 2590,
     2592, 2594, 2594, 2614, 2534, 2534, 2599, 2590, 2612, 2598,
     2579, 2591, 2649, 2591, 2589, 2619, 2589, 2700, 2597, 2612,
     2583, 2591, 2612, 2590, 2598, 2590, 2621, 2588, 2713, 2595,

     2590, 2595, 2567, 2700, 2589, 2570, 2596, 2591, 2596, 2595,
     2616, 2616, 2611, 2589, 2611, 2611, 2596, 2614, 2596, 2599,
     2599, 2713, 2590, 2598, 2600, 2595, 2600, 2626, 2809, 2619,
     2626, 2601, 2596, 2601, 2600, 2623, 2591, 2591, 2809, 2621,
     2621, 2601, 2622, 2602, 2622, 2602, 2623, 2622, 2629, 2623,
     2600, 2629, 2600, 2602, 2595, 2595, 2654, 2601, 2654, 2601,
     2648, 2596, 2596, 2603, 2601, 2603, 2600, 2628, 2604, 2602,
     2604, 2602, 2602, 2603, 2605, 2606, 2605, 2606, 2604, 2600,
     2628, 2640, 2620, 2628, 2605, 2606, 2601, 2632, 2486, 2603,
     2632, 2603, 2645, 2645, 2604, 2640, 2604, 2620, 2602, 2705,

     2605, 2606, 2605, 2606, 2659, 2607, 2606, 2607, 2705, 2608,
     2609, 2608, 2609, 2684, 2648, 2607, 2684, 2605, 2603, 2608,
     2609, 2481, 2610, 2604, 2610, 2659, 2620, 2671, 2671, 2605,
     2606, 2607, 2610, 2607, 2624, 2608, 2609, 2608, 2609, 2646,
     2646, 2646, 2609, 2613, 2613, 2613, 2658, 2662, 2610, 2624,
     2610, 2625, 2624, 2613, 2480, 2663, 2617, 2617, 2617, 2710,
     2607, 2618, 2618, 2618, 2608, 2609, 2617, 2625, 2710, 2613,
     2625, 2618, 2630, 2618, 2627, 2627, 2663, 2610, 2627, 2636,
     2636, 2636, 2617, 2655, 2655, 2655, 2720, 2618, 2630, 2666,
     2669, 2630, 2672, 2672, 2673, 2646, 2674, 2685, 2613, 2613,

     2658, 2662, 2477, 2664, 2665, 2664, 2665, 2636, 2678, 2720,
     2678, 2617, 2617, 2664, 2665, 2712, 2618, 2618, 2631, 2631,
     2631, 2690, 2690, 2688, 2697, 2668, 2697, 2668, 2631, 2664,
     2665, 2664, 2665, 2666, 2669, 2668, 2712, 2672, 2673, 2683,
     2674, 2685, 2683, 2675, 2631, 2675, 2631, 2692, 2683, 2693,
     2631, 2668, 2473, 2675, 2691, 2691, 2664, 2694, 2664, 2665,
     2694, 2702, 2631, 2702, 2676, 2631, 2676, 2688, 2677, 2675,
     2677, 2675, 2724, 2631, 2676, 2679, 2695, 2679, 2677, 2695,
     2668, 2668, 2704, 2704, 2704, 2679, 2711, 2680, 2706, 2680,
     2676, 2692, 2676, 2693, 2677, 2724, 2677, 2680, 2675, 2691,

     2706, 2679, 2696, 2679, 2472, 2696, 2696, 2698, 2682, 2698,
     2682, 2711, 2698, 2680, 2719, 2680, 2677, 2679, 2682, 2676,
     2699, 2726, 2470, 2677, 2723, 2699, 2680, 2728, 2699, 2701,
     2679, 2687, 2687, 2687, 2682, 2719, 2682, 2682, 2708, 2708,
     2708, 2687, 2680, 2717, 2701, 2723, 2725, 2701, 2725, 2729,
     2730, 2729, 2731, 2738, 2731, 2717, 2725, 2687, 2740, 2729,
     2469, 2729, 2731, 2682, 2737, 2726, 2708, 2737, 2742, 2743,
     2745, 2728, 2725, 2745, 2725, 2729, 2743, 2464, 2731, 2743,
     2731, 2756, 2732, 2733, 2732, 2733, 2687, 2687, 2734, 2731,
     2734, 2750, 2732, 2733, 2730, 2756, 2744, 2738, 2734, 2457,

     2744, 2725, 2740, 2744, 2729, 2729, 2750, 2731, 2732, 2733,
     2732, 2733, 2742, 2735, 2734, 2735, 2734, 2818, 2736, 2747,
     2736, 2746, 2732, 2735, 2746, 2835, 2747, 2818, 2736, 2747,
     2741, 2741, 2741, 2835, 2751, 2749, 2755, 2732, 2733, 2735,
     2741, 2735, 2741, 2734, 2736, 2748, 2736, 2749, 2748, 2751,
     2735, 2752, 2752, 2752, 2748, 2761, 2741, 2753, 2762, 2755,
     2759, 2764, 2765, 2839, 2766, 2421, 2766, 2767, 2735, 2767,
     2753, 2736, 2762, 2736, 2766, 2759, 2765, 2767, 2761, 2770,
     2770, 2779, 2839, 2770, 2764, 2741, 2741, 2768, 2772, 2768,
     2766, 2772, 2766, 2767, 2772, 2767, 2773, 2768, 2769, 2773,

     2769, 2771, 2771, 2774, 2779, 2771, 2775, 2766, 2769, 2776,
     2767, 2777, 2776, 2768, 2785, 2768, 2777, 2778, 2774, 2766,
     2775, 2784, 2767, 2788, 2769, 2787, 2769, 2782, 2768, 2795,
     2782, 2778, 2795, 2388, 2789, 2784, 2789, 2785, 2790, 2787,
     2790, 2803, 2768, 2793, 2789, 2791, 2788, 2791, 2790, 2792,
     2380, 2792, 2803, 2769, 2792, 2791, 2793, 2799, 2805, 2793,
     2789, 2794, 2789, 2808, 2790, 2813, 2790, 2815, 2813, 2790,
     2815, 2791, 2794, 2791, 2816, 2794, 2789, 2810, 2791, 2810,
     2799, 2805, 2811, 2379, 2811, 2816, 2808, 2810, 2812, 2789,
     2812, 2814, 2811, 2790, 2823, 2831, 2814, 2826, 2812, 2814,

     2791, 2378, 2834, 2810, 2823, 2810, 2829, 2826, 2811, 2829,
     2811, 2822, 2822, 2822, 2812, 2836, 2812, 2841, 2828, 2837,
     2828, 2811, 2831, 2833, 2833, 2833, 2838, 2837, 2828, 2834,
     2840, 2842, 2810, 2843, 2838, 2844, 2841, 2811, 2840, 2842,
     2845, 2846, 2836, 2812, 2828, 2847, 2828, 2848, 2849, 2850,
     2851, 2853, 2843, 2845, 2844, 2852, 2854, 2855, 2847, 2377,
     2846, 2849, 2850, 2856, 2851, 2853, 2848, 2858, 2852, 2854,
     2860, 2855, 2369, 2828, 2907, 2907, 2366, 2856, 2908, 2908,
     2365, 2858, 2955, 2955, 2860, 2878, 2878, 2878, 2878, 2878,
     2878, 2878, 2878, 2878, 2878, 2878, 2878, 2878, 2878, 2878,

     2878, 2878, 2878, 2878, 2878, 2878, 2878, 2878, 2878, 2879,
     2879, 2879, 2879, 2879, 2879, 2879, 2879, 2879, 2879, 2879,
     2879, 2879, 2879, 2879, 2879, 2879, 2879, 2879, 2879, 2879,
     2879, 2879, 2879, 2880, 2880, 2880, 2880, 2880, 2880, 2880,
     2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880,
     2880, 2880, 2880, 2880, 2880, 2880, 2880, 2881, 2881, 2881,
     2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881,
     2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881,
     2881, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882,
     2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882,

     2882, 2882, 2882, 2882, 2882, 2883, 2883, 2883, 2883, 2883,
     2883, 2883, 2883, 2883, 2883, 2883, 2883, 2883, 2883, 2883,
     2883, 2883, 2883, 2883, 2883, 2883, 2883, 2883, 2883, 2884,
     2884, 2884, 2884, 2884, 2884, 2884, 2884, 2884, 2884, 2884,
     2884, 2884, 2884, 2884, 2884, 2884, 2884, 2884, 2884, 2884,
     2884, 2884, 2884, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885, 2885,
     2885, 2885, 2885, 2885, 2885, 2885, 2885, 2886, 2886, 2886,
     2886, 2886, 2886, 2886, 2886, 2886, 2886, 2886, 2886, 2886,
     2886, 2886, 2886, 2886, 2886, 2886, 2886, 2886, 2887, 2887,

     2887, 2887, 2887, 2887, 2887, 2887, 2887, 2887, 2887, 2887,
     2887, 2887, 2887, 2887, 2887, 2887, 2887, 2887, 2887, 2888,
     2888, 2888, 2364, 2956, 2888, 2956, 2363, 2888, 2362, 2888,
     2360, 2888, 2889, 2359, 2889, 2889, 2889, 2889, 2889, 2889,
     2889, 2889, 2889, 2889, 2889, 2890, 2890, 2890, 2890, 2890,
     2890, 2890, 2890, 2890, 2890, 2890, 2890, 2890, 2891, 2891,
     2891, 2891, 2891, 2891, 2891, 2891, 2891, 2891, 2891, 2891,
     2891, 2891, 2891, 2891, 2891, 2891, 2891, 2891, 2891, 2891,
     2891, 2891, 2892, 2354, 2892, 2892, 2892, 2892, 2892, 2892,
     2892, 2892, 2892, 2892, 2892, 2893, 2893, 2893, 2893, 2893,

     2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2894, 2894,
     2894, 2894, 2894, 2894, 2894, 2894, 2894, 2894, 2894, 2894,
     2894, 2894, 2894, 2894, 2894, 2894, 2894, 2894, 2894, 2894,
     2894, 2894, 2895, 2895, 2895, 2895, 2895, 2895, 2895, 2895,
     2895, 2895, 2895, 2895, 2895, 2895, 2895, 2895, 2895, 2895,
     2895, 2895, 2895, 2895, 2895, 2895, 2896, 2353, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2897,
     2352, 2897, 2957, 2957, 2959, 2959, 2966, 2966, 2347, 2897,
     2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897,
     2897, 2897, 2898, 2346, 2898, 2898, 2898, 2898, 2898, 2898,

     2898, 2898, 2898, 2898, 2898, 2899, 2899, 2899, 2993, 2993,
     3028, 3028, 3031, 3031, 2345, 2899, 2899, 2899, 2899, 2899,
     2899, 2899, 2899, 2899, 2899, 2899, 2899, 2899, 2900, 2900,
     2900, 3039, 3039, 2900, 3042, 3042, 2900, 2343, 2900, 2342,
     2900, 2901, 2901, 2901, 2901, 2901, 2341, 2901, 2901, 2901,
     2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901,
     2901, 2901, 2901, 2901, 2901, 2902, 2902, 2958, 2958, 3036,
     3036, 2902, 2337, 2902, 2902, 2902, 2902, 2336, 2958, 2902,
     3036, 2902, 2903, 3008, 3008, 2903, 3047, 3047, 2903, 2903,
     3075, 3075, 3008, 2903, 2333, 3047, 2332, 2903, 2904, 2904,

     3062, 3062, 2328, 2904, 2326, 2904, 2904, 2904, 2904, 3062,
     2322, 2904, 2318, 2904, 2909, 2909, 2909, 2909, 2909, 2909,
     2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909,
     2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911,
     2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911,
     2911, 2911, 2911, 2911, 2911, 2911, 2912, 2912, 2912, 2912,
     2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912,

     2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912,
     2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913,
     2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913,
     2913, 2913, 2913, 2913, 2916, 2916, 2916, 2916, 2916, 2312,
     2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916,
     2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2917, 2308,
     2917, 2917, 2917, 2917, 2918, 2918, 2918, 2918, 2918, 2918,
     2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918,
     2918, 2918, 2918, 2918, 2918, 2919, 2919, 2290, 2919, 2919,
     2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919,

     2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2921,
     2267, 2921, 2921, 2921, 2921, 2922, 2922, 2922, 2922, 2922,
     2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922,
     2922, 2922, 2922, 2922, 2922, 2922, 2923, 2923, 3076, 3076,
     2923, 2923, 2249, 2923, 2226, 2923, 2218, 2923, 2925, 2925,
     2925, 2217, 2216, 2215, 2214, 3070, 3070, 2210, 2925, 2208,
     2925, 2926, 2926, 2926, 3070, 2207, 3073, 3073, 2206, 3080,
     3080, 2926, 2205, 2926, 2927, 2927, 2927, 3073, 3080, 2204,
     2203, 2202, 2200, 2190, 2927, 2929, 2189, 2929, 2929, 2929,
     2929, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930,

     2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930,
     2930, 2930, 2930, 2930, 2930, 2931, 2931, 2931, 2931, 2931,
     2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931,
     2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931, 2931, 2932,
     2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932,
     2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932,
     2932, 2932, 2932, 2933, 2933, 2933, 2933, 2933, 2933, 2933,
     2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933, 2933,
     2933, 2933, 2933, 2933, 2933, 2933, 2933, 2934, 2934, 2934,
     2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934,

     2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934,
     2934, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935,
     2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935, 2935,
     2935, 2935, 2935, 2935, 2935, 2936, 2936, 2936, 2936, 2936,
     2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936,
     2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2936, 2937,
     2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937,
     2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937, 2937,
     2937, 2937, 2937, 2938, 2938, 2938, 2938, 2938, 2938, 2938,
     2938, 2938, 2938, 2938, 2938, 2938, 2938, 2938, 2938, 2938,

     2938, 2938, 2938, 2938, 2938, 2938, 2938, 2939, 2939, 2939,
     2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939,
     2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939, 2939,
     2939, 2940, 2188, 2940, 2183, 2175, 2174, 2173, 2171, 2170,
     2169, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2941, 2941, 2941, 2941, 2941, 2941,
     2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941,
     2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941, 2942, 2942,
     2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942,
     2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942,

     2942, 2942, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2944, 2944, 2944, 2165,
     2160, 2148, 2139, 2136, 2135, 2020, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2945,
     2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945,
     2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945,
     2945, 2945, 2945, 2946, 2946, 2946, 2946, 2946, 2946, 2946,
     2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946,
     2946, 2946, 2946, 2946, 2946, 2946, 2946, 2947, 2947, 2019,

     2018, 2947, 2017, 2016, 2947, 2012, 2947, 2011, 2947, 2948,
     2010, 2948, 2948, 2948, 2948, 2950, 2950, 2009, 2950, 2950,
     2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950,
     2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2952,
     2952, 2952, 2952, 2952, 2952, 2952, 2952, 2952, 2952, 2952,
     2952, 2952, 2952, 2952, 2952, 2952, 2952, 2952, 2952, 2952,
     2953, 2953, 2008, 2007, 2953, 2953, 2006, 2953, 2005, 2953,
     2004, 2953, 2963, 2963, 2963, 2003, 1993, 1992, 1991, 3087,
     3087, 1989, 2963, 1988, 2963, 2965, 2965, 2965, 3087, 1987,
     1983, 1973, 3098, 3098, 1970, 2965, 1968, 2965, 2968, 2968,

     2968, 3098, 1967, 1966, 1963, 1961, 1960, 1959, 2968, 2970,
     2970, 2970, 2970, 2970, 2970, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2973, 2973, 2973, 2973, 2973, 2973, 2973, 2973,
     2973, 2973, 2973, 2973, 2973, 2973, 2973, 2973, 2973, 2973,
     2973, 2973, 2973, 2973, 2973, 2973, 2974, 2974, 2974, 2974,
     2974, 2974, 2974, 2974, 2974, 2974, 2974, 2974, 2974, 2974,
     2974, 2974, 2974, 2974, 2974, 2974, 2974, 2974, 2974, 2974,

     2975, 2975, 2975, 2975, 2975, 2975, 2975, 2975, 2975, 2975,
     2975, 2975, 2975, 2975, 2975, 2975, 2975, 2975, 2975, 2975,
     2975, 2975, 2975, 2975, 2976, 2976, 2976, 2976, 2976, 2976,
     2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976,
     2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2977, 2977,
     2977, 2977, 2977, 2977, 2977, 2977, 2977, 2977, 2977, 2977,
     2977, 2977, 2977, 2977, 2977, 2977, 2977, 2977, 2977, 2977,
     2977, 2977, 2978, 2978, 2978, 2978, 2978, 2978, 2978, 2978,
     2978, 2978, 2978, 2978, 2978, 2978, 2978, 2978, 2978, 2978,
     2978, 2978, 2978, 2978, 2978, 2978, 2979, 1957, 2979, 1949,

     1946, 1940, 1938, 1937, 1935, 1934, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2981, 2981, 2981, 2981, 2981, 2981, 2981,
     2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981,
     2981, 2981, 2981, 2981, 2981, 2981, 2981, 2982, 2982, 2982,
     2982, 2982, 2982, 2982, 2982, 2982, 2982, 2982, 2982, 2982,
     2982, 2982, 2982, 2982, 2982, 2982, 2982, 2982, 2982, 2982,
     2982, 2983, 2983, 2983, 1932, 1928, 1925, 1921, 1917, 1906,

     1770, 2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983,
     2983, 2983, 2983, 2983, 2984, 2984, 2984, 2984, 2984, 2984,
     2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984,
     2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2985, 2985,
     2985, 2985, 2985, 2985, 2985, 2985, 2985, 2985, 2985, 2985,
     2985, 2985, 2985, 2985, 2985, 2985, 2985, 2985, 2985, 2985,
     2985, 2985, 2986, 2986, 1769, 1768, 2986, 1767, 1766, 2986,
     1765, 2986, 1762, 2986, 2988, 1761, 2988, 2988, 2988, 2988,
     2989, 2989, 1760, 2989, 2989, 2989, 2989, 2989, 2989, 2989,
     2989, 2989, 2989, 2989, 2989, 2989, 2989, 2989, 2989, 2989,

     2989, 2989, 2989, 2989, 2990, 2990, 2990, 1759, 1758, 1757,
     1756, 1755, 2990, 1754, 2990, 1753, 2990, 2994, 2994, 2994,
     1740, 1737, 1736, 1735, 1731, 1721, 1715, 2994, 1708, 2994,
     2996, 2996, 2996, 1697, 1694, 1685, 1678, 1677, 1674, 1672,
     2996, 1668, 2996, 2998, 2998, 2998, 1645, 1581, 1580, 1578,
     1507, 1506, 1504, 2998, 3000, 3000, 1489, 1488, 1487, 1486,
     1485, 3000, 1483, 3000, 1480, 3000, 3002, 3002, 1479, 1477,
     1476, 1475, 1474, 1473, 1472, 3002, 1462, 3002, 3004, 3004,
     1456, 1455, 1454, 1440, 1439, 1424, 1419, 3004, 1418, 3004,
     3005, 3005, 3005, 1416, 1415, 1412, 1407, 1399, 1390, 1389,

     3005, 3010, 3010, 3010, 3010, 3010, 3010, 3011, 3011, 3011,
     3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,
     3012, 3012, 3012, 3012, 3012, 3012, 3012, 3012, 3012, 3012,
     3012, 3012, 3012, 3012, 3012, 3012, 3012, 3012, 3012, 3012,
     3012, 3012, 3012, 3012, 3013, 3013, 3013, 3013, 3013, 3013,
     3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013,
     3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013, 3014, 3014,
     3014, 3014, 3014, 3014, 3014, 3014, 3014, 3014, 3014, 3014,
     3014, 3014, 3014, 3014, 3014, 3014, 3014, 3014, 3014, 3014,
     3014, 3014, 3015, 3015, 3015, 3015, 3015, 3015, 3015, 3015,

     3015, 3015, 3015, 3015, 3015, 3015, 3015, 3015, 3015, 3015,
     3015, 3015, 3015, 3015, 3015, 3015, 3016, 3016, 3016, 3016,
     3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016,
     3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016,
     3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017,
     3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017,
     3017, 3017, 3017, 3017, 3018, 1377, 3018, 1373, 1369, 1364,
     1347, 1341, 1340, 1333, 3018, 3018, 3018, 3018, 3018, 3018,
     3018, 3018, 3018, 3018, 3018, 3018, 3018, 3019, 3019, 3019,
     3019, 3019, 3019, 3019, 3019, 3019, 3019, 3019, 3019, 3019,

     3019, 3019, 3019, 3019, 3019, 3019, 3019, 3019, 3019, 3019,
     3019, 3020, 3020, 3020, 3020, 3020, 3020, 3020, 3020, 3020,
     3020, 3020, 3020, 3020, 3020, 3020, 3020, 3020, 3020, 3020,
     3020, 3020, 3020, 3020, 3020, 3021, 3021, 3021, 1268, 1193,
     1181, 1177, 1176, 1175, 1174, 3021, 3021, 3021, 3021, 3021,
     3021, 3021, 3021, 3021, 3021, 3021, 3021, 3021, 3022, 3022,
     3022, 3022, 3022, 3022, 3022, 3022, 3022, 3022, 3022, 3022,
     3022, 3022, 3022, 3022, 3022, 3022, 3022, 3022, 3022, 3022,
     3022, 3022, 3023, 3023, 3023, 3023, 3023, 3023, 3023, 3023,
     3023, 3023, 3023, 3023, 3023, 3023, 3023, 3023, 3023, 3023,

     3023, 3023, 3023, 3023, 3023, 3023, 3024, 3024, 3024, 3024,
     3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024,
     3024, 3024, 3024, 3024, 3024, 3024, 3024, 3025, 3025, 1173,
     3025, 3025, 3025, 3025, 3025, 3025, 3025, 3025, 3025, 3025,
     3025, 3025, 3025, 3025, 3025, 3025, 3025, 3025, 3025, 3025,
     3025, 3030, 3030, 1172, 1171, 1167, 1164, 1163, 3030, 1162,
     3030, 1161, 3030, 3033, 3033, 3033, 1160, 1159, 1158, 1157,
     1156, 1140, 1139, 3033, 1138, 3033, 3034, 3034, 1137, 1132,
     1124, 1123, 1122, 3034, 1121, 3034, 1098, 3034, 3035, 3035,
     1097, 1094, 1082, 1081, 1076, 1066, 1065, 3035, 1050, 3035,

     3038, 3038, 3038, 1036, 1028, 1026,  964,  959,  899,  893,
     3038,  892, 3038, 3040, 3040,  889,  888,  887,  886,  882,
      881,  879, 3040,  864, 3040, 3041, 3041,  859,  858,  856,
      851,  849,  848,  846, 3041,  845, 3041, 3044, 3044, 3044,
      844,  841,  840,  833,  832,  829,  825, 3044, 3046, 3046,
      822,  819,  816,  814,  813,  812,  809, 3046,  808, 3046,
     3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
     3048, 3048, 3048, 3049, 3049, 3049, 3049, 3049, 3049, 3049,
     3049, 3049, 3049, 3049, 3049, 3049, 3049, 3049, 3049, 3049,
     3049, 3049, 3049, 3049, 3049, 3049, 3049, 3050, 3050, 3050,

     3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050,
     3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050,
     3050, 3051, 3051, 3051, 3051, 3051, 3051, 3051, 3051, 3051,
     3051, 3051, 3051, 3051, 3051, 3051, 3051, 3051, 3051, 3051,
     3051, 3051, 3051, 3051, 3051, 3052, 3052, 3052, 3052, 3052,
     3052, 3052, 3052, 3052, 3052, 3052, 3052, 3052, 3052, 3052,
     3052, 3052, 3052, 3052, 3052, 3052, 3052, 3052, 3052, 3053,
      799, 3053,  798,  791,  790,  771,  762,  760,  759, 3053,
     3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
     3053, 3053, 3054, 3054, 3054, 3054, 3054, 3054, 3054, 3054,

     3054, 3054, 3054, 3054, 3054, 3054, 3054, 3054, 3054, 3054,
     3054, 3054, 3054, 3054, 3054, 3054, 3055, 3055, 3055, 3055,
     3055, 3055, 3055, 3055, 3055, 3055, 3055, 3055, 3055, 3055,
     3055, 3055, 3055, 3055, 3055, 3055, 3055, 3055, 3055, 3055,
     3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056,
     3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056, 3056,
     3056, 3056, 3056, 3056, 3057, 3057, 3057,  758,  750,  746,
      688,  687,  681,  614, 3057, 3057, 3057, 3057, 3057, 3057,
     3057, 3057, 3057, 3057, 3057, 3057, 3057, 3058, 3058, 3058,
     3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058,

     3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058, 3058,
     3058, 3059, 3059, 3059, 3059, 3059, 3059, 3059, 3059, 3059,
     3059, 3059, 3059, 3059, 3059, 3059, 3059, 3059, 3059, 3059,
     3059, 3059, 3059, 3059, 3059, 3060, 3060, 3060, 3060, 3060,
     3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060,
     3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060, 3061,
     3061,  613, 3061, 3061, 3061, 3061, 3061, 3061, 3061, 3061,
     3061, 3061, 3061, 3061, 3061, 3061, 3061, 3061, 3061, 3061,
     3061, 3061, 3061, 3063, 3063,  606,  605,  604,  601,  600,
      599,  598, 3063,  596, 3063, 3064, 3064, 3064,  595,  594,

      593,  592,  590,  586,  585, 3064,  584, 3064, 3065, 3065,
      577,  576,  575,  571,  565, 3065,  556, 3065,  545, 3065,
     3066, 3066,  540,  539,  538,  534,  530,  526,  525, 3066,
      514, 3066, 3067, 3067, 3067,  513,  481,  477,  470,  469,
      468,  467, 3067, 3069, 3069,  466,  442,  425,  405,  403,
      376,  323, 3069,  321, 3069, 3071, 3071, 3071,  315,  312,
      311,  309,  307,  306,  305, 3071, 3078, 3078, 3078,  304,
      300,  299,  296,  295,  294,  284, 3078, 3081, 3081, 3081,
     3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081,
     3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081, 3081,

     3081, 3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082,
     3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082, 3082,
     3082, 3082, 3082, 3082, 3082, 3083, 3083, 3083, 3083, 3083,
     3083, 3083, 3083, 3083, 3083, 3083, 3083, 3083, 3083, 3083,
     3083, 3083, 3083, 3083, 3083, 3083, 3083, 3083, 3083, 3084,
     3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084,
     3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084,
     3084, 3084, 3084, 3085, 3085,  283,  282,  281,  278,  274,
      248,  247, 3085,  246, 3085, 3086, 3086, 3086,  238,  228,
      226,  218,  214,  213,  212, 3086, 3088, 3088, 3088,  203,

      198,  180,  179,  178,  164,  118, 3088, 3089, 3089, 3089,
     3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089,
     3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089,
     3089, 3090, 3090, 3090, 3090, 3090, 3090, 3090, 3090, 3090,
     3090, 3090, 3090, 3090, 3090, 3090, 3090, 3090, 3090, 3090,
     3090, 3090, 3090, 3090, 3090, 3092, 3092, 3092,  114,  113,
      111,  109,  108,  107,  102, 3092, 3093, 3093, 3093, 3093,
     3093, 3093, 3093, 3093, 3093, 3093, 3093, 3093, 3093, 3093,
     3093, 3093, 3093, 3093, 3093, 3093, 3093, 3093, 3093, 3093,
     3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094,

     3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094, 3094,
     3094, 3094, 3094, 3094, 3095, 3095, 3095, 3095, 3095, 3095,
     3095, 3095, 3095, 3095, 3095, 3095, 3095, 3095, 3095, 3095,
     3095, 3095, 3095, 3095, 3095, 3095, 3095, 3095, 3096, 3096,
     3096, 3096, 3096, 3096, 3096, 3096, 3096, 3096, 3096, 3096,
     3096, 3096, 3096, 3096, 3096, 3096, 3096, 3096, 3096, 3096,
     3096, 3096, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097,
     3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097, 3097,
     3097, 3097, 3097, 3097, 3097, 3097, 3099, 3099, 3099, 3099,
     3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099,

     3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099, 3099,
     3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100,
     3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100,
     3100, 3100, 3100, 3100, 3101, 3101, 3101, 3101, 3101, 3101,
     3101, 3101, 3101, 3101, 3101, 3101, 3101, 3101, 3101, 3101,
     3101, 3101, 3101, 3101, 3101, 3101, 3101, 3101, 3102, 3102,
     3102, 3102, 3102, 3102, 3102, 3102, 3102, 3102, 3102, 3102,
     3102, 3102, 3102, 3102, 3102, 3102, 3102, 3102, 3102, 3102,
     3102, 3102, 3103, 3103, 3103, 3103, 3103, 3103, 3103, 3103,
     3103, 3103, 3103, 3103, 3103, 3103, 3103, 3103, 3103, 3103,

     3103, 3103, 3103, 3103, 3103, 3103, 3104, 3104, 3104, 3104,
     3104, 3104, 3104, 3104, 3104, 3104, 3104, 3104, 3104, 3104,
     3104, 3104, 3104, 3104, 3104, 3104, 3104, 3104, 3104, 3104,
     3105, 3105, 3105, 3105, 3105, 3105, 3105, 3105, 3105, 3105,
     3105, 3105, 3105, 3105, 3105, 3105, 3105, 3105, 3105, 3105,
     3105, 3105, 3105, 3105, 3106, 3106, 3106, 3106, 3106, 3106,
     3106, 3106, 3106, 3106, 3106, 3106, 3106, 3106, 3106, 3106,
     3106, 3106, 3106, 3106, 3106, 3106, 3106, 3106, 3107, 3107,
     3107, 3107, 3107, 3107, 3107, 3107, 3107, 3107, 3107, 3107,
     3107, 3107, 3107, 3107, 3107, 3107, 3107, 3107, 3107, 3107,

     3107, 3107,  101,  100,   87,   85,   82,   81,   65,   57,
       56,   54,   49,   48,   47,   39,   36,   35,   34,   33,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "iec_flex.ll"
#define INITIAL 0
/*
 *  matiec - a compiler for the programming languages defined in IEC 61131-3
 *
 *  Copyright (C) 2003-2011  Mario de Sousa (msousa@fe.up.pt)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of thest_whitespaceLicense, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * This code is made available on the understanding that it will not be
 * used in safety-critical situations without a full and competent review.
 */
/*
 * An IEC 61131-3 compiler.
 *
 * Based on the
 * FINAL DRAFT - IEC 61131-3, 2nd Ed. (2001-12-10)
 *
 */
/*
 * Stage 1
 * =======
 *
 * This file contains the lexical tokens definitions, from which
 * the flex utility will generate a lexical parser function.
 */
/*****************************/
/* Lexical Parser Options... */
/*****************************/
/* The lexical analyser will never work in interactive mode,
 * i.e., it will only process programs saved to files, and never
 * programs being written inter-actively by the user.
 * This option saves the resulting parser from calling the
 * isatty() function, that seems to be generating some compile
 * errors under some (older?) versions of flex.
 */
#define YY_NEVER_INTERACTIVE 1
/* Have the lexical analyser use a 'char *yytext' instead of an
 * array of char 'char yytext[??]' to store the lexical token.
 */
/* Have the lexical analyser ignore the case of letters.
 * This will occur for all the tokens and keywords, but
 * the resulting text handed up to the syntax parser
 * will not be changed, and keep the original case
 * of the letters in the input file.
 */
/* Have the generated lexical analyser keep track of the
 * line number it is currently analysing.
 * This is used to pass up to the syntax parser
 * the number of the line on which the current
 * token was found. It will enable the syntax parser
 * to generate more informatve error messages...
 */
/* required for the use of the yy_pop_state() and
 * yy_push_state() functions
 */
#define YY_STACK_USED 1
/* The '%option stack' also requests the inclusion of 
 * the yy_top_state(), however this function is not
 * currently being used. This means that the compiler
 * is complaining about the existance of this function.
 * The following option removes the yy_top_state()
 * function from the resulting c code, so the compiler 
 * no longer complains.
 */
#define YY_NO_TOP_STATE 1
/* We will be using unput() in our flex code, so we cannot set the following option!... */
/*
%option nounput
*/
/* The '%option debug' makes the generated scanner run in
 * debug mode.
%option debug
 */
/**************************************************/
/* External Variable and Function declarations... */
/**************************************************/
#line 110 "iec_flex.ll"
/* Define TEST_MAIN to include a main() function.
 * Useful for testing the parser generated by flex.
 */
/*
#define TEST_MAIN
*/
/* If lexical parser is compiled by itself, we need to define the following
 * constant to some string. Under normal circumstances LIBDIRECTORY is set
 * in the syntax parser header file...
 */
#ifdef TEST_MAIN
#define DEFAULT_LIBDIR "just_testing"
#else
#define DEFAULT_LIBDIR ""
#endif



/* Required for strdup() */
#include <string.h>

/* Required only for the declaration of abstract syntax classes
 * (class symbol_c; class token_c; class list_c;)
 * These will not be used in flex, but the token type union defined
 * in iec_bison.hh contains pointers to these classes, so we must include
 * it here.
 */
#include "../absyntax/absyntax.hh"


/* iec_bison.hh is generated by bison.
 * Contains the definition of the token constants, and the
 * token value type YYSTYPE (in our case, a 'const char *')
 */
#include "iec_bison.hh"
#include "stage1_2_priv.hh"


/* Variable defined by the bison parser,
 * where the value of the tokens will be stored
 */
extern YYSTYPE yylval;

/* The name of the file currently being parsed...
 * Note that flex accesses and updates this global variable
 * apropriately whenever it comes across an (*#include <filename> *) directive...
 */
const char *current_filename = NULL;



/* Variable defined by the bison parser.
 * It must be initialised with the location
 * of the token being parsed.
 * This is only needed if we want to keep
 * track of the locations, in order to give
 * more meaningful error messages!
 */
/*
 *extern YYLTYPE yylloc;
b*/
#define YY_INPUT(buf,result,max_size)  {\
    result = GetNextChar(buf, max_size);\
    if (  result <= 0  )\
      result = YY_NULL;\
    }


/* Macro that is executed for every action.
 * We use it to pass the location of the token
 * back to the bison parser...
 */
#define YY_USER_ACTION {\
	previous_tracking   =*current_tracking;					\
	yylloc.first_line   = current_tracking->lineNumber;			\
	yylloc.first_column = current_tracking->currentChar;			\
	yylloc.first_file   = current_filename;					\
	yylloc.first_order  = current_order;					\
	\
	UpdateTracking(yytext);							\
	\
	yylloc.last_line    = current_tracking->lineNumber;			\
	yylloc.last_column  = current_tracking->currentChar - 1;		\
	yylloc.last_file    = current_filename;					\
	yylloc.last_order   = current_order;					\
	\
	current_tracking->currentTokenStart = current_tracking->currentChar;	\
	current_order++;							\
	}


/* Since this lexical parser we defined only works in ASCII based
 * systems, we might as well make sure it is being compiled on
 * one...
 * Lets check a few random characters...
 */
#if (('a' != 0x61) || ('A' != 0x41) || ('z' != 0x7A) || ('Z' != 0x5A) || \
     ('0' != 0x30) || ('9' != 0x39) || ('(' != 0x28) || ('[' != 0x5B))
#error This lexical analyser is not portable to a non ASCII based system.
#endif


/* Function only called from within flex, but defined
 * in iec.y!
 * We declare it here...
 *
 * Search for a symbol in either of the two symbol tables
 * and return the token id of the first symbol found.
 * Searches first in the variables, and only if not found
 * does it continue searching in the library elements
 */
//token_id_t get_identifier_token(const char *identifier_str);
int get_identifier_token(const char *identifier_str);
/***************************************************/
/* Forward Declaration of functions defined later. */
/***************************************************/
#line 231 "iec_flex.ll"
void UpdateTracking(const char *text);
/* return the character back to the input stream. */
void unput_char(const char c);
/* return all the text in the current token back to the input stream. */
void unput_text(int n);
/* return all the text in the current token back to the input stream, 
 * but first return to the stream an additional character to mark the end of the token. 
 */
void unput_and_mark(const char mark_char);

void include_file(const char *include_filename);

/* The body_state tries to find a ';' before a END_PROGRAM, END_FUNCTION or END_FUNCTION_BLOCK or END_ACTION
 * and ignores ';' inside comments and pragmas. This means that we cannot do this in a signle lex rule.
 * Body_state therefore stores ALL text we consume in every rule, so we can push it back into the buffer
 * once we have decided if we are parsing ST or IL code. The following functions manage that buffer used by
 * the body_state.
 */
void  append_bodystate_buffer(const char *text, int is_whitespace = 0);
void   unput_bodystate_buffer(void);
int  isempty_bodystate_buffer(void);
void     del_bodystate_buffer(void);


int GetNextChar(char *b, int maxBuffer);
/****************************/
/* Lexical Parser States... */
/****************************/
/* NOTE: Our psrser can parse st or il code, intermixed
 *       within the same file.
 *       With IL we come across the issue of the EOL (end of line) token.
 *       ST, and the declaration parts of IL do not use this token!
 *       If the lexical analyser were to issue this token during ST
 *       language parsing, or during the declaration of data types,
 *       function headers, etc. in IL, the syntax parser would crash.
 *
 *       We can solve this issue using one of three methods:
 *        (1) Augment all the syntax that does not accept the EOL
 *            token to simply ignore it. This makes the syntax
 *            definition (in iec.y) very cluttered!
 *        (2) Let the lexical parser figure out which language
 *            it is parsing, and decide whether or not to issue
 *            the EOL token. This requires the lexical parser
 *            to have knowledge of the syntax!, making for a poor
 *            overall organisation of the code. It would also make it
 *            very difficult to understand the lexical parser as it
 *            would use several states, and a state machine to transition
 *            between the states. The state transitions would be
 *            intermingled with the lexical parser defintion!
 *        (3) Use a mixture of (1) and (2). The lexical analyser
 *            merely distinguishes between function headers and function
 *            bodies, but no longer makes a distinction between il and
 *            st language bodies. When parsing a body, it will return
 *            the EOL token. In other states '\n' will be ignored as
 *            whitespace.
 *            The ST language syntax has been augmented in the syntax
 *            parser configuration to ignore any EOL tokens that it may
 *            come across!
 *            This option has both drawbacks of option (1) and (2), but
 *            much less intensely.
 *            The syntax that gets cluttered is limited to the ST statements
 *            (which is rather limited, compared to the function headers and
 *            data type declarations, etc...), while the state machine in
 *            the lexical parser becomes very simple. All state transitions
 *            can be handled within the lexical parser by itself, and can be
 *            easily identified. Thus knowledge of the syntax required by
 *            the lexical parser is very limited!
 *
 * Amazingly enough, I (Mario) got to implement option (3)
 * at first, requiring two basic states, decl and body.
 * The lexical parser will enter the body state when
 * it is parsing the body of a function/program/function block. The
 * state transition is done when we find a VAR_END that is not followed
 * by a VAR! This is the syntax knowledge that gets included in the
 * lexical analyser with this option!
 * Unfortunately, getting the st syntax parser to ignore EOL anywhere
 * where they might appear leads to conflicts. This is due to the fact
 * that the syntax parser uses the single look-ahead token to remove
 * possible conflicts. When we insert a possible EOL, the single
 * look ahead token becomes the EOL, which means the potential conflicts
 * could no longer be resolved.
 * Removing these conflicts would make the st syntax parser very convoluted,
 * and adding the extraneous EOL would make it very cluttered.
 * This option was therefore dropped in favour of another!
 *
 * I ended up implementing (2). Unfortunately the lexical analyser can
 * not easily distinguish between il and st code, since function
 * calls in il are very similar to function block calls in st.
 * We therefore use an extra 'body' state. When the lexical parser
 * finds that last END_VAR, it enters the body state. This state
 * must figure out what language is being parsed from the first few
 * tokens, and switch to the correct state (st, il or sfc) according to the
 * language. This means that we insert quite a bit of knowledge of the
 * syntax of the languages into the lexical parser. This is ugly, but it
 * works, and at least it is possible to keep all the state changes together
 * to make it easier to remove them later on if need be.
 * Once the language being parsed has been identified, 
 * the body state returns any matched text back to the buffer with unput(),
 * to be later matched correctly by the apropriate language parser (st, il or sfc).
 *
 * Aditionally, in sfc state it may further recursively enter the body state
 * once again. This is because an sfc body may contain ACTIONS, which are then
 * written in one of the three languages (ST, IL or SFC), so once again we need
 * to figure out which language the ACTION in the SFC was written in. We already
 * ahve all that done in the body state, so we recursively transition to the body 
 * state once again.
 * Note that in this case, when coming out of the st/il state (whichever language
 * the action was written in) the sfc state will become active again. This is done by
 * pushing and poping the previously active state!
 *
 * The sfc_qualifier_state is required because when parsing actions within an
 * sfc, we will be expecting action qualifiers (N, P, R, S, DS, SD, ...). In order
 * to bison to work correctly, these qualifiers must be returned as tokens. However,
 * these tokens are not reserved keywords, which means it should be possible to
 * define variables/functions/FBs with any of these names (including 
 * S and R which are special because they are also IL operators). So, when we are not
 * expecting any action qualifiers, flex does not return these tokens, and is free
 * to interpret them as previously defined variables/functions/... as the case may be.
 *
 * The time_literal_state is required because TIME# literals are decomposed into 
 * portions, and wewant to send these portions one by one to bison. Each poertion will 
 * represent the value in days/hours/minutes/seconds/ms.
 * Unfortunately, some of these portions may also be lexically analysed as an identifier. So,
 * we need to disable lexical identification of identifiers while parsing TIME# literals!
 * e.g.:  TIME#55d_4h_56m
 *       We would like to return to bison the tokens 'TIME' '#' '55d' '_' '4h' '_' '56m'
 *       Unfortunately, flex will join '_' and '4h' to create a legal {identifier} '_4h',
 *       and return that identifier instead! So, we added this state!
 *
 * The ignore_pou_state state is only used when bison says it is doing the pre-parsing.
 * During pre-parsing, the main state machine will only transition between
 * INITIAL and ignore_pou_state, and from here back to INITIAL. All other
 * transitions are inhibited. This inhibition is actually just enforced by making
 * sure that the INITIAL ---> ignore_pou_state transition is tested before all other
 * transitions coming out of INITIAL state. All other transitions are unaffected, as they
 * never get a chance to be evaluated when bison is doing pre-parsing.
 * Pre-parsing is a first quick scan through the whole input source code simply
 * to determine the list of POUs and datatypes that will be defined in that
 * code. Basically, the objective is to fill up the previously_declared_xxxxx
 * maps, without processing the code itself. Once these maps have been filled up,
 * bison will throw away the AST (abstract syntax tree) created up to that point, 
 * and scan through the same source code again, but this time creating a correct AST.
 * This pre-scan allows the source code to reference POUs and datatypes that are
 * only declared after they are used!
 * 
 *
 * Here is a main state machine...
 *                                                                         --+  
 *                                                                           |  these states are
 *              +------------> get_pou_name_state  ----> ignore_pou_state    |  only active 
 *              |                                            |               |  when bison is 
 *              |  ------------------------------------------+               |  doing the 
 *              |  |                                                         |  pre-parsing!!
 *              |  v                                                       --+
 *       +---> INITIAL <-------> config
 *       |        \
 *       |        V
 *       |   header_state
 *       |        |
 *       |        V
 *     vardecl_list_state <------> var_decl
 *       ^        | 
 *       |        | [using push()]
 *       |        |
 *       |        V
 *       |       body, 
 *       |        |
 *       |        | 
 *       |   -------------------
 *       |   |       |         |
 *       |   v       v         v
 *       |  st      il        sfc
 *       |   |       |         |  [using pop() when leaving st/il/sfc => goes to vardecl_list_state]
 *       |   |       |         |
 *       -----------------------
 *
 * NOTE:- When inside sfc, and an action or transition in ST/IL is found, then 
 *        we also push() to the body state. This means that sometimes, when pop()ing
 *        from st and il, the state machine may return to the sfc state!
 *      - The transitions form sfc to body will be decided by bison, which will
 *        tell flex to do the transition by calling cmd_goto_body_state().
 *   
 * 
 * Possible state changes are:
 *   INITIAL -> goto(ignore_pou_state)
 *               (This transition state is only used when bison says it is doing the pre-parsing.)
 *               (This transition takes precedence over all other transitions!)
 *               (when a FUNCTION, FUNCTION_BLOCK, PROGRAM or CONFIGURATION is found)
 * 
 *   INITIAL -> goto(config_state)
 *                (when a CONFIGURATION is found)
 * 
 *   INITIAL -> goto(header_state)
 *               (when a FUNCTION, FUNCTION_BLOCK, or PROGRAM is found)
 * 
 *   header_state -> goto(vardecl_list_state)
 *               (When the first VAR token is found, i.e. at begining of first VAR .. END_VAR declaration)
 * 
 *  vardecl_list_state -> push current state (vardecl_list_state), and goto(vardecl_state) 
 *                (when a VAR token is found)
 *   vardecl_state -> pop() to (vardecl_list_state) 
 *                (when a END_VAR token is found)
 * 
 *   vardecl_list_state -> push current state (vardecl_list_state), and goto(body_state) 
 *                (when the last END_VAR is found!)
 *
 *   body_state    -> goto(sfc_state)
 *                     (when it figures out it is parsing sfc language)
 *   body_state    -> goto(st_state)
 *                     (when it figures out it is parsing st language)
 *   body_state    -> goto(il_state)
 *                     (when it figures out it is parsing il language)
 *   st_state      -> pop() to vardecl_list_state
 *                     (when a END_FUNCTION, END_FUNCTION_BLOCK, END_PROGRAM,
 *                      END_ACTION or END_TRANSITION is found)
 *   il_state      -> pop() to vardecl_list_state
 *                     (when a END_FUNCTION, END_FUNCTION_BLOCK, END_PROGRAM,
 *                      END_ACTION or END_TRANSITION is found)
 *   sfc_state     -> pop() to vardecl_list_state
 *                     (when a END_FUNCTION, END_FUNCTION_BLOCK, or END_PROGRAM is found)
 * 
 *   ignore_pou_state   -> goto(INITIAL)
 *                         (when a END_FUNCTION, END_FUNCTION_BLOCK, END_PROGRAM or END_CONFIGURATION is found)
 *   vardecl_list_state -> goto(INITIAL)
 *                         (when a END_FUNCTION, END_FUNCTION_BLOCK, or END_PROGRAM is found)
 *   config_state       -> goto(INITIAL)
 *                         (when a END_CONFIGURATION is found)
 * 
 *  
 *   sfc_state     -> push current state(sfc_state); goto(body_state)
 *                     (when parsing an action. This transition is requested by bison)
 *   sfc_state     -> push current state(sfc_state); goto(sfc_qualifier_state)
 *                     (when expecting an action qualifier. This transition is requested by bison)
 *   sfc_qualifier_state -> pop() to sfc_state
 *                     (when no longer expecting an action qualifier. This transition is requested by bison)
 *
 *   config_state  -> push(config_state); goto(task_init_state)
 *                     (when parsing a task initialisation. This transition is requested by bison)
 *   task_init_state -> pop()
 *                     (when no longer parsing task initialisation parameters. This transition is requested by bison)
 *
 * 
 * There is another secondary state machine for parsing comments, another for file_includes, 
 * and yet another for time literals.
 */
/* Bison is in the pre-parsing stage, and we are parsing a POU. Ignore everything up to the end of the POU! */
#define ignore_pou_state 1

#define get_pou_name_state 2

/* we are parsing a configuration. */
#define config_state 3

/* Inside a configuration, we are parsing a task initialisation parameters */
/* This means that PRIORITY, SINGLE and INTERVAL must be handled as
 * tokens, and not as possible identifiers. Note that the above words
 * are not keywords.
 */
#define task_init_state 4

/* we are looking for the first VAR inside a function's, program's or function block's declaration */
/* This is not exclusive (%x) as we must be able to parse the identifier and data types of a function/FB */
#define header_state 5

/* we are parsing a function, program or function block sequence of VAR..END_VAR delcarations */
#define vardecl_list_state 6
 
/* a substate of the vardecl_list_state: we are inside a specific VAR .. END_VAR */
#define vardecl_state 7

/* we will be parsing a function body/action/transition. Whether il/st/sfc remains to be determined */
#define body_state 8

/* we are parsing il code -> flex must return the EOL tokens!       */
#define il_state 9

/* we are parsing st code -> flex must not return the EOL tokens!   */
#define st_state 10

/* we are parsing sfc code -> flex must not return the EOL tokens!  */
#define sfc_state 11

/* we are parsing sfc code, and expecting an action qualifier.      */
#define sfc_qualifier_state 12

/* we are parsing sfc code, and expecting the priority token.       */
#define sfc_priority_state 13

/* we are parsing a TIME# literal. We must not return any {identifier} tokens. */
#define time_literal_state 14

/* we are parsing a comment. */
#define comment_state 15

/*******************/
/* File #include's */
/*******************/
/* We extend the IEC 61131-3 standard syntax to allow inclusion
 * of other files, using the IEC 61131-3 pragma directive...
 * The accepted syntax is:
 *  {#include "<filename>"}
 */
/* the "include" states are used for picking up the name of an include file */
#define include_beg 16

#define include_filename 17

#define include_end 18

#line 554 "iec_flex.ll"

/* A counter to track the order by which each token is processed.
 * NOTE: This counter is not exactly linear (i.e., it does not get incremented by 1 for each token).
 *       i.e.. it may get incremented by more than one between two consecutive tokens.
 *       This is due to the fact that the counter gets incremented every 'user action' in flex,
 *       however not every user action will result in a token being passed to bison.
 *       Nevertheless this is still OK, as we are only interested in the relative
 *       ordering of tokens...
 */
static long int current_order = 0;
  
typedef struct {
    int eof;
    int lineNumber;
    int currentChar;
    int lineLength;
    int currentTokenStart;
    FILE *in_file;
  } tracking_t;

/* A forward declaration of a function defined at the end of this file. */
void FreeTracking(tracking_t *tracking);


#define MAX_INCLUDE_DEPTH 16

typedef struct {
	  YY_BUFFER_STATE buffer_state;
	  tracking_t *env;
	  const char *filename;
	} include_stack_t;

tracking_t * current_tracking = NULL;
tracking_t  previous_tracking;
include_stack_t include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

const char *INCLUDE_DIRECTORIES[] = {
	DEFAULT_LIBDIR,
	".",
	"/lib",
	"/usr/lib",
	"/usr/lib/iec",
	NULL /* must end with NULL!! */
	};
/*****************************/
/* Prelimenary constructs... */
/*****************************/
/* PRAGMAS */
/* ======= */
/* In order to allow the declaration of POU prototypes (Function, FB, Program, ...),
 * especially the prototypes of Functions and FBs defined in the standard
 * (i.e. standard functions and FBs), we extend the IEC 61131-3 standard syntax 
 * with two pragmas to indicate that the code is to be parsed (going through the 
 * lexical, syntactical, and semantic analysers), but no code is to be generated.
 * 
 * The accepted syntax is:
 *  {no_code_generation begin}
 *    ... prototypes ...
 *  {no_code_generation end}
 * 
 * When parsing these prototypes the abstract syntax tree will be populated as usual,
 * allowing the semantic analyser to correctly analyse the semantics of calls to these
 * functions/FBs. However, stage4 will simply ignore all IEC61131-3 code
 * between the above two pragmas.
 */
/* Any other pragma... */
/* COMMENTS */
/* ======== */
/* In order to allow nested comments, comments are handled by a specific comment_state state */
/* Whenever a "(*" is found, we push the current state onto the stack, and enter a new instance of the comment_state state.
 * Whenever a "*)" is found, we pop a state off the stack
 */
/* comments... */
/* However, bison has a shift/reduce conflict in bison, when parsing formal function/FB
 * invocations with the 'NOT <variable_name> =>' syntax (which needs two look ahead 
 * tokens to be parsed correctly - and bison being LALR(1) only supports one).
 * The current work around requires flex to completely parse the '<variable_name> =>'
 * sequence. This sequence includes whitespace and/or comments between the 
 * <variable_name> and the "=>" token.
 * 
 * This flex rule (sendto_identifier_token) uses the whitespace/comment as trailing context,
 * which means we can not use the comment_state method of specifying/finding and ignoring 
 * comments.
 * 
 * For this reason only, we must also define what a complete comment looks like, so
 * it may be used in this rule. Since the rule uses the whitespace_or_comment
 * construct as trailing context, this definition of comment must not use any
 * trailing context either.
 * 
 * Aditionally, it is not possible to define nested comments in flex without the use of
 * states, so for this particular location, we do NOT support nested comments.
 */
/* NOTE: this seemingly unnecessary complex definition is required
 *       to be able to eat up comments such as:
 *          '(* Testing... ! ***** ******)'
 *       without using the trailing context command in flex (/{context})
 *       since {comment} itself will later be used with
 *       trailing context ({comment}/{context})
 */
/* 3.1 Whitespace */
/* ============== */
/*
 * Whitespace is clearly defined (see IEC 61131-3 v2, section 2.1.4)
 * 
 * Whitespace definition includes the newline character.
 * 
 * However, the standard is inconsistent in that in IL the newline character 
 * is considered a token (EOL - end of line). 
 * In our implementation we therefore have two definitions of whitespace
 *   - one for ST, that includes the newline character
 *   - one for IL without the newline character.
 *
 * IL whitespace is only active while parsing IL code, whereas ST whitespace
 * is used in all other circumstances. Additionally, when parsing IL, the newline
 * character is treated as the EOL token.
 * The above requires the use of a state machine in the lexical parser to track which
 * language is being parsed. This requires that the lexical parser (i.e. flex)
 * have some knowledge of the syntax itself.
 *
 * NOTE: Our definition of whitespace will only work in ASCII!
 *
 * NOTE: we cannot use
 *         st_whitespace	[:space:]*
 *       since we use {st_whitespace} as trailing context. In our case
 *       this would not constitute "dangerous trailing context", but the
 *       lexical generator (i.e. flex) does not know this (since it does
 *       not know which characters belong to the set [:space:]), and will
 *       generate a "dangerous trailing context" warning!
 *       We use this alternative just to stop the flex utility from
 *       generating the invalid (in this case) warning...
 */
/* NOTE: il_whitespace_char is not currenty used, be we include it for completeness */ 
/*****************************************/
/* B.1.1 Letters, digits and identifiers */
/*****************************************/
/* NOTE: The following definitions only work if the host computer
 *       is using the ASCII maping. For e.g., with EBCDIC [A-Z]
 *       contains non-alphabetic characters!
 *       The correct way of doing it would be to use
 *       the [:upper:] etc... definitions.
 *
 *       Unfortunately, further on we need all printable
 *       characters (i.e. [:print:]), but excluding '$'.
 *       Flex does not allow sets to be composed by excluding
 *       elements. Sets may only be constructed by adding new
 *       elements, which means that we have to revert to
 *       [\x20\x21\x23\x25\x26\x28-x7E] for the definition
 *       of the printable characters with the required exceptions.
 *       The above also implies the use of ASCII, but now we have
 *       no way to work around it|
 *
 *       The conclusion is that our parser is limited to ASCII
 *       based host computers!!
 */
/*******************/
/* B.1.2 Constants */
/*******************/
/******************************/
/* B.1.2.1   Numeric literals */
/******************************/
/* Some helper symbols for parsing TIME literals... */
/* The correct definition for real would be:
 * real		{integer}\.{integer}({exponent}?)
 *
 * Unfortunately, the spec also defines fixed_point (B 1.2.3.1) as:
 * fixed_point		{integer}\.{integer}
 *
 * This means that {integer}\.{integer} could be interpreted
 * as either a fixed_point or a real.
 * I have opted to interpret {integer}\.{integer} as a fixed_point.
 * In order to do this, the definition of real has been changed to:
 * real		{integer}\.{integer}{exponent}
 *
 * This means that the syntax parser now needs to define a real to be
 * either a real_token or a fixed_point_token!
 */
/*******************************/
/* B.1.2.2   Character Strings */
/*******************************/
/*
common_character_representation :=
<any printable character except '$', '"' or "'">
|'$$'
|'$L'|'$N'|'$P'|'$R'|'$T'
|'$l'|'$n'|'$p'|'$r'|'$t'

NOTE: 	$ = 0x24
	" = 0x22
	' = 0x27

	printable chars in ASCII: 0x20-0x7E
*/
/* WARNING:
 * This definition is only valid in ASCII...
 *
 * Flex includes the function print_char() that defines
 * all printable characters portably (i.e. whatever character
 * encoding is currently being used , ASCII, EBCDIC, etc...)
 * Unfortunately, we cannot generate the definition of
 * common_character_representation portably, since flex
 * does not allow definition of sets by subtracting
 * elements in one set from another set.
 * This means we must build up the defintion of
 * common_character_representation using only set addition,
 * which leaves us with the only choice of defining the
 * characters non-portably...
 */
/************************/
/* B 1.2.3.1 - Duration */
/************************/
/* NOTE: The IEC 61131-3 v2 standard has an incorrect formal syntax definition of duration,
 *       as its definition does not match the standard's text.
 *       IEC 61131-3 v3 (committee draft) seems to have this fixed, so we use that
 *       definition instead!
 *
 *       duration::= ('T' | 'TIME') '#' ['+'|'-'] interval
 *       interval::= days | hours | minutes | seconds | milliseconds
 *       fixed_point  ::= integer [ '.' integer]
 *       days         ::= fixed_point 'd' | integer 'd' ['_'] [ hours ]
 *       hours        ::= fixed_point 'h' | integer 'h' ['_'] [ minutes ]
 *       minutes      ::= fixed_point 'm' | integer 'm' ['_'] [ seconds ]
 *       seconds      ::= fixed_point 's' | integer 's' ['_'] [ milliseconds ]
 *       milliseconds ::= fixed_point 'ms'
 * 
 * 
 *  The original IEC 61131-3 v2 definition is:
 *       duration ::= ('T' | 'TIME') '#' ['-'] interval
 *       interval ::= days | hours | minutes | seconds | milliseconds
 *       fixed_point  ::= integer [ '.' integer]
 *       days         ::= fixed_point 'd' | integer 'd' ['_'] hours
 *       hours        ::= fixed_point 'h' | integer 'h' ['_'] minutes
 *       minutes      ::= fixed_point 'm' | integer 'm' ['_'] seconds
 *       seconds      ::= fixed_point 's' | integer 's' ['_'] milliseconds
 *       milliseconds ::= fixed_point 'ms'
 */
/* to help provide nice error messages, we also parse an incorrect but plausible interval... */
/* NOTE that this erroneous interval will be parsed outside the time_literal_state, so must not 
 *      be able to parse any other legal lexcial construct (besides a legal interval, but that
 *      is OK as this rule will appear _after_ the rule to parse legal intervals!).
 */
/********************************************/
/* B.1.4.1   Directly Represented Variables */
/********************************************/
/* The correct definition, if the standard were to be followed... */
/* For the MatPLC, we will accept %<identifier>
 * as a direct variable, this being mapped onto the MatPLC point
 * named <identifier>
 */
/* TODO: we should not restrict it to only the accepted syntax
 * of <identifier> as specified by the standard. MatPLC point names
 * have a more permissive syntax.
 *
 * e.g. "P__234"
 *    Is a valid MatPLC point name, but not a valid <identifier> !!
 *    The same happens with names such as "333", "349+23", etc...
 *    How can we handle these more expressive names in our case?
 *    Remember that some direct variable may remain anonymous, with
 *    declarations such as:
 *    VAR
 *       AT %I3 : BYTE := 255;
 *    END_VAR
 *    in which case we are currently using "%I3" as the variable
 *    name.
 */
/* direct_variable_matplc		%{identifier} */
/* direct_variable			{direct_variable_standard}|{direct_variable_matplc} */
/******************************************/
/* B 1.4.3 - Declaration & Initialisation */
/******************************************/
#line 5432 "F:/vsproject/matiec-vs/stage1_2/iec_flex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 943 "iec_flex.ll"

	/* fprintf(stderr, "flex: state %d\n", YY_START); */

	/*****************************************************/
	/*****************************************************/
	/*****************************************************/
	/*****                                           *****/
	/*****                                           *****/
	/*****   F I R S T    T H I N G S    F I R S T   *****/
	/*****                                           *****/
	/*****                                           *****/
	/*****************************************************/
	/*****************************************************/
	/*****************************************************/

	/***********************************************************/
	/* Handle requests sent by bison for flex to change state. */
	/***********************************************************/
	if (get_goto_body_state()) {
	  yy_push_state(body_state);
	  rst_goto_body_state();
	}

	if (get_goto_sfc_qualifier_state()) {
	  yy_push_state(sfc_qualifier_state);
	  rst_goto_sfc_qualifier_state();
	}

	if (get_goto_sfc_priority_state()) {
	  yy_push_state(sfc_priority_state);
	  rst_goto_sfc_priority_state();
	}

	if (get_goto_task_init_state()) {
	  yy_push_state(task_init_state);
	  rst_goto_task_init_state();
	}

	if (get_pop_state()) {
	  yy_pop_state();
	  rst_pop_state();
	}

	/***************************/
	/* Handle the pragmas!     */
	/***************************/

	/* We start off by searching for the pragmas we handle in the lexical parser. */
#line 5632 "F:/vsproject/matiec-vs/stage1_2/iec_flex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2878 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 12721 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 991 "iec_flex.ll"
unput_text(0); yy_push_state(include_beg);
	YY_BREAK
/* Pragmas sent to syntax analyser (bison) */
/* NOTE: In the vardecl_list_state we only process the pragmas between two consecutive VAR .. END_VAR blocks.
	 *       We do not process any pragmas trailing after the last END_VAR. We leave that to the body_state.
	 *       This is because the pragmas are stored in a statement_list or instruction_list (in bison),
	 *       but these lists must start with the special tokens start_IL_body_token/start_ST_body_token.
	 *       This means that these special tokens must be generated (by the body_state) before processing
	 *       the pragme => we cannot process the trailing pragmas in the vardecl_list_state state.
	 */
case 2:
YY_RULE_SETUP
#line 1001 "iec_flex.ll"
return disable_code_generation_pragma_token;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1002 "iec_flex.ll"
return enable_code_generation_pragma_token;
	YY_BREAK
case 4:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 25;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1003 "iec_flex.ll"
return disable_code_generation_pragma_token; 
	YY_BREAK
case 5:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 24;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1004 "iec_flex.ll"
return enable_code_generation_pragma_token;  
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 1005 "iec_flex.ll"
append_bodystate_buffer(yytext); /* in body state we do not process any tokens, we simply store them for later processing! */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 1006 "iec_flex.ll"
append_bodystate_buffer(yytext); /* in body state we do not process any tokens, we simply store them for later processing! */
	YY_BREAK
/* Any other pragma we find, we just pass it up to the syntax parser...   */
/* Note that the <body_state> state is exclusive, so we have to include it here too. */
case 8:
YY_RULE_SETUP
#line 1009 "iec_flex.ll"
append_bodystate_buffer(yytext); /* in body state we do not process any tokens, we simply store them for later processing! */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 1010 "iec_flex.ll"
{/* return the pragmma without the enclosing '{' and '}' */
		 int cut = yytext[1]=='{'?2:1;
		 yytext[strlen(yytext)-cut] = '\0';
		 yylval.ID=strdup(yytext+cut);
		 return pragma_token;
		}
	YY_BREAK
case 10:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1016 "iec_flex.ll"
{/* return the pragmma without the enclosing '{' and '}' */
		 int cut = yytext[1]=='{'?2:1;
		 yytext[strlen(yytext)-cut] = '\0';
		 yylval.ID=strdup(yytext+cut);
		 return pragma_token;
		}
	YY_BREAK
/*********************************/
/* Handle the file includes!     */
/*********************************/
case 11:
YY_RULE_SETUP
#line 1027 "iec_flex.ll"
BEGIN(include_filename);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1029 "iec_flex.ll"
{
			  /* set the internal state variables of lexical analyser to process a new include file */
			  include_file(yytext);
			  /* switch to whatever state was active before the include file */
			  yy_pop_state();
			  /* now process the new file... */
			}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ignore_pou_state):
case YY_STATE_EOF(get_pou_name_state):
case YY_STATE_EOF(config_state):
case YY_STATE_EOF(task_init_state):
case YY_STATE_EOF(header_state):
case YY_STATE_EOF(vardecl_list_state):
case YY_STATE_EOF(vardecl_state):
case YY_STATE_EOF(body_state):
case YY_STATE_EOF(il_state):
case YY_STATE_EOF(st_state):
case YY_STATE_EOF(sfc_state):
case YY_STATE_EOF(sfc_qualifier_state):
case YY_STATE_EOF(sfc_priority_state):
case YY_STATE_EOF(time_literal_state):
case YY_STATE_EOF(comment_state):
case YY_STATE_EOF(include_beg):
case YY_STATE_EOF(include_filename):
case YY_STATE_EOF(include_end):
#line 1038 "iec_flex.ll"
{     /* NOTE: Currently bison is incorrectly using END_OF_INPUT in many rules
			       *       when checking for syntax errors in the input source code.
			       *       This means that in reality flex will be asked to carry on reading the input
			       *       even after it has reached the end of all (including the main) input files.
			       *       In other owrds, we will be called to return more tokens, even after we have
			       *       already returned an END_OF_INPUT token. In this case, we must carry on returning
			       *       more END_OF_INPUT tokens.
			       * 
			       *       However, in the above case we will be asked to carry on reading more tokens 
			       *       from the main input file, after we have reached the end. For this to work
			       *       correctly, we cannot close the main input file!
			       * 
			       *       This is why we WILL be called with include_stack_ptr == 0 multiple times,
			       *       and why we must handle it as a special case
			       *       that leaves the include_stack_ptr unchanged, and returns END_OF_INPUT once again.
			       * 
			       *       As a corollory, flex can never safely close the main input file, and we must ask
			       *       bison to close it!
			       */
			  if (include_stack_ptr == 0) {
			      // fclose(yyin);           // Must not do this!!
			      // FreeTracking(current_tracking); // Must not do this!!
			      /* yyterminate() terminates the scanner and returns a 0 to the 
			       * scanner's  caller, indicating "all done".
			       *	
			       * Our syntax parser (written with bison) has the token	
			       * END_OF_INPUT associated to the value 0, so even though
			       * we don't explicitly return the token END_OF_INPUT
			       * calling yyterminate() is equivalent to doing that. 
			       */ 	
			    yyterminate();
			  } else {
			    fclose(yyin);
			    FreeTracking(current_tracking);
			    --include_stack_ptr;
			    yy_delete_buffer(YY_CURRENT_BUFFER);
			    yy_switch_to_buffer((include_stack[include_stack_ptr]).buffer_state);
			    current_tracking = include_stack[include_stack_ptr].env;
			      /* removing constness of char *. This is safe actually,
			       * since the only real const char * that is stored on the stack is
			       * the first one (i.e. the one that gets stored in include_stack[0],
			       * which is never free'd!
			       */
			    /* NOTE: We do __NOT__ free the malloc()'d memory since 
			     *       pointers to this filename will be kept by many objects
			     *       in the abstract syntax tree.
			     *       This will later be used to provide correct error
			     *       messages during semantic analysis (stage 3)
			     */
			    /* free((char *)current_filename); */
			    current_filename = include_stack[include_stack_ptr].filename;
			    yy_push_state(include_end);
			  }
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1093 "iec_flex.ll"
yy_pop_state();
	YY_BREAK
/* handle the artificial file includes created by include_string(), which do not end with a '}' */
case 14:
YY_RULE_SETUP
#line 1095 "iec_flex.ll"
unput_text(0); yy_pop_state(); 
	YY_BREAK
/*********************************/
/* Handle all the state changes! */
/*********************************/
/* INITIAL -> header_state */

case 15:
YY_RULE_SETUP
#line 1104 "iec_flex.ll"
if (get_preparse_state()) BEGIN(get_pou_name_state); else {BEGIN(header_state);/* printf("\nChanging to header_state\n"); */} return FUNCTION;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1105 "iec_flex.ll"
if (get_preparse_state()) BEGIN(get_pou_name_state); else {BEGIN(header_state);/* printf("\nChanging to header_state\n"); */} return FUNCTION_BLOCK;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1106 "iec_flex.ll"
if (get_preparse_state()) BEGIN(get_pou_name_state); else {BEGIN(header_state);/* printf("\nChanging to header_state\n"); */} return PROGRAM;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1107 "iec_flex.ll"
if (get_preparse_state()) BEGIN(get_pou_name_state); else {BEGIN(config_state);/* printf("\nChanging to config_state\n"); */} return CONFIGURATION;
	YY_BREAK


case 19:
YY_RULE_SETUP
#line 1111 "iec_flex.ll"
BEGIN(ignore_pou_state); yylval.ID=strdup(yytext); return identifier_token;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1112 "iec_flex.ll"
BEGIN(ignore_pou_state); unput_text(0);
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 1116 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1117 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1118 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1119 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1120 "iec_flex.ll"
{}/* Ignore text inside POU! (including the '\n' character!)) */
	YY_BREAK

/* header_state -> (vardecl_list_state) */
/* NOTE: This transition assumes that all POUs with code (Function, FB, and Program) will always contain
	 *       at least one VAR_XXX block.
	 *      How about functions that do not declare variables, and go directly to the body_state???
	 *      - According to Section 2.5.1.3 (Function Declaration), item 2 in the list, a FUNCTION
	 *        must have at least one input argument, so a correct declaration will have at least
	 *        one VAR_INPUT ... VAR_END construct!
	 *      - According to Section 2.5.2.2 (Function Block Declaration), a FUNCTION_BLOCK
	 *        must have at least one input argument, so a correct declaration will have at least
	 *        one VAR_INPUT ... VAR_END construct!
	 *      - According to Section 2.5.3 (Programs), a PROGRAM must have at least one input
	 *        argument, so a correct declaration will have at least one VAR_INPUT ... VAR_END
	 *        construct!
	 *
	 *       All the above means that we needn't worry about PROGRAMs, FUNCTIONs or
	 *       FUNCTION_BLOCKs that do not have at least one VAR_END before the body_state.
	 *       If the code has an error, and no VAR_END before the body, we will simply
	 *       continue in the <vardecl_state> state, until the end of the FUNCTION, FUNCTION_BLOCK
	 *       or PROGAM.
	 * 
	 * WARNING: From 2016-05 (May 2016) onwards, matiec supports a non-standard option in which a Function
	 *          may be declared with no Input, Output or IN_OUT variables. This means that the above 
	 *          assumption is no longer valid.
	 * 
	 * NOTE: Some code being parsed may be erroneous and not contain any VAR END_VAR block.
	 *       To generate error messages that make sense, the flex state machine should not get lost
	 *       in these situations. We therefore consider the possibility of finding 
	 *       END_FUNCTION, END_FUNCTION_BLOCK or END_PROGRAM when inside the header_state.
	 */

case 26:
#line 1155 "iec_flex.ll"
case 27:
#line 1156 "iec_flex.ll"
case 28:
#line 1157 "iec_flex.ll"
case 29:
#line 1158 "iec_flex.ll"
case 30:
#line 1159 "iec_flex.ll"
case 31:
#line 1160 "iec_flex.ll"
case 32:
#line 1161 "iec_flex.ll"
case 33:
#line 1162 "iec_flex.ll"
case 34:
YY_RULE_SETUP
#line 1162 "iec_flex.ll"
unput_text(0); BEGIN(vardecl_list_state);
	YY_BREAK
case 35:
#line 1165 "iec_flex.ll"
case 36:
#line 1166 "iec_flex.ll"
case 37:
YY_RULE_SETUP
#line 1166 "iec_flex.ll"
unput_text(0); BEGIN(vardecl_list_state); 
	YY_BREAK
/* Notice that we do NOT go directly to body_state, as that requires a push().
				 * If we were to puch to body_state here, then the corresponding pop() at the
				 *end of body_state would return to header_state.
				 * After this pop() header_state would not return to INITIAL as it should, but
				 * would instead enter an infitie loop push()ing again to body_state
				 */

/* vardecl_list_state -> (vardecl_state | body_state | INITIAL) */

/* NOTE: vardecl_list_state is an exclusive state, i.e. when in this state
				 *       default rules do not apply! This means that when in this state identifiers
				 *       are not recognised!
				 * NOTE: Notice that we only change to vardecl_state if the VAR*** is followed by 
				 *       at least one whitespace. This is to dintinguish the VAR declaration
				 *       from identifiers starting with 'var' (e.g. a variable named 'varint')
				 * NOTE: Notice that we cannot use st_whitespace here, as it can legally be empty.
				 *       We therefore use st_whitespace_char instead.
				 */  
case 38:
#line 1188 "iec_flex.ll"
case 39:
#line 1189 "iec_flex.ll"
case 40:
#line 1190 "iec_flex.ll"
case 41:
#line 1191 "iec_flex.ll"
case 42:
#line 1192 "iec_flex.ll"
case 43:
#line 1193 "iec_flex.ll"
case 44:
#line 1194 "iec_flex.ll"
case 45:
#line 1195 "iec_flex.ll"
case 46:
YY_RULE_SETUP
#line 1195 "iec_flex.ll"
unput_text(0); yy_push_state(vardecl_state); //printf("\nChanging to vardecl_state\n");
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1197 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1198 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1199 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
/* NOTE: Handling of whitespace...
				 *   - Must come __before__ the next rule for any single character '.'
				 *   - If the rules were reversed, any whitespace with a single space (' ') 
				 *     would be handled by the '.' rule instead of the {whitespace} rule!
				 */
case 50:
YY_RULE_SETUP
#line 1206 "iec_flex.ll"
/* Eat any whitespace */ 
	YY_BREAK
/* anything else, just change to body_state! */
case 51:
YY_RULE_SETUP
#line 1209 "iec_flex.ll"
unput_text(0); yy_push_state(body_state); //printf("\nChanging to body_state\n");
	YY_BREAK

/* vardecl_list_state -> pop to $previous_state (vardecl_list_state) */

case 52:
YY_RULE_SETUP
#line 1215 "iec_flex.ll"
yy_pop_state(); return END_VAR; /* pop back to vardecl_list_state */
	YY_BREAK

/* body_state -> (il_state | st_state | sfc_state) */

case 53:
YY_RULE_SETUP
#line 1221 "iec_flex.ll"
{/* In body state we do not process any tokens,
				  * we simply store them for later processing!
				  * NOTE: we must return ALL text when in body_state, including
				  * all comments and whitespace, so as not
				  * to lose track of the line_number and column number
				  * used when printing debugging messages.
				  * NOTE: some of the following rules depend on the fact that 
				  * the body state buffer is either empty or only contains white space up to
				  * that point. Since the vardecl_list_state will eat up all
				  * whitespace before entering the body_state, the contents of the bodystate_buffer
				  * will _never_ start with whitespace if the previous state was vardecl_list_state. 
				  * However, it is possible to enter the body_state from other states (e.g. when 
				  * parsing SFC code, that contains transitions or actions in other languages)
				  */
				 append_bodystate_buffer(yytext, 1 /* is whitespace */); 
				}
	YY_BREAK
/* 'INITIAL_STEP' always used in beginning of SFCs !! */
case 54:
YY_RULE_SETUP
#line 1238 "iec_flex.ll"
{ if (isempty_bodystate_buffer())	{unput_text(0); del_bodystate_buffer(); BEGIN(sfc_state);}
				  else					{append_bodystate_buffer(yytext);}
				}
	YY_BREAK
/* ':=', at the very beginning of a 'body', occurs only in transitions and not Function, FB, or Program bodies! */
case 55:
YY_RULE_SETUP
#line 1243 "iec_flex.ll"
{ if (isempty_bodystate_buffer())	{unput_text(0); del_bodystate_buffer(); BEGIN(st_state);} /* We do _not_ return a start_ST_body_token here, as bison does not expect it! */
				  else				 	{append_bodystate_buffer(yytext);}
				}
	YY_BREAK
/* check if ';' occurs before an END_FUNCTION, END_FUNCTION_BLOCK, END_PROGRAM, END_ACTION or END_TRANSITION. (If true => we are parsing ST; If false => parsing IL). */
case 56:
#line 1249 "iec_flex.ll"
case 57:
#line 1250 "iec_flex.ll"
case 58:
#line 1251 "iec_flex.ll"
case 59:
#line 1252 "iec_flex.ll"
case 60:
YY_RULE_SETUP
#line 1252 "iec_flex.ll"
{ append_bodystate_buffer(yytext); unput_bodystate_buffer(); BEGIN(il_state); /*printf("returning start_IL_body_token\n");*/ return start_IL_body_token;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1253 "iec_flex.ll"
{ append_bodystate_buffer(yytext);
				  if (strcmp(yytext, ";") == 0)
				    {unput_bodystate_buffer(); BEGIN(st_state); /*printf("returning start_ST_body_token\n");*/ return start_ST_body_token;}
				}
	YY_BREAK
/* The following rules are not really necessary. They just make compilation faster in case the ST Statement List starts with one fot he following... */
case 62:
#line 1259 "iec_flex.ll"
case 63:
#line 1260 "iec_flex.ll"
case 64:
#line 1261 "iec_flex.ll"
case 65:
#line 1262 "iec_flex.ll"
case 66:
#line 1263 "iec_flex.ll"
case 67:
#line 1264 "iec_flex.ll"
case 68:
YY_RULE_SETUP
#line 1264 "iec_flex.ll"
{ if (isempty_bodystate_buffer())	{unput_text(0); del_bodystate_buffer(); BEGIN(st_state); return start_ST_body_token;}
				  else				 	{append_bodystate_buffer(yytext);}
				}
	YY_BREAK
/* end of body_state lexical parser */
/* (il_state | st_state) -> pop to $previous_state (vardecl_list_state or sfc_state) */

case 69:
YY_RULE_SETUP
#line 1273 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1274 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1275 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1276 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1277 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK

/* sfc_state -> pop to $previous_state (vardecl_list_state or sfc_state) */

case 74:
YY_RULE_SETUP
#line 1282 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1283 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1284 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK

/* config -> INITIAL */
case 77:
YY_RULE_SETUP
#line 1288 "iec_flex.ll"
BEGIN(INITIAL); return END_CONFIGURATION;
	YY_BREAK
/***************************************/
/* Next is to to remove all whitespace */
/***************************************/
/* NOTE: pragmas are handled right at the beginning... */
/* The whitespace */
case 78:
YY_RULE_SETUP
#line 1298 "iec_flex.ll"
/* Eat any whitespace */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1299 "iec_flex.ll"
/* Eat any whitespace */
	YY_BREAK
/* NOTE: Due to the need of having the following rule have higher priority,
  *        the following rule was moved to an earlier position in this file.
<body_state>{st_whitespace}		{...}
 */
/* The comments */
case 80:
YY_RULE_SETUP
#line 1306 "iec_flex.ll"
yy_push_state(comment_state);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1307 "iec_flex.ll"
yy_push_state(comment_state);
	YY_BREAK

case 82:
YY_RULE_SETUP
#line 1309 "iec_flex.ll"
{if (get_opt_nested_comments()) yy_push_state(comment_state);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1310 "iec_flex.ll"
yy_pop_state();
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1311 "iec_flex.ll"
/* Ignore text inside comment! */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1312 "iec_flex.ll"
/* Ignore text inside comment! */
	YY_BREAK

/*****************************************/
/* B.1.1 Letters, digits and identifiers */
/*****************************************/
/* NOTE: 'R1', 'IN', etc... are IL operators, and therefore tokens
	 *       On the other hand, the spec does not define them as keywords,
	 *       which means they may be re-used for variable names, etc...!
	 *       The syntax parser already caters for the possibility of these
	 *       tokens being used for variable names in their declarations.
	 *       When they are declared, they will be added to the variable symbol table!
	 *       Further appearances of these tokens must no longer be parsed
	 *       as R1_tokens etc..., but rather as variable_name_tokens!
	 *
	 *       That is why the first thing we do with identifiers, even before
	 *       checking whether they may be a 'keyword', is to check whether
	 *       they have been previously declared as a variable name,
	 *
	 *       However, we have a dilema! Should we here also check for
	 *       prev_declared_derived_function_name_token?
	 *       If we do, then the 'MOD' default library function (defined in
	 *       the standard) will always be returned as a function name, and
	 *       it will therefore not be possible to use it as an operator as 
	 *       in the following ST expression 'X := Y MOD Z;' !
	 *       If we don't, then even it will not be possible to use 'MOD'
	 *       as a funtion as in 'X := MOD(Y, Z);'
	 *       We solve this by NOT testing for function names here, and
	 *       handling this function and keyword clash in bison!
	 */
/* NOTE: The following code has been commented out as most users do not want matiec
	 *       to allow the use of 'R1', 'IN' ... IL operators as identifiers, 
	 *       even though a literal reading of the standard allows this.
	 *       We could add this as a commadnd line option, but it is not yet done.
	 *       For now we just comment out the code, but leave it the commented code
	 *       in so we can re-activate quickly (without having to go through old commits
	 *       in the mercurial repository to figure out the missing code!
	 */
/*
{identifier} 	{int token = get_identifier_token(yytext);
		 // fprintf(stderr, "flex: analysing identifier '%s'...", yytext); 
		 if ((token == prev_declared_variable_name_token) ||
//		     (token == prev_declared_derived_function_name_token) || // DO NOT add this condition!
		     (token == prev_declared_fb_name_token)) {
		 // if (token != identifier_token)
		 // * NOTE: if we replace the above uncommented conditions with
                  *       the simple test of (token != identifier_token), then 
                  *       'MOD' et al must be removed from the 
                  *       library_symbol_table as a default function name!
		  * //
		   yylval.ID=strdup(yytext);
		   // fprintf(stderr, "returning token %d\n", token); 
		   return token;
		 }
		 // otherwise, leave it for the other lexical parser rules... 
		 // fprintf(stderr, "rejecting\n"); 
		 REJECT;
		}
 */
/******************************************************/
/******************************************************/
/******************************************************/
/*****                                            *****/
/*****                                            *****/
/*****   N O W    D O   T H E   K E Y W O R D S   *****/
/*****                                            *****/
/*****                                            *****/
/******************************************************/
/******************************************************/
/******************************************************/
case 86:
YY_RULE_SETUP
#line 1385 "iec_flex.ll"
{if (get_opt_ref_standard_extensions()) return REF;        else{REJECT;}}		/* Keyword in IEC 61131-3 v3 */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1386 "iec_flex.ll"
{if (get_opt_ref_standard_extensions()) return DREF;       else{REJECT;}}		/* Keyword in IEC 61131-3 v3 */
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1387 "iec_flex.ll"
{if (get_opt_ref_standard_extensions()) return REF_TO;     else{REJECT;}}		/* Keyword in IEC 61131-3 v3 */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1388 "iec_flex.ll"
{if (get_opt_ref_standard_extensions()) return NULL_token; else{REJECT;}}		/* Keyword in IEC 61131-3 v3 */
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1390 "iec_flex.ll"
return EN;			/* Keyword */
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1391 "iec_flex.ll"
return ENO;			/* Keyword */
	YY_BREAK
/******************************/
/* B 1.2.1 - Numeric Literals */
/******************************/
case 92:
YY_RULE_SETUP
#line 1397 "iec_flex.ll"
return TRUE;		/* Keyword */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1398 "iec_flex.ll"
return boolean_true_literal_token;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1399 "iec_flex.ll"
return boolean_true_literal_token;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1400 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return safeboolean_true_literal_token;} else{REJECT;}} /* Keyword (Data Type) */ 
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1401 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return safeboolean_true_literal_token;} else{REJECT;}} /* Keyword (Data Type) */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1403 "iec_flex.ll"
return FALSE;		/* Keyword */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1404 "iec_flex.ll"
return boolean_false_literal_token;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1405 "iec_flex.ll"
return boolean_false_literal_token;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1406 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return safeboolean_false_literal_token;} else{REJECT;}} /* Keyword (Data Type) */ 
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1407 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return safeboolean_false_literal_token;} else{REJECT;}} /* Keyword (Data Type) */
	YY_BREAK
/************************/
/* B 1.2.3.1 - Duration */
/************************/
case 102:
YY_RULE_SETUP
#line 1413 "iec_flex.ll"
return T_SHARP;		/* Delimiter */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1414 "iec_flex.ll"
return T_SHARP;		/* Delimiter */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1415 "iec_flex.ll"
return TIME;		/* Keyword (Data Type) */
	YY_BREAK
/************************************/
/* B 1.2.3.2 - Time of day and Date */
/************************************/
case 105:
YY_RULE_SETUP
#line 1421 "iec_flex.ll"
return TIME_OF_DAY;	/* Keyword (Data Type) */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1422 "iec_flex.ll"
return TIME_OF_DAY;	/* Keyword (Data Type) */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1423 "iec_flex.ll"
return DATE;		/* Keyword (Data Type) */
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1424 "iec_flex.ll"
return D_SHARP;		/* Delimiter */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1425 "iec_flex.ll"
return D_SHARP;		/* Delimiter */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1426 "iec_flex.ll"
return DATE_AND_TIME;	/* Keyword (Data Type) */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1427 "iec_flex.ll"
return DATE_AND_TIME;	/* Keyword (Data Type) */
	YY_BREAK
/***********************************/
/* B 1.3.1 - Elementary Data Types */
/***********************************/
case 112:
YY_RULE_SETUP
#line 1433 "iec_flex.ll"
return BOOL;		/* Keyword (Data Type) */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1435 "iec_flex.ll"
return BYTE;		/* Keyword (Data Type) */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1436 "iec_flex.ll"
return WORD;		/* Keyword (Data Type) */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1437 "iec_flex.ll"
return DWORD;		/* Keyword (Data Type) */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1438 "iec_flex.ll"
return LWORD;		/* Keyword (Data Type) */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1440 "iec_flex.ll"
return SINT;		/* Keyword (Data Type) */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1441 "iec_flex.ll"
return INT;		/* Keyword (Data Type) */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1442 "iec_flex.ll"
return DINT;		/* Keyword (Data Type) */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1443 "iec_flex.ll"
return LINT;		/* Keyword (Data Type) */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1445 "iec_flex.ll"
return USINT;		/* Keyword (Data Type) */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1446 "iec_flex.ll"
return UINT;		/* Keyword (Data Type) */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1447 "iec_flex.ll"
return UDINT;		/* Keyword (Data Type) */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1448 "iec_flex.ll"
return ULINT;		/* Keyword (Data Type) */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1450 "iec_flex.ll"
return REAL;		/* Keyword (Data Type) */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1451 "iec_flex.ll"
return LREAL;		/* Keyword (Data Type) */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1453 "iec_flex.ll"
return WSTRING;		/* Keyword (Data Type) */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1454 "iec_flex.ll"
return STRING;		/* Keyword (Data Type) */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1456 "iec_flex.ll"
return TIME;		/* Keyword (Data Type) */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1457 "iec_flex.ll"
return DATE;		/* Keyword (Data Type) */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1458 "iec_flex.ll"
return DT;		/* Keyword (Data Type) */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1459 "iec_flex.ll"
return TOD;		/* Keyword (Data Type) */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1460 "iec_flex.ll"
return DATE_AND_TIME;	/* Keyword (Data Type) */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1461 "iec_flex.ll"
return TIME_OF_DAY;	/* Keyword (Data Type) */
	YY_BREAK
/* A non-standard extension! */
case 135:
YY_RULE_SETUP
#line 1464 "iec_flex.ll"
{if (runtime_options.allow_void_datatype) {return VOID;}          else {REJECT;}} 
	YY_BREAK
/*****************************************************************/
/* Keywords defined in "Safety Software Technical Specification" */
/*****************************************************************/
/* 
         * NOTE: The following keywords are define in 
         *       "Safety Software Technical Specification,
         *        Part 1: Concepts and Function Blocks,  
         *        Version 1.0 – Official Release"
         *        written by PLCopen - Technical Committee 5
         *
         *        We only support these extensions and keywords
         *        if the apropriate command line option is given.
         */
case 136:
YY_RULE_SETUP
#line 1480 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEBOOL;}          else {REJECT;}} 
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1482 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEBYTE;}          else {REJECT;}} 
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1483 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEWORD;}          else {REJECT;}} 
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1484 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEDWORD;}         else{REJECT;}}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1485 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFELWORD;}         else{REJECT;}}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1487 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFESINT;}          else{REJECT;}}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1488 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFELREAL;}         else{REJECT;}}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1490 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFESINT;}          else{REJECT;}}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1491 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEINT;}           else{REJECT;}}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1492 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEDINT;}          else{REJECT;}}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1493 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFELINT;}          else{REJECT;}}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1495 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEUSINT;}         else{REJECT;}}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1496 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEUINT;}          else{REJECT;}}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1497 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEUDINT;}         else{REJECT;}}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1498 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEULINT;}         else{REJECT;}}
	YY_BREAK
/* SAFESTRING and SAFEWSTRING are not yet supported, i.e. checked correctly, in the semantic analyser (stage 3) */
/*  so it is best not to support them at all... */
/*
SAFEWSTRING          {if (get_opt_safe_extensions()) {return SAFEWSTRING;}       else{REJECT;}}
SAFESTRING           {if (get_opt_safe_extensions()) {return SAFESTRING;}        else{REJECT;}}
 */
case 151:
YY_RULE_SETUP
#line 1507 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFETIME;}          else{REJECT;}}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1508 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEDATE;}          else{REJECT;}}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1509 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEDT;}            else{REJECT;}}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1510 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFETOD;}           else{REJECT;}}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1511 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEDATE_AND_TIME;} else{REJECT;}}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1512 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFETIME_OF_DAY;}   else{REJECT;}}
	YY_BREAK
/********************************/
/* B 1.3.2 - Generic data types */
/********************************/
/* Strangely, the following symbols do not seem to be required! */
/* But we include them so they become reserved words, and do not
	 * get passed up to bison as an identifier...
	 */
case 157:
YY_RULE_SETUP
#line 1521 "iec_flex.ll"
return ANY;		/* Keyword (Data Type) */
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1522 "iec_flex.ll"
return ANY_DERIVED;	/* Keyword (Data Type) */
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1523 "iec_flex.ll"
return ANY_ELEMENTARY;	/* Keyword (Data Type) */
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1524 "iec_flex.ll"
return ANY_MAGNITUDE;	/* Keyword (Data Type) */
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1525 "iec_flex.ll"
return ANY_NUM;		/* Keyword (Data Type) */
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1526 "iec_flex.ll"
return ANY_REAL;	/* Keyword (Data Type) */
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1527 "iec_flex.ll"
return ANY_INT;		/* Keyword (Data Type) */
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1528 "iec_flex.ll"
return ANY_BIT;		/* Keyword (Data Type) */
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1529 "iec_flex.ll"
return ANY_STRING;	/* Keyword (Data Type) */
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1530 "iec_flex.ll"
return ANY_DATE;	/* Keyword (Data Type) */
	YY_BREAK
/********************************/
/* B 1.3.3 - Derived data types */
/********************************/
case 167:
YY_RULE_SETUP
#line 1536 "iec_flex.ll"
return ASSIGN;		/* Delimiter */
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1537 "iec_flex.ll"
return DOTDOT;		/* Delimiter */
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1538 "iec_flex.ll"
return TYPE;		/* Keyword */
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1539 "iec_flex.ll"
return END_TYPE;	/* Keyword */
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1540 "iec_flex.ll"
return ARRAY;		/* Keyword */
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1541 "iec_flex.ll"
return OF;		/* Keyword */
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1542 "iec_flex.ll"
return STRUCT;		/* Keyword */
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1543 "iec_flex.ll"
return END_STRUCT;	/* Keyword */
	YY_BREAK
/*********************/
/* B 1.4 - Variables */
/*********************/
/******************************************/
/* B 1.4.3 - Declaration & Initialisation */
/******************************************/
case 175:
YY_RULE_SETUP
#line 1553 "iec_flex.ll"
return VAR_INPUT;	/* Keyword */
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1554 "iec_flex.ll"
return VAR_OUTPUT;	/* Keyword */
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1555 "iec_flex.ll"
return VAR_IN_OUT;	/* Keyword */
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1556 "iec_flex.ll"
return VAR_EXTERNAL;	/* Keyword */
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1557 "iec_flex.ll"
return VAR_GLOBAL;	/* Keyword */
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1558 "iec_flex.ll"
return END_VAR;		/* Keyword */
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1559 "iec_flex.ll"
return RETAIN;		/* Keyword */
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1560 "iec_flex.ll"
return NON_RETAIN;	/* Keyword */
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1561 "iec_flex.ll"
return R_EDGE;		/* Keyword */
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1562 "iec_flex.ll"
return F_EDGE;		/* Keyword */
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1563 "iec_flex.ll"
return AT;		/* Keyword */
	YY_BREAK
/***********************/
/* B 1.5.1 - Functions */
/***********************/
/* Note: The following END_FUNCTION rule includes a BEGIN(INITIAL); command.
	 *       This is necessary in case the input program being parsed has syntax errors that force
	 *       flex's main state machine to never change to the il_state or the st_state
	 *       after changing to the body_state.
	 *       Ths BEGIN(INITIAL) command forces the flex state machine to re-synchronise with 
	 *       the input stream even in the presence of buggy code!
	 */
case 186:
YY_RULE_SETUP
#line 1576 "iec_flex.ll"
return FUNCTION;			/* Keyword */
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1577 "iec_flex.ll"
BEGIN(INITIAL);	return END_FUNCTION;			/* Keyword */  /* see Note above */
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1578 "iec_flex.ll"
return VAR;				/* Keyword */
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1579 "iec_flex.ll"
return CONSTANT;			/* Keyword */
	YY_BREAK
/*****************************/
/* B 1.5.2 - Function Blocks */
/*****************************/
/* Note: The following END_FUNCTION_BLOCK rule includes a BEGIN(INITIAL); command.
	 *       This is necessary in case the input program being parsed has syntax errors that force
	 *       flex's main state machine to never change to the il_state or the st_state
	 *       after changing to the body_state.
	 *       Ths BEGIN(INITIAL) command forces the flex state machine to re-synchronise with 
	 *       the input stream even in the presence of buggy code!
	 */
case 190:
YY_RULE_SETUP
#line 1592 "iec_flex.ll"
return FUNCTION_BLOCK;		/* Keyword */
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1593 "iec_flex.ll"
BEGIN(INITIAL);	return END_FUNCTION_BLOCK;	/* Keyword */  /* see Note above */
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1594 "iec_flex.ll"
return VAR_TEMP;		/* Keyword */
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1595 "iec_flex.ll"
return VAR;			/* Keyword */
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1596 "iec_flex.ll"
return NON_RETAIN;		/* Keyword */
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1597 "iec_flex.ll"
return END_VAR;			/* Keyword */
	YY_BREAK
/**********************/
/* B 1.5.3 - Programs */
/**********************/
/* Note: The following END_PROGRAM rule includes a BEGIN(INITIAL); command.
	 *       This is necessary in case the input program being parsed has syntax errors that force
	 *       flex's main state machine to never change to the il_state or the st_state
	 *       after changing to the body_state.
	 *       Ths BEGIN(INITIAL) command forces the flex state machine to re-synchronise with 
	 *       the input stream even in the presence of buggy code!
	 */
case 196:
YY_RULE_SETUP
#line 1610 "iec_flex.ll"
return PROGRAM;				/* Keyword */
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1611 "iec_flex.ll"
BEGIN(INITIAL);	return END_PROGRAM;			/* Keyword */  /* see Note above */
	YY_BREAK
/********************************************/
/* B 1.6 Sequential Function Chart elements */
/********************************************/
/* NOTE: the following identifiers/tokens clash with the R and S IL operators, as well
	.* as other identifiers that may be used as variable names inside IL and ST programs.
	 * They will have to be handled when we include parsing of SFC... For now, simply
	 * ignore them!
	 */
case 198:
YY_RULE_SETUP
#line 1623 "iec_flex.ll"
return ACTION;			/* Keyword */
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1624 "iec_flex.ll"
return END_ACTION;		/* Keyword */
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 1626 "iec_flex.ll"
return TRANSITION;		/* Keyword */
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 1627 "iec_flex.ll"
return END_TRANSITION;		/* Keyword */
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1628 "iec_flex.ll"
return FROM;			/* Keyword */
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 1629 "iec_flex.ll"
return TO;			/* Keyword */
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 1631 "iec_flex.ll"
return INITIAL_STEP;		/* Keyword */
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1632 "iec_flex.ll"
return STEP;			/* Keyword */
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1633 "iec_flex.ll"
return END_STEP;		/* Keyword */
	YY_BREAK
/* PRIORITY is not a keyword, so we only return it when 
	 * it is explicitly required and we are not expecting any identifiers
	 * that could also use the same letter sequence (i.e. an identifier: piority)
	 */
case 207:
YY_RULE_SETUP
#line 1639 "iec_flex.ll"
return PRIORITY;
	YY_BREAK

case 208:
YY_RULE_SETUP
#line 1642 "iec_flex.ll"
return L;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1643 "iec_flex.ll"
return D;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1644 "iec_flex.ll"
return SD;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1645 "iec_flex.ll"
return DS;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1646 "iec_flex.ll"
return SL;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1647 "iec_flex.ll"
return N;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 1648 "iec_flex.ll"
return P;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 1649 "iec_flex.ll"
return P0;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 1650 "iec_flex.ll"
return P1;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1651 "iec_flex.ll"
return R;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1652 "iec_flex.ll"
return S;
	YY_BREAK

/********************************/
/* B 1.7 Configuration elements */
/********************************/
/* Note: The following END_CONFIGURATION rule will never get to be used, as we have
	 *       another identical rule above (closer to the rules handling the transitions
	 *       of the main state machine) that will always execute before this one.
	 * Note: The following END_CONFIGURATION rule includes a BEGIN(INITIAL); command.
	 *       This is nt strictly necessary, but I place it here so it follwos the same
	 *       pattern used in END_FUNCTION, END_PROGRAM, and END_FUNCTION_BLOCK
	 */
case 219:
YY_RULE_SETUP
#line 1666 "iec_flex.ll"
return CONFIGURATION;		/* Keyword */
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1667 "iec_flex.ll"
BEGIN(INITIAL); return END_CONFIGURATION;	/* Keyword */   /* see 2 Notes above! */
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 1668 "iec_flex.ll"
return TASK;			/* Keyword */
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 1669 "iec_flex.ll"
return RESOURCE;		/* Keyword */
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 1670 "iec_flex.ll"
return ON;			/* Keyword */
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 1671 "iec_flex.ll"
return END_RESOURCE;		/* Keyword */
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1672 "iec_flex.ll"
return VAR_CONFIG;		/* Keyword */
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 1673 "iec_flex.ll"
return VAR_ACCESS;		/* Keyword */
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 1674 "iec_flex.ll"
return END_VAR;			/* Keyword */
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 1675 "iec_flex.ll"
return WITH;			/* Keyword */
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 1676 "iec_flex.ll"
return PROGRAM;			/* Keyword */
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 1677 "iec_flex.ll"
return RETAIN;			/* Keyword */
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 1678 "iec_flex.ll"
return NON_RETAIN;		/* Keyword */
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 1679 "iec_flex.ll"
return READ_WRITE;		/* Keyword */
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 1680 "iec_flex.ll"
return READ_ONLY;		/* Keyword */
	YY_BREAK
/* PRIORITY, SINGLE and INTERVAL are not a keywords, so we only return them when 
	 * it is explicitly required and we are not expecting any identifiers
	 * that could also use the same letter sequence (i.e. an identifier: piority, ...)
	 */

case 234:
YY_RULE_SETUP
#line 1687 "iec_flex.ll"
return PRIORITY;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 1688 "iec_flex.ll"
return SINGLE;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 1689 "iec_flex.ll"
return INTERVAL;
	YY_BREAK

/***********************************/
/* B 2.1 Instructions and Operands */
/***********************************/
case 237:
YY_RULE_SETUP
#line 1695 "iec_flex.ll"
return EOL;
	YY_BREAK
/*******************/
/* B 2.2 Operators */
/*******************/
/* NOTE: we can't have flex return the same token for
	 *       ANDN and &N, neither for AND and &, since
	 *       AND and ANDN are considered valid variable
	 *       function or functionblock type names!
	 *       This means that the parser may decide that the
	 *       AND or ANDN strings found in the source code
	 *       are being used as variable names
	 *       and not as operators, and will therefore transform
	 *       these tokens into indentifier tokens!
	 *       We can't have the parser thinking that the source
	 *       code contained the string AND (which may be interpreted
	 *       as a vairable name) when in reality the source code
	 *       merely contained the character &, so we use two
	 *       different tokens for & and AND (and similarly
	 *       ANDN and &N)!
	 */
/* The following tokens clash with ST expression operators and Standard Functions */
/* They are also keywords! */
case 238:
YY_RULE_SETUP
#line 1719 "iec_flex.ll"
return AND;		/* Keyword */
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 1720 "iec_flex.ll"
return MOD;		/* Keyword */
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 1721 "iec_flex.ll"
return OR;		/* Keyword */
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 1722 "iec_flex.ll"
return XOR;		/* Keyword */
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 1723 "iec_flex.ll"
return NOT;		/* Keyword */
	YY_BREAK
/* The following tokens clash with Standard Functions */
/* They are keywords because they are a function name */

case 243:
YY_RULE_SETUP
#line 1728 "iec_flex.ll"
return ADD;		/* Keyword (Standard Function) */
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 1729 "iec_flex.ll"
return DIV;		/* Keyword (Standard Function) */
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 1730 "iec_flex.ll"
return EQ;		/* Keyword (Standard Function) */
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 1731 "iec_flex.ll"
return GE;		/* Keyword (Standard Function) */
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 1732 "iec_flex.ll"
return GT;		/* Keyword (Standard Function) */
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 1733 "iec_flex.ll"
return LE;		/* Keyword (Standard Function) */
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 1734 "iec_flex.ll"
return LT;		/* Keyword (Standard Function) */
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 1735 "iec_flex.ll"
return MUL;		/* Keyword (Standard Function) */
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 1736 "iec_flex.ll"
return NE;		/* Keyword (Standard Function) */
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 1737 "iec_flex.ll"
return SUB;		/* Keyword (Standard Function) */
	YY_BREAK

/* The following tokens clash with SFC action qualifiers */
/* They are not keywords! */

case 253:
YY_RULE_SETUP
#line 1743 "iec_flex.ll"
return S;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 1744 "iec_flex.ll"
return R;
	YY_BREAK

/* The following tokens clash with ST expression operators */
case 255:
YY_RULE_SETUP
#line 1748 "iec_flex.ll"
return AND2;		/* NOT a Delimiter! */
	YY_BREAK
/* The following tokens have no clashes */
/* They are not keywords! */

case 256:
YY_RULE_SETUP
#line 1753 "iec_flex.ll"
return LD;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 1754 "iec_flex.ll"
return LDN;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 1755 "iec_flex.ll"
return ST;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 1756 "iec_flex.ll"
return STN;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 1757 "iec_flex.ll"
return S1;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 1758 "iec_flex.ll"
return R1;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 1759 "iec_flex.ll"
return CLK;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 1760 "iec_flex.ll"
return CU;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 1761 "iec_flex.ll"
return CD;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 1762 "iec_flex.ll"
return PV;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 1763 "iec_flex.ll"
return IN;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 1764 "iec_flex.ll"
return PT;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 1765 "iec_flex.ll"
return ANDN;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 1766 "iec_flex.ll"
return ANDN2;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 1767 "iec_flex.ll"
return ORN;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 1768 "iec_flex.ll"
return XORN;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 1769 "iec_flex.ll"
return CAL;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 1770 "iec_flex.ll"
return CALC;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 1771 "iec_flex.ll"
return CALCN;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 1772 "iec_flex.ll"
return RET;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1773 "iec_flex.ll"
return RETC;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1774 "iec_flex.ll"
return RETCN;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1775 "iec_flex.ll"
return JMP;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1776 "iec_flex.ll"
return JMPC;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1777 "iec_flex.ll"
return JMPCN;
	YY_BREAK

/***********************/
/* B 3.1 - Expressions */
/***********************/
case 281:
YY_RULE_SETUP
#line 1783 "iec_flex.ll"
return OPER_EXP;	/* NOT a Delimiter! */
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1784 "iec_flex.ll"
return OPER_NE;		/* NOT a Delimiter! */
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1785 "iec_flex.ll"
return OPER_GE;		/* NOT a Delimiter! */
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1786 "iec_flex.ll"
return OPER_LE;		/* NOT a Delimiter! */
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1787 "iec_flex.ll"
return AND2;		/* NOT a Delimiter! */
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1788 "iec_flex.ll"
return AND;		/* Keyword */
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1789 "iec_flex.ll"
return XOR;		/* Keyword */
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1790 "iec_flex.ll"
return OR;		/* Keyword */
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1791 "iec_flex.ll"
return NOT;		/* Keyword */
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1792 "iec_flex.ll"
return MOD;		/* Keyword */
	YY_BREAK
/*****************************************/
/* B 3.2.2 Subprogram Control Statements */
/*****************************************/
case 291:
YY_RULE_SETUP
#line 1798 "iec_flex.ll"
return ASSIGN;		/* Delimiter */
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1799 "iec_flex.ll"
return SENDTO;		/* Delimiter */
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1800 "iec_flex.ll"
return RETURN;		/* Keyword */
	YY_BREAK
/********************************/
/* B 3.2.3 Selection Statements */
/********************************/
case 294:
YY_RULE_SETUP
#line 1806 "iec_flex.ll"
return IF;		/* Keyword */
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1807 "iec_flex.ll"
return THEN;		/* Keyword */
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 1808 "iec_flex.ll"
return ELSIF;		/* Keyword */
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 1809 "iec_flex.ll"
return ELSE;		/* Keyword */
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 1810 "iec_flex.ll"
return END_IF;		/* Keyword */
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 1812 "iec_flex.ll"
return CASE;		/* Keyword */
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 1813 "iec_flex.ll"
return OF;		/* Keyword */
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 1814 "iec_flex.ll"
return ELSE;		/* Keyword */
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 1815 "iec_flex.ll"
return END_CASE;	/* Keyword */
	YY_BREAK
/********************************/
/* B 3.2.4 Iteration Statements */
/********************************/
case 303:
YY_RULE_SETUP
#line 1821 "iec_flex.ll"
return FOR;		/* Keyword */
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 1822 "iec_flex.ll"
return TO;		/* Keyword */
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 1823 "iec_flex.ll"
return BY;		/* Keyword */
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 1824 "iec_flex.ll"
return DO;		/* Keyword */
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 1825 "iec_flex.ll"
return END_FOR;		/* Keyword */
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 1827 "iec_flex.ll"
return WHILE;		/* Keyword */
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 1828 "iec_flex.ll"
return DO;		/* Keyword */
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 1829 "iec_flex.ll"
return END_WHILE;	/* Keyword */
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 1831 "iec_flex.ll"
return REPEAT;		/* Keyword */
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 1832 "iec_flex.ll"
return UNTIL;		/* Keyword */
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 1833 "iec_flex.ll"
return END_REPEAT;	/* Keyword */
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 1835 "iec_flex.ll"
return EXIT;		/* Keyword */
	YY_BREAK
/********************************************************/
/********************************************************/
/********************************************************/
/*****                                              *****/
/*****                                              *****/
/*****  N O W    W O R K    W I T H    V A L U E S  *****/
/*****                                              *****/
/*****                                              *****/
/********************************************************/
/********************************************************/
/********************************************************/
/********************************************/
/* B.1.4.1   Directly Represented Variables */
/********************************************/
case 315:
YY_RULE_SETUP
#line 1858 "iec_flex.ll"
{yylval.ID=strdup(yytext); return get_direct_variable_token(yytext);}
	YY_BREAK
/******************************************/
/* B 1.4.3 - Declaration & Initialisation */
/******************************************/
case 316:
YY_RULE_SETUP
#line 1864 "iec_flex.ll"
{yylval.ID=strdup(yytext); return incompl_location_token;}
	YY_BREAK
/************************/
/* B 1.2.3.1 - Duration */
/************************/
case 317:
YY_RULE_SETUP
#line 1870 "iec_flex.ll"
{yylval.ID=strdup(yytext); return fixed_point_token;}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 1871 "iec_flex.ll"
{/*fprintf(stderr, "entering time_literal_state ##%s##\n", yytext);*/ unput_and_mark('#'); yy_push_state(time_literal_state);}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 1872 "iec_flex.ll"
{return erroneous_interval_token;}
	YY_BREAK

case 320:
YY_RULE_SETUP
#line 1875 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return integer_d_token;}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 1876 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return integer_h_token;}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 1877 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return integer_m_token;}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 1878 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return integer_s_token;}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 1879 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-2] = '\0'; return integer_ms_token;}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 1880 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return fixed_point_d_token;}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 1881 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return fixed_point_h_token;}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 1882 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return fixed_point_m_token;}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 1883 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return fixed_point_s_token;}
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 1884 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-2] = '\0'; return fixed_point_ms_token;}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 1886 "iec_flex.ll"
/* do nothing - eat it up!*/
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 1887 "iec_flex.ll"
{/*fprintf(stderr, "popping from time_literal_state (###)\n");*/ yy_pop_state(); return end_interval_token;}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 1888 "iec_flex.ll"
{/*fprintf(stderr, "time_literal_state: found invalid character '%s'. Aborting!\n", yytext);*/ ERROR;}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 1889 "iec_flex.ll"
{ERROR;}
	YY_BREAK

/*******************************/
/* B.1.2.2   Character Strings */
/*******************************/
case 334:
YY_RULE_SETUP
#line 1894 "iec_flex.ll"
{yylval.ID=strdup(yytext); return double_byte_character_string_token;}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 1895 "iec_flex.ll"
{yylval.ID=strdup(yytext); return single_byte_character_string_token;}
	YY_BREAK
/******************************/
/* B.1.2.1   Numeric literals */
/******************************/
case 336:
YY_RULE_SETUP
#line 1901 "iec_flex.ll"
{yylval.ID=strdup(yytext); return integer_token;}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 1902 "iec_flex.ll"
{yylval.ID=strdup(yytext); return real_token;}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 1903 "iec_flex.ll"
{yylval.ID=strdup(yytext); return binary_integer_token;}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 1904 "iec_flex.ll"
{yylval.ID=strdup(yytext); return octal_integer_token;}
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 1905 "iec_flex.ll"
{yylval.ID=strdup(yytext); return hex_integer_token;}
	YY_BREAK
/*****************************************/
/* B.1.1 Letters, digits and identifiers */
/*****************************************/
case 341:
YY_RULE_SETUP
#line 1911 "iec_flex.ll"
{yylval.ID=strdup(yytext); return sendto_identifier_token;}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 1912 "iec_flex.ll"
{yylval.ID=strdup(yytext); return sendto_identifier_token;}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 1913 "iec_flex.ll"
{yylval.ID=strdup(yytext);
					 // printf("returning identifier...: %s, %d\n", yytext, get_identifier_token(yytext));
					 return get_identifier_token(yytext);}
	YY_BREAK
/************************************************/
/************************************************/
/************************************************/
/*****                                      *****/
/*****                                      *****/
/*****   T H E    L E F T O V E R S . . .   *****/
/*****                                      *****/
/*****                                      *****/
/************************************************/
/************************************************/
/************************************************/
/* do the single character tokens...
	 *
	 *  e.g.:  ':'  '('  ')'  '+'  '*'  ...
	 */
case 344:
YY_RULE_SETUP
#line 1938 "iec_flex.ll"
{return yytext[0];}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 1941 "iec_flex.ll"
ECHO;
	YY_BREAK
#line 7891 "F:/vsproject/matiec-vs/stage1_2/iec_flex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2878 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2878 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2877);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 1941 "iec_flex.ll"



/*************************/
/* Tracking Functions... */
/*************************/

#define MAX_LINE_LENGTH 1024

tracking_t *GetNewTracking(FILE* in_file) {
  tracking_t* new_env = new tracking_t;
  new_env->eof         = 0;
  new_env->lineNumber  = 1;
  new_env->currentChar = 0;
  new_env->lineLength  = 0;
  new_env->currentTokenStart = 0;
  new_env->in_file = in_file;
  return new_env;
}


void FreeTracking(tracking_t *tracking) {
  delete tracking;
}


void UpdateTracking(const char *text) {
  const char *newline, *token = text;
  while ((newline = strchr(token, '\n')) != NULL) {
    token = newline + 1;
    current_tracking->lineNumber++;
    current_tracking->currentChar = 1;
  }
  current_tracking->currentChar += strlen(token);
}


/* GetNextChar: reads a character from input */
int GetNextChar(char *b, int maxBuffer) {
  int res = fgetc(current_tracking->in_file);
  if ( res == EOF ) 
    return 0;
  *b = (char)res;
  return 1;
}



/***********************************/
/* Utility function definitions... */
/***********************************/

/* print the include file stack to stderr... */
void print_include_stack(void) {
  int i;

  if ((include_stack_ptr - 1) >= 0)
    fprintf (stderr, "in file "); 
  for (i = include_stack_ptr - 1; i >= 0; i--)
    fprintf (stderr, "included from file %s:%d\n", include_stack[i].filename, include_stack[i].env->lineNumber);
}



/* set the internal state variables of lexical analyser to process a new include file */
void handle_include_file_(FILE *filehandle, const char *filename) {
  if (include_stack_ptr >= MAX_INCLUDE_DEPTH) {
    fprintf(stderr, "Includes nested too deeply\n");
    exit( 1 );
  }
  
  yyin = filehandle;
  
  include_stack[include_stack_ptr].buffer_state = YY_CURRENT_BUFFER;
  include_stack[include_stack_ptr].env = current_tracking;
  include_stack[include_stack_ptr].filename = current_filename;
  
  current_filename = strdup(filename);
  current_tracking = GetNewTracking(yyin);
  include_stack_ptr++;

  /* switch input buffer to new file... */
  yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
}



/* insert the code (in <source_code>) into the source code we are parsing.
 * This is done by creating an artificial file with that new source code, and then 'including' the file
 */
void include_string_(const char *source_code) {
  FILE *tmp_file = tmpfile();
  
  if(tmp_file == NULL) {
    perror("Error creating temp file.");
    exit(EXIT_FAILURE);
  }

  fwrite((void *)source_code, 1, strlen(source_code), tmp_file);
  rewind(tmp_file);

  /* now parse the tmp file, by asking flex to handle it as if it had been included with the (*#include ... *) pragma... */
  handle_include_file_(tmp_file, "");
//fclose(tmp_file);  /* do NOT close file. It must only be closed when we finish reading from it! */
}



/* Open an include file, and set the internal state variables of lexical analyser to process a new include file */
void include_file(const char *filename) {
  FILE *filehandle = NULL;
  
  for (int i = 0; (INCLUDE_DIRECTORIES[i] != NULL) && (filehandle == NULL); i++) {
    char *full_name;
    full_name = strdup3(INCLUDE_DIRECTORIES[i], "/", filename);
    if (full_name == NULL) {
      fprintf(stderr, "Out of memory!\n");
      exit( 1 );
    }
    filehandle = fopen(full_name, "r");
    free(full_name);
  }

  if (NULL == filehandle) {
    fprintf(stderr, "Error opening included file %s\n", filename);
    exit( 1 );
  }

  /* now process the new file... */
  handle_include_file_(filehandle, filename);
}



/* return the specified character to the input stream */
/* WARNING: this function destroys the contents of yytext */
void unput_char(const char c) {
  /* NOTE: The following uncomented code is not necessary as we currently use a different algorithm:
   *          - make a backup/snapshot of the current tracking data (in previous_tracking variable)
   *             (done in YY_USER_ACTION)
   *          - restore the previous tracking state when we unput any text...
   *             (in unput_text() and unput_and_mark() )
   */
//   /* We will later be processing this same character again when it is read from the input strem,
//    * and therefore we will be incrementing the line number and character column acordingly.
//    * We must therefore try to 'undo' the changes to the line number and character column
//    * so this character is not counted twice!
//    */
//   if        (c == '\n') {
//     current_tracking->lineNumber--;
//     /* We should now set the current_tracking->currentChar to the length of the previous line
//      * But we currently have no way of knowing it, so we simply set it to 0.
//      * I (msousa) don't think this is currently an issue because I don't believe the code
//      * ever calls unput_char() with a '\n', so we leave it for now
//      */
//     current_tracking->currentChar = 0;
//   } else if (current_tracking->currentChar > 0) {
//     current_tracking->currentChar--;
//   }

  unput(c); // unput() destroys the contents of yytext !!
}


/* return all the text in the current token back to the input stream, except the first n chars. */
void unput_text(int n) {
  if (n < 0) ERROR;
  signed int i; // must be signed! The iterartion may end with -1 when this function is called with n=0 !!

  char *yycopy = strdup( yytext ); /* unput_char() destroys yytext, so we copy it first */
  for (int i = yyleng-1; i >= n; i--)
    unput_char(yycopy[i]);

  *current_tracking = previous_tracking;
  yycopy[n] = '\0';
  UpdateTracking(yycopy);
  
  free(yycopy);
}



/* return all the text in the current token back to the input stream, 
 * but first return to the stream an additional character to mark the end of the token. 
 */
void unput_and_mark(const char mark_char) {
  char *yycopy = strdup( yytext ); /* unput_char() destroys yytext, so we copy it first */
  unput_char(mark_char);
  for (int i = yyleng-1; i >= 0; i--)
    unput_char(yycopy[i]);

  free(yycopy);
  *current_tracking = previous_tracking;
}



/* The body_state tries to find a ';' before a END_PROGRAM, END_FUNCTION or END_FUNCTION_BLOCK or END_ACTION
 * and ignores ';' inside comments and pragmas. This means that we cannot do this in a signle lex rule.
 * Body_state therefore stores ALL text we consume in every rule, so we can push it back into the buffer
 * once we have decided if we are parsing ST or IL code. The following functions manage that buffer used by
 * the body_state.
 */
/* The buffer used by the body_state state */
char *bodystate_buffer        = NULL;
bool  bodystate_is_whitespace = 1; // TRUE (1) if buffer is empty, or only contains whitespace.
tracking_t bodystate_init_tracking;

/* append text to bodystate_buffer */
void  append_bodystate_buffer(const char *text, int is_whitespace) {
  // printf("<<<append_bodystate_buffer>>> %d <%s><%s>\n", bodystate_buffer, text, (NULL != bodystate_buffer)?bodystate_buffer:"NULL");
  long int old_len = 0;
  // make backup of tracking if we are starting off a new body_state_buffer
  if (NULL == bodystate_buffer) bodystate_init_tracking = *current_tracking;
  // set bodystate_is_whitespace flag if we are starting a new buffer
  if (NULL == bodystate_buffer) bodystate_is_whitespace = 1;
  // set bodystate_is_whitespace flag to FALSE if we are adding non white space to buffer
  if (!is_whitespace)           bodystate_is_whitespace = 0;

  if (NULL != bodystate_buffer) old_len = strlen(bodystate_buffer);
  bodystate_buffer = (char *)realloc(bodystate_buffer, old_len + strlen(text) + 1);
  if (NULL == bodystate_buffer) ERROR;
  strcpy(bodystate_buffer + old_len, text);
  //printf("=<%s> %d %d\n", (NULL != bodystate_buffer)?bodystate_buffer:NULL, old_len + strlen(text) + 1, bodystate_buffer);
}

/* Return all data in bodystate_buffer back to flex, and empty bodystate_buffer. */
void   unput_bodystate_buffer(void) {
  if (NULL == bodystate_buffer) ERROR;
  // printf("<<<unput_bodystate_buffer>>>\n%s\n", bodystate_buffer);
  
  for (long int i = strlen(bodystate_buffer)-1; i >= 0; i--)
    unput_char(bodystate_buffer[i]);
  
  free(bodystate_buffer);
  bodystate_buffer        = NULL;
  bodystate_is_whitespace = 1;  
  *current_tracking = bodystate_init_tracking;
}


/* Return true if bodystate_buffer is empty or ony contains whitespace!! */
int  isempty_bodystate_buffer(void) {
  if (NULL == bodystate_buffer) return 1;
  if (bodystate_is_whitespace)  return 1;
  return 0;
}


/* Delete all data in bodystate. */
/* Will be used to delete ST whitespace when not needed. If not deleted this whitespace 
 * will be prepended to the next text block of code being appended to bodystate_buffer,
 * which may cause trouble if it is IL code
 */
void  del_bodystate_buffer(void) {
  free(bodystate_buffer);
  bodystate_buffer        = NULL;
  bodystate_is_whitespace = 1;  
}


/* Called by flex when it reaches the end-of-file */
int yywrap(void)
{
  /* We reached the end of the input file... */

  /* Should we continue with another file? */
  /* If so:
   *   open the new file...
   *   return 0;
   */

  /* to stop processing...
   *   return 1;
   */

  return 1;  /* Stop scanning at end of input file. */
}



/*******************************/
/* Public Interface for Bison. */
/*******************************/

/* The following functions will be called from inside bison code! */

void include_string(const char *source_code) {include_string_(source_code);}


/* Tell flex which file to parse. This function will not imediately start parsing the file.
 * To parse the file, you then need to call yyparse()
 *
 * Returns NULL on error opening the file (and a valid errno), or 0 on success.
 * Caller must close the file!
 */
FILE *parse_file(const char *filename) {
  FILE *filehandle = NULL;

  if((filehandle = fopen(filename, "r")) != NULL) {
    yyin = filehandle;
    current_filename = strdup(filename);
    current_tracking = GetNewTracking(yyin);
  }
  return filehandle;
}






/*************************************/
/* Include a main() function to test */
/* the token parsing by flex....     */
/*************************************/
#ifdef TEST_MAIN

#include "../util/symtable.hh"

yystype yylval;
YYLTYPE yylloc;




int get_identifier_token(const char *identifier_str) {return 0;}
int get_direct_variable_token(const char *direct_variable_str) {return 0;}


int main(int argc, char **argv) {

  FILE *in_file;
  int res;
	
  if (argc == 1) {
    /* Work as an interactive (command line) parser... */
    while((res=yylex()))
      fprintf(stderr, "(line %d)token: %d\n", yylineno, res);
  } else {
    /* Work as non-interactive (file) parser... */
    if((in_file = fopen(argv[1], "r")) == NULL) {
      char *errmsg = strdup2("Error opening main file ", argv[1]);
      perror(errmsg);
      free(errmsg);
      return -1;
    }

    /* parse the file... */
    yyin = in_file;
    current_filename = argv[1];
    while(1) {
      res=yylex();
      fprintf(stderr, "(line %d)token: %d (%s)\n", yylineno, res, yylval.ID);
    }
  }
	
	return 0;

}
#endif
